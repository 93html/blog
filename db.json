{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1494250888332},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1494250888333},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1494250888332},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1494250888333},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1494250888333},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1494250888334},{"_id":"themes/next/_config.yml","hash":"ddeaffd4df4fa34f08677f00995093d9f2499f04","modified":1494250888334},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1494250888334},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1494250888334},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1494250888334},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1494250888334},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1494250888347},{"_id":"source/favicon.ico","hash":"cbddfbd544777480ceff76dfb59e87dfc29070a1","modified":1494250888311},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1494250888333},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1494250888333},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1494250888337},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1494250888346},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1494250888347},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1494250888347},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1494250888347},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1494250888347},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1494250888347},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1494250888335},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1494250888335},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1494250888335},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1494250888335},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1494250888335},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1494250888336},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1494250888336},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1494250888336},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1494250888337},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1494250888337},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1494250888337},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1494250888348},{"_id":"source/_posts/2016年工作总结.md","hash":"727ddaf87c89f4e47c55a378fec77b9eb7cc0cba","modified":1494250888284},{"_id":"source/_posts/Javascript 浮点数精度问题.md","hash":"c53160a09b5bf7baf7a5c452c2cc94898d98f0ce","modified":1494251095247},{"_id":"source/_posts/Webpack-基本概念.md","hash":"c6404c9fb5cf8c90895f6249626612268d59bce5","modified":1494250888285},{"_id":"source/_posts/一个新的开始.md","hash":"83e1a6453deb578b24bdeedde08422f3b5c16fdd","modified":1494250888285},{"_id":"source/_posts/Webpack-动态加载.md","hash":"e87aa35fcec6a920284ac39080a2309086d1e407","modified":1494250888285},{"_id":"source/_posts/全站-HTTPS-啦！.md","hash":"9c517269bc29084248e5b0e23933dd956f71ede2","modified":1494250888286},{"_id":"source/_posts/五线谱视谱练习程序.md","hash":"826a4ef4c50a0285cabc06bbf5b807a9f3cfa963","modified":1494250888285},{"_id":"source/_posts/大幅提升-React-性能的6个建议.md","hash":"0927f4c21b28eed0e31e52be268e5d4c388a26cc","modified":1494250888311},{"_id":"source/_posts/匠人的悲哀.md","hash":"bb46bc22d1f104b8b97c29fc5ec4f0ddf9e945f1","modified":1494250888311},{"_id":"source/_posts/炉石传说之大局观.md","hash":"42c81a3f2cc16527e0f85ac54827d9d072eb3f41","modified":1494250888311},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1494250888387},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1494250888387},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1494250888387},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494250888365},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1494250888339},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1494250888339},{"_id":"themes/next/layout/_partials/footer.swig","hash":"eb543d03d6a8d1ceac861c125a680cc98308e6d4","modified":1494250888340},{"_id":"themes/next/layout/_partials/head.swig","hash":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1494250888340},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1494250888340},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1494250888340},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1494250888340},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1494250888337},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1494250888337},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1494250888338},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1494250888338},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1494250888338},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1494250888342},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1494250888342},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1494250888342},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1494250888346},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1494250888348},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1494250888348},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1494250888348},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1494250888365},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1494250888365},{"_id":"themes/next/source/images/avatar.png","hash":"9c7cb0389d874bd2e4a7438accb95a2efdd44f81","modified":1494250888366},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1494250888366},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1494250888366},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1494250888366},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1494250888366},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1494250888367},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494250888368},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1494250888367},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1494250888367},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1494250888368},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494250888368},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1494250888368},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1494250888368},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494250888344},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494250888344},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494250888360},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494250888359},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494250888360},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494250888364},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494250888365},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"4d3611f46e4e24033ecbe8b354a5b650bd6ee487","modified":1494250888340},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1494250888340},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1494250888341},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1494250888340},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1494250888341},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1494250888341},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1494250888341},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1494250888341},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1494250888342},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1494250888344},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1494250888344},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1494250888345},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1494250888346},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1494250888346},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1494250888346},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1494250888346},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1494250888360},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1494250888360},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1494250888359},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1494250888364},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1494250888365},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e0a7e78e6d1f7ae3e8aaad0dc4daa8a67e3131e2","modified":1494250888365},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1494250888374},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1494250888374},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1494250888374},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1494250888374},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1494250888375},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1494250888376},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1494250888375},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1494250888376},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1494250888376},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1494250888383},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1494250888383},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1494250888383},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1494250888383},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1494250888384},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1494250888384},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1494250888382},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1494250888385},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1494250888385},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1494250888386},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1494250888386},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1494250888387},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1494250888368},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1494250888369},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1494250888369},{"_id":"themes/next/source/js/src/motion.js","hash":"8c922f41031ece13ef7f9349b5aff4439e66b27b","modified":1494250888369},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1494250888369},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1494250888370},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1494250888370},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1494250888382},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1494250888344},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1494250888344},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1494250888344},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1494250888344},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1494250888345},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1494250888345},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1494250888345},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1494250888345},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1494250888349},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1494250888349},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1494250888350},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1494250888350},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1494250888351},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1494250888355},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1494250888357},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1494250888358},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1494250888358},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1494250888358},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1494250888358},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1494250888358},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1494250888362},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1494250888362},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1494250888362},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1494250888362},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1494250888362},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1494250888360},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1494250888360},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1494250888361},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1494250888361},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1494250888361},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1494250888361},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1494250888361},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1494250888363},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1494250888363},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1494250888363},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1494250888364},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1494250888364},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1494250888364},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1494250888364},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494250888370},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494250888371},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494250888370},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494250888371},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494250888371},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494250888371},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1494250888373},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1494250888373},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1494250888374},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1494250888375},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1494250888375},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1494250888377},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1494250888377},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1494250888377},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1494250888381},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1494250888384},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1494250888384},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1494250888369},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1494250888378},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1494250888378},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1494250888381},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1494250888386},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1494250888350},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1494250888351},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1494250888351},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1494250888351},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1494250888351},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1494250888351},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1494250888350},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1494250888351},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1494250888350},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1494250888350},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1494250888351},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1494250888351},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1494250888352},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1494250888352},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1494250888352},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1494250888352},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1494250888352},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1494250888352},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1494250888353},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1494250888353},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1494250888353},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1494250888353},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1494250888353},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1494250888354},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1494250888354},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1494250888354},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1494250888355},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1494250888355},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1494250888355},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1494250888355},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1494250888355},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1494250888355},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1494250888355},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1494250888356},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1494250888356},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1494250888356},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1494250888356},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1494250888356},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1494250888356},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1494250888357},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1494250888357},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1494250888357},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1494250888357},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1494250888362},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1494250888361},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1494250888361},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494250888372},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1494250888372},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1494250888372},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1494250888372},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1494250888372},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1494250888373},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1494250888381},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1494250888380},{"_id":"source/_posts/前端面试题收集.md","hash":"74d13086451ffe0020ef17fcb11b0acbf06a0866","modified":1494251654055},{"_id":"public/images/avatar.gif","hash":"c19e81dd0f0e59af3290f22a9f1025f95458378f","modified":1494251677196},{"_id":"public/images/avatar.png","hash":"0448d1e2d7da2a7d896552849fafb81a96bab295","modified":1494251677196},{"_id":"public/images/cc-by-nc-nd.svg","hash":"a001671db56914e9e85147ba7df8c35d9806e664","modified":1494251677198},{"_id":"public/images/cc-by-nc-sa.svg","hash":"716c8de2e05cf9bf7c6650856104a8fe5d2d5443","modified":1494251677198},{"_id":"public/images/cc-by-nc.svg","hash":"0d183dfe21e7b8f037c1572821386e309f147c50","modified":1494251677198},{"_id":"public/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1494251677198},{"_id":"public/images/cc-by-sa.svg","hash":"acb7a5ffef273b46e9353f869608ed13eb2825fe","modified":1494251677198},{"_id":"public/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1494251677198},{"_id":"public/images/cc-zero.svg","hash":"a96cda245a852a0f67bbaddf5e953825d31986b6","modified":1494251677198},{"_id":"public/images/quote-l.svg","hash":"1708b1c302c85dad66ada25bdb5b560861a007d3","modified":1494251677198},{"_id":"public/images/quote-r.svg","hash":"b2251283267cab9186a437cded16a1b929b81097","modified":1494251677198},{"_id":"public/images/searchicon.png","hash":"00eed611c73d736ddea861a92d8c91d44aefef5c","modified":1494251677198},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"d3e4776a07bf7aee7779e26892cb4076909840b3","modified":1494251677198},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"3494864c175935e45c6ae5e76c2cbe7c9d53c41a","modified":1494251677198},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"0183383be7d6a44a90af8666c3ceecab70c9a8a2","modified":1494251677198},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"acd83f6da78f978bb7d0fbde8ec2db99b19e1ad8","modified":1494251677198},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f70e244175be4f96a237a748577f28f39dd3c7cb","modified":1494251677198},{"_id":"public/2017/01/05/五线谱视谱练习程序/index.html","hash":"7bd3728ce53d1cd46df6ebd36758bd66d38c2a71","modified":1494251677489},{"_id":"public/2016/12/28/全站-HTTPS-啦！/index.html","hash":"b7a843e478d25f35757d596c428ddc98203e0d6e","modified":1494251677489},{"_id":"public/2016/12/15/一个新的开始/index.html","hash":"01c3d35dd592ecd4f668a59c67d89a8a06aad770","modified":1494251677490},{"_id":"public/tags/Webpack/index.html","hash":"596bc7848528069313e76e911f5c35238b215ec9","modified":1494251677490},{"_id":"public/tags/Https/index.html","hash":"8a13d458e36f1116d86b748d6191abfb7acbb71e","modified":1494251677490},{"_id":"public/tags/React/index.html","hash":"0c79f8f995b76363dff92ee903864ae7b7815856","modified":1494251677490},{"_id":"public/categories/技术/index.html","hash":"727935f1b72ae0072be055684418387d98d3c813","modified":1494251677490},{"_id":"public/categories/随笔/index.html","hash":"189ede20a6a02426aa211e9c5a57f8f3f5090823","modified":1494251677490},{"_id":"public/archives/index.html","hash":"42b448cb955fa17349016197eb4389446a3c86cd","modified":1494251677490},{"_id":"public/archives/2016/index.html","hash":"61ab3386e39407fb2faf9c6076525e19230ec0ec","modified":1494251677490},{"_id":"public/archives/2016/12/index.html","hash":"65e1c07e95ac013328e441223b763538de12a37d","modified":1494251677490},{"_id":"public/archives/2017/index.html","hash":"df4a3b9b9fdd5fdbbe8cdf6de4c6ae960bbab3a8","modified":1494251677490},{"_id":"public/archives/2017/01/index.html","hash":"1068865aab34da21c515b30a7c20d04b272c8dd2","modified":1494251677490},{"_id":"public/2016/12/27/Webpack-基本概念/index.html","hash":"4c547d8b3d2fd326cc22a2579bf0498da617b2d7","modified":1494251677490},{"_id":"public/2016/12/24/大幅提升-React-性能的6个建议/index.html","hash":"2a531ce05edb6d081c578605b1207f0e1df401a8","modified":1494251677490},{"_id":"public/2016/12/19/Webpack-动态加载/index.html","hash":"60aa3d34ede6a53702b507e63ffd2698d4ab134e","modified":1494251677490},{"_id":"public/index.html","hash":"bd7b759da501176cacd93975bb79c072ea3bae85","modified":1494251677490},{"_id":"public/2017/05/06/Javascript 浮点数精度问题/index.html","hash":"35a8e82a10d0cf605332f8d48f09e944149135c7","modified":1494251677493},{"_id":"public/2017/02/14/炉石传说之大局观/index.html","hash":"a315989c3d31f1551d4845d103053508bf7f4e67","modified":1494251677493},{"_id":"public/2017/01/25/匠人的悲哀/index.html","hash":"f9cee7d8691147e82212bf56a09b95312bd30a61","modified":1494251677494},{"_id":"public/2017/01/15/2016年工作总结/index.html","hash":"47989c209ff8452ee14d420ad817c6c2db08a29e","modified":1494251677494},{"_id":"public/page/2/index.html","hash":"4c55ce7002e26175cbed88cd2c605ffc5456b137","modified":1494251677494},{"_id":"public/tags/炉石传说/index.html","hash":"62d97d58ef2a094165ac257468b033ffc8f28243","modified":1494251677494},{"_id":"public/categories/游戏/index.html","hash":"a975eef3154d58376d343a8241b2cf2609d1986f","modified":1494251677494},{"_id":"public/archives/page/2/index.html","hash":"e46201f489f9eaab9b92e0335ec18216b71b9263","modified":1494251677494},{"_id":"public/archives/2017/02/index.html","hash":"c50c243d2e6a31c87540bef6b68b77d1c76af5e9","modified":1494251677494},{"_id":"public/archives/2017/05/index.html","hash":"2ad699707d9e1a535049bac19387384410cd301d","modified":1494251677494},{"_id":"public/2017/05/08/前端面试题收集/index.html","hash":"d7f63c9960e61c5574f935a5f4648e59583ec95d","modified":1494251677494}],"Category":[{"name":"技术","_id":"cj2g6fus80002l8vdjolkjle9"},{"name":"随笔","_id":"cj2g6fusk000dl8vdxtt2duh9"},{"name":"游戏","_id":"cj2g6fusr000kl8vdktz3r391"}],"Data":[],"Page":[],"Post":[{"title":"2016年工作总结","date":"2017-01-15T03:18:21.000Z","_content":"今年不知怎么的，各大技术社区的年度总结主题特别多，总想着我也要写一篇总结总结，但种种原因（懒）导致一直没有执行起来，直到周四我的领导跑来说让我写一篇公司的前端年度工作总结，年会上要用到，好吧那就搞起来，一番酝酿之后，2016年技术上还演进了不少东西，由于汇报的对象都是普通非技术人员，把点都覆盖到的同时，用词都比较通俗，也比较标题党，给人一种略感浮夸的艺术效果。。\n<!--more-->\n\n### 与分辨率和解，彻底搞定适配性问题！\n以一张 iPhone6 为标准分辨率的设计稿，来兼容市面上五花八门的手机屏幕，一度曾是前端工作中非常头疼的问题之一，如今通过使用一种全新的相对尺寸单位，彻底解决了适配性问题，不管用户用的是 iPhone 几，或者小米华为诺基亚，统统与设计稿的效果是一致的\n\n### 测试机永不构建！\n开发代码与产品代码之间经过一层构建的过程，这个过程通常要花费两到三分钟，曾经一个常见的情节是，一个需要在测试机上反复调试的问题，也许只是把1改为2这样简单的修改都要经过构建，最终修复一个问题的时间，90%都花在了等待构建脚本跑完的过程中，如今在测试服上部署了一套 develop server，提交源码便可在真机上直接运行\n\n### 修正构建配置，代码体积不增反减！\n曾经在构建脚本中存在一个问题，有些代码会被反复打包到结果中，导致用户损失了大量的流量，后经过层层的拨丝抽茧，最终找到了问题的原因，并且完美的结绝了，如果对比去年的代码，从结果上来说，经过了一年的产品迭代后，代码总体积反而还缩小了不少\n\n### 增量更新，不浪费1KB流量！\n曾经的产品代码如同是浇铸出来的一块整体，每次发布新版本都要求用户全量更新，哪怕只是做了一点点修改，后经过优化，将产品代码拆解分层，现在可以精确到几KB级别的更新\n\n### 一键发布产品代码，拒绝做脚本的奴隶！\n由于移动端产品线众多，一次发布过程需要运行最多6条命令，其中若有些许人为失误，就会发生无法预计的错误，如今通过一个脚本来代替人为操作，可靠，高效\n\n### 解放生产力，活动页辅助切图工具！\n曾经来自各种合作方的活动页面占用了很大一部分工作内容，然而其本身就技术层面而言，都是重复性的切图工作，所以我们创造了一套辅助工具，包含 photoshop 切图宏，和自动生成页面脚本，如今制作一个活动页面只需要原来六分之一的时间\n\n### 老中医根治牛皮癣，解决缓存更新问题！\n缓存问题可谓是牛皮癣，虽不致命但是无法让人视而不见，曾经由于一台机器上缓存没有同步，还引发了一场毁灭性的风波，后来在我们在需要更新缓存的文件后面，增加了一些特殊的字符串，客户端会通过这些字符串的变化放弃缓存，从而彻底解决了缓存问题\n","source":"_posts/2016年工作总结.md","raw":"---\ntitle: 2016年工作总结\ndate: 2017-01-15 11:18:21\ncategories: 技术\n---\n今年不知怎么的，各大技术社区的年度总结主题特别多，总想着我也要写一篇总结总结，但种种原因（懒）导致一直没有执行起来，直到周四我的领导跑来说让我写一篇公司的前端年度工作总结，年会上要用到，好吧那就搞起来，一番酝酿之后，2016年技术上还演进了不少东西，由于汇报的对象都是普通非技术人员，把点都覆盖到的同时，用词都比较通俗，也比较标题党，给人一种略感浮夸的艺术效果。。\n<!--more-->\n\n### 与分辨率和解，彻底搞定适配性问题！\n以一张 iPhone6 为标准分辨率的设计稿，来兼容市面上五花八门的手机屏幕，一度曾是前端工作中非常头疼的问题之一，如今通过使用一种全新的相对尺寸单位，彻底解决了适配性问题，不管用户用的是 iPhone 几，或者小米华为诺基亚，统统与设计稿的效果是一致的\n\n### 测试机永不构建！\n开发代码与产品代码之间经过一层构建的过程，这个过程通常要花费两到三分钟，曾经一个常见的情节是，一个需要在测试机上反复调试的问题，也许只是把1改为2这样简单的修改都要经过构建，最终修复一个问题的时间，90%都花在了等待构建脚本跑完的过程中，如今在测试服上部署了一套 develop server，提交源码便可在真机上直接运行\n\n### 修正构建配置，代码体积不增反减！\n曾经在构建脚本中存在一个问题，有些代码会被反复打包到结果中，导致用户损失了大量的流量，后经过层层的拨丝抽茧，最终找到了问题的原因，并且完美的结绝了，如果对比去年的代码，从结果上来说，经过了一年的产品迭代后，代码总体积反而还缩小了不少\n\n### 增量更新，不浪费1KB流量！\n曾经的产品代码如同是浇铸出来的一块整体，每次发布新版本都要求用户全量更新，哪怕只是做了一点点修改，后经过优化，将产品代码拆解分层，现在可以精确到几KB级别的更新\n\n### 一键发布产品代码，拒绝做脚本的奴隶！\n由于移动端产品线众多，一次发布过程需要运行最多6条命令，其中若有些许人为失误，就会发生无法预计的错误，如今通过一个脚本来代替人为操作，可靠，高效\n\n### 解放生产力，活动页辅助切图工具！\n曾经来自各种合作方的活动页面占用了很大一部分工作内容，然而其本身就技术层面而言，都是重复性的切图工作，所以我们创造了一套辅助工具，包含 photoshop 切图宏，和自动生成页面脚本，如今制作一个活动页面只需要原来六分之一的时间\n\n### 老中医根治牛皮癣，解决缓存更新问题！\n缓存问题可谓是牛皮癣，虽不致命但是无法让人视而不见，曾经由于一台机器上缓存没有同步，还引发了一场毁灭性的风波，后来在我们在需要更新缓存的文件后面，增加了一些特殊的字符串，客户端会通过这些字符串的变化放弃缓存，从而彻底解决了缓存问题\n","slug":"2016年工作总结","published":1,"updated":"2017-05-08T13:41:28.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2g6fus20000l8vdfgv4ubyq","content":"<p>今年不知怎么的，各大技术社区的年度总结主题特别多，总想着我也要写一篇总结总结，但种种原因（懒）导致一直没有执行起来，直到周四我的领导跑来说让我写一篇公司的前端年度工作总结，年会上要用到，好吧那就搞起来，一番酝酿之后，2016年技术上还演进了不少东西，由于汇报的对象都是普通非技术人员，把点都覆盖到的同时，用词都比较通俗，也比较标题党，给人一种略感浮夸的艺术效果。。<br><a id=\"more\"></a></p><h3 id=\"与分辨率和解，彻底搞定适配性问题！\"><a href=\"#与分辨率和解，彻底搞定适配性问题！\" class=\"headerlink\" title=\"与分辨率和解，彻底搞定适配性问题！\"></a>与分辨率和解，彻底搞定适配性问题！</h3><p>以一张 iPhone6 为标准分辨率的设计稿，来兼容市面上五花八门的手机屏幕，一度曾是前端工作中非常头疼的问题之一，如今通过使用一种全新的相对尺寸单位，彻底解决了适配性问题，不管用户用的是 iPhone 几，或者小米华为诺基亚，统统与设计稿的效果是一致的</p><h3 id=\"测试机永不构建！\"><a href=\"#测试机永不构建！\" class=\"headerlink\" title=\"测试机永不构建！\"></a>测试机永不构建！</h3><p>开发代码与产品代码之间经过一层构建的过程，这个过程通常要花费两到三分钟，曾经一个常见的情节是，一个需要在测试机上反复调试的问题，也许只是把1改为2这样简单的修改都要经过构建，最终修复一个问题的时间，90%都花在了等待构建脚本跑完的过程中，如今在测试服上部署了一套 develop server，提交源码便可在真机上直接运行</p><h3 id=\"修正构建配置，代码体积不增反减！\"><a href=\"#修正构建配置，代码体积不增反减！\" class=\"headerlink\" title=\"修正构建配置，代码体积不增反减！\"></a>修正构建配置，代码体积不增反减！</h3><p>曾经在构建脚本中存在一个问题，有些代码会被反复打包到结果中，导致用户损失了大量的流量，后经过层层的拨丝抽茧，最终找到了问题的原因，并且完美的结绝了，如果对比去年的代码，从结果上来说，经过了一年的产品迭代后，代码总体积反而还缩小了不少</p><h3 id=\"增量更新，不浪费1KB流量！\"><a href=\"#增量更新，不浪费1KB流量！\" class=\"headerlink\" title=\"增量更新，不浪费1KB流量！\"></a>增量更新，不浪费1KB流量！</h3><p>曾经的产品代码如同是浇铸出来的一块整体，每次发布新版本都要求用户全量更新，哪怕只是做了一点点修改，后经过优化，将产品代码拆解分层，现在可以精确到几KB级别的更新</p><h3 id=\"一键发布产品代码，拒绝做脚本的奴隶！\"><a href=\"#一键发布产品代码，拒绝做脚本的奴隶！\" class=\"headerlink\" title=\"一键发布产品代码，拒绝做脚本的奴隶！\"></a>一键发布产品代码，拒绝做脚本的奴隶！</h3><p>由于移动端产品线众多，一次发布过程需要运行最多6条命令，其中若有些许人为失误，就会发生无法预计的错误，如今通过一个脚本来代替人为操作，可靠，高效</p><h3 id=\"解放生产力，活动页辅助切图工具！\"><a href=\"#解放生产力，活动页辅助切图工具！\" class=\"headerlink\" title=\"解放生产力，活动页辅助切图工具！\"></a>解放生产力，活动页辅助切图工具！</h3><p>曾经来自各种合作方的活动页面占用了很大一部分工作内容，然而其本身就技术层面而言，都是重复性的切图工作，所以我们创造了一套辅助工具，包含 photoshop 切图宏，和自动生成页面脚本，如今制作一个活动页面只需要原来六分之一的时间</p><h3 id=\"老中医根治牛皮癣，解决缓存更新问题！\"><a href=\"#老中医根治牛皮癣，解决缓存更新问题！\" class=\"headerlink\" title=\"老中医根治牛皮癣，解决缓存更新问题！\"></a>老中医根治牛皮癣，解决缓存更新问题！</h3><p>缓存问题可谓是牛皮癣，虽不致命但是无法让人视而不见，曾经由于一台机器上缓存没有同步，还引发了一场毁灭性的风波，后来在我们在需要更新缓存的文件后面，增加了一些特殊的字符串，客户端会通过这些字符串的变化放弃缓存，从而彻底解决了缓存问题</p>","excerpt":"<p>今年不知怎么的，各大技术社区的年度总结主题特别多，总想着我也要写一篇总结总结，但种种原因（懒）导致一直没有执行起来，直到周四我的领导跑来说让我写一篇公司的前端年度工作总结，年会上要用到，好吧那就搞起来，一番酝酿之后，2016年技术上还演进了不少东西，由于汇报的对象都是普通非技术人员，把点都覆盖到的同时，用词都比较通俗，也比较标题党，给人一种略感浮夸的艺术效果。。<br>","more":"</p><h3 id=\"与分辨率和解，彻底搞定适配性问题！\"><a href=\"#与分辨率和解，彻底搞定适配性问题！\" class=\"headerlink\" title=\"与分辨率和解，彻底搞定适配性问题！\"></a>与分辨率和解，彻底搞定适配性问题！</h3><p>以一张 iPhone6 为标准分辨率的设计稿，来兼容市面上五花八门的手机屏幕，一度曾是前端工作中非常头疼的问题之一，如今通过使用一种全新的相对尺寸单位，彻底解决了适配性问题，不管用户用的是 iPhone 几，或者小米华为诺基亚，统统与设计稿的效果是一致的</p><h3 id=\"测试机永不构建！\"><a href=\"#测试机永不构建！\" class=\"headerlink\" title=\"测试机永不构建！\"></a>测试机永不构建！</h3><p>开发代码与产品代码之间经过一层构建的过程，这个过程通常要花费两到三分钟，曾经一个常见的情节是，一个需要在测试机上反复调试的问题，也许只是把1改为2这样简单的修改都要经过构建，最终修复一个问题的时间，90%都花在了等待构建脚本跑完的过程中，如今在测试服上部署了一套 develop server，提交源码便可在真机上直接运行</p><h3 id=\"修正构建配置，代码体积不增反减！\"><a href=\"#修正构建配置，代码体积不增反减！\" class=\"headerlink\" title=\"修正构建配置，代码体积不增反减！\"></a>修正构建配置，代码体积不增反减！</h3><p>曾经在构建脚本中存在一个问题，有些代码会被反复打包到结果中，导致用户损失了大量的流量，后经过层层的拨丝抽茧，最终找到了问题的原因，并且完美的结绝了，如果对比去年的代码，从结果上来说，经过了一年的产品迭代后，代码总体积反而还缩小了不少</p><h3 id=\"增量更新，不浪费1KB流量！\"><a href=\"#增量更新，不浪费1KB流量！\" class=\"headerlink\" title=\"增量更新，不浪费1KB流量！\"></a>增量更新，不浪费1KB流量！</h3><p>曾经的产品代码如同是浇铸出来的一块整体，每次发布新版本都要求用户全量更新，哪怕只是做了一点点修改，后经过优化，将产品代码拆解分层，现在可以精确到几KB级别的更新</p><h3 id=\"一键发布产品代码，拒绝做脚本的奴隶！\"><a href=\"#一键发布产品代码，拒绝做脚本的奴隶！\" class=\"headerlink\" title=\"一键发布产品代码，拒绝做脚本的奴隶！\"></a>一键发布产品代码，拒绝做脚本的奴隶！</h3><p>由于移动端产品线众多，一次发布过程需要运行最多6条命令，其中若有些许人为失误，就会发生无法预计的错误，如今通过一个脚本来代替人为操作，可靠，高效</p><h3 id=\"解放生产力，活动页辅助切图工具！\"><a href=\"#解放生产力，活动页辅助切图工具！\" class=\"headerlink\" title=\"解放生产力，活动页辅助切图工具！\"></a>解放生产力，活动页辅助切图工具！</h3><p>曾经来自各种合作方的活动页面占用了很大一部分工作内容，然而其本身就技术层面而言，都是重复性的切图工作，所以我们创造了一套辅助工具，包含 photoshop 切图宏，和自动生成页面脚本，如今制作一个活动页面只需要原来六分之一的时间</p><h3 id=\"老中医根治牛皮癣，解决缓存更新问题！\"><a href=\"#老中医根治牛皮癣，解决缓存更新问题！\" class=\"headerlink\" title=\"老中医根治牛皮癣，解决缓存更新问题！\"></a>老中医根治牛皮癣，解决缓存更新问题！</h3><p>缓存问题可谓是牛皮癣，虽不致命但是无法让人视而不见，曾经由于一台机器上缓存没有同步，还引发了一场毁灭性的风波，后来在我们在需要更新缓存的文件后面，增加了一些特殊的字符串，客户端会通过这些字符串的变化放弃缓存，从而彻底解决了缓存问题</p>"},{"title":"Javascript 浮点数精度问题","date":"2017-05-06T01:53:48.000Z","_content":"## 为什么0.1+0.2=0.30000000000000004？\n因为在计算机内部使用二进制储存浮点数（[IEEE 754](https://zh.wikipedia.org/zh-hans/IEEE_754)），其不能准确地表示0.1，0.2或0.3\n当编码解释代码时，你的“0.1\"已经舍入为该格式的最接近的数字，即使在计算发生之前也会导致小的舍入误差。\n\n```\n十进制0.1 = 0.00011001100110011...(循环0011)\n十进制0.2 = 0.0011001100110011...(循环0011)\n\n两者相加：\n0.00011001100110011001100110011001100110011001100110011001 +  0.00110011001100110011001100110011001100110011001100110011 = 0.01001100110011001100110011001100110011001100110011001100\n转换成10进制之后得到：0.30000000000000004！\n```\n\n## 为什么电脑使用这样一个愚蠢的系统？\n这不是愚蠢的，只是不一样。十进制数字不能准确地表示像1/3的数字，所以你只能得到像0.33这样的一个数字，你不会指望0.33 + 0.33 + 0.33加起来等于1是吧？\n\n计算机使用二进制数，因为它们在处理这些数据时速度更方便。（[二进制有什么好处，为何电脑都采用二进制？](https://www.zhihu.com/question/20830886)）\n\n## 如何处理金额运算等对精度要求高的场景？\n在别的一些语言中，比如 c#，Java，提供了单精度和双精度的数据类型，来应对不同的精度要求\n\nJavascript 是一门弱类型语言，所有的数字都是 Number 类型，而且 Number 和 String 之间可以隐式转换，当我们需要强制转换成浮点数的话，可以使用`parseFloat()`函数。\n```javascript\nvar num = parseFloat(\"3.5\");\n```\n\n### [bignumber.js](https://github.com/MikeMcl/bignumber.js/)\n一个专门处理十进制小数运算的库\n```javascript\n0.3 - 0.1                           // 0.19999999999999998\nx = new BigNumber(0.3)\nx.minus(0.1)                        // \"0.2\"\nx                                   // \"0.3\"\n```\n","source":"_posts/Javascript 浮点数精度问题.md","raw":"---\ntitle: Javascript 浮点数精度问题\ndate: 2017-05-06 09:53:48\ncategories: 技术\n---\n## 为什么0.1+0.2=0.30000000000000004？\n因为在计算机内部使用二进制储存浮点数（[IEEE 754](https://zh.wikipedia.org/zh-hans/IEEE_754)），其不能准确地表示0.1，0.2或0.3\n当编码解释代码时，你的“0.1\"已经舍入为该格式的最接近的数字，即使在计算发生之前也会导致小的舍入误差。\n\n```\n十进制0.1 = 0.00011001100110011...(循环0011)\n十进制0.2 = 0.0011001100110011...(循环0011)\n\n两者相加：\n0.00011001100110011001100110011001100110011001100110011001 +  0.00110011001100110011001100110011001100110011001100110011 = 0.01001100110011001100110011001100110011001100110011001100\n转换成10进制之后得到：0.30000000000000004！\n```\n\n## 为什么电脑使用这样一个愚蠢的系统？\n这不是愚蠢的，只是不一样。十进制数字不能准确地表示像1/3的数字，所以你只能得到像0.33这样的一个数字，你不会指望0.33 + 0.33 + 0.33加起来等于1是吧？\n\n计算机使用二进制数，因为它们在处理这些数据时速度更方便。（[二进制有什么好处，为何电脑都采用二进制？](https://www.zhihu.com/question/20830886)）\n\n## 如何处理金额运算等对精度要求高的场景？\n在别的一些语言中，比如 c#，Java，提供了单精度和双精度的数据类型，来应对不同的精度要求\n\nJavascript 是一门弱类型语言，所有的数字都是 Number 类型，而且 Number 和 String 之间可以隐式转换，当我们需要强制转换成浮点数的话，可以使用`parseFloat()`函数。\n```javascript\nvar num = parseFloat(\"3.5\");\n```\n\n### [bignumber.js](https://github.com/MikeMcl/bignumber.js/)\n一个专门处理十进制小数运算的库\n```javascript\n0.3 - 0.1                           // 0.19999999999999998\nx = new BigNumber(0.3)\nx.minus(0.1)                        // \"0.2\"\nx                                   // \"0.3\"\n```\n","slug":"Javascript 浮点数精度问题","published":1,"updated":"2017-05-08T13:44:55.247Z","_id":"cj2g6fus60001l8vds3jbr2dt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么0-1-0-2-0-30000000000000004？\"><a href=\"#为什么0-1-0-2-0-30000000000000004？\" class=\"headerlink\" title=\"为什么0.1+0.2=0.30000000000000004？\"></a>为什么0.1+0.2=0.30000000000000004？</h2><p>因为在计算机内部使用二进制储存浮点数（<a href=\"https://zh.wikipedia.org/zh-hans/IEEE_754\" target=\"_blank\" rel=\"external\">IEEE 754</a>），其不能准确地表示0.1，0.2或0.3<br>当编码解释代码时，你的“0.1”已经舍入为该格式的最接近的数字，即使在计算发生之前也会导致小的舍入误差。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">十进制0.1 = 0.00011001100110011...(循环0011)</div><div class=\"line\">十进制0.2 = 0.0011001100110011...(循环0011)</div><div class=\"line\"></div><div class=\"line\">两者相加：</div><div class=\"line\">0.00011001100110011001100110011001100110011001100110011001 +  0.00110011001100110011001100110011001100110011001100110011 = 0.01001100110011001100110011001100110011001100110011001100</div><div class=\"line\">转换成10进制之后得到：0.30000000000000004！</div></pre></td></tr></table></figure><h2 id=\"为什么电脑使用这样一个愚蠢的系统？\"><a href=\"#为什么电脑使用这样一个愚蠢的系统？\" class=\"headerlink\" title=\"为什么电脑使用这样一个愚蠢的系统？\"></a>为什么电脑使用这样一个愚蠢的系统？</h2><p>这不是愚蠢的，只是不一样。十进制数字不能准确地表示像1/3的数字，所以你只能得到像0.33这样的一个数字，你不会指望0.33 + 0.33 + 0.33加起来等于1是吧？</p><p>计算机使用二进制数，因为它们在处理这些数据时速度更方便。（<a href=\"https://www.zhihu.com/question/20830886\" target=\"_blank\" rel=\"external\">二进制有什么好处，为何电脑都采用二进制？</a>）</p><h2 id=\"如何处理金额运算等对精度要求高的场景？\"><a href=\"#如何处理金额运算等对精度要求高的场景？\" class=\"headerlink\" title=\"如何处理金额运算等对精度要求高的场景？\"></a>如何处理金额运算等对精度要求高的场景？</h2><p>在别的一些语言中，比如 c#，Java，提供了单精度和双精度的数据类型，来应对不同的精度要求</p><p>Javascript 是一门弱类型语言，所有的数字都是 Number 类型，而且 Number 和 String 之间可以隐式转换，当我们需要强制转换成浮点数的话，可以使用<code>parseFloat()</code>函数。<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseFloat</span>(<span class=\"string\">\"3.5\"</span>);</div></pre></td></tr></table></figure><p></p><h3 id=\"bignumber-js\"><a href=\"#bignumber-js\" class=\"headerlink\" title=\"bignumber.js\"></a><a href=\"https://github.com/MikeMcl/bignumber.js/\" target=\"_blank\" rel=\"external\">bignumber.js</a></h3><p>一个专门处理十进制小数运算的库<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0.3</span> - <span class=\"number\">0.1</span>                           <span class=\"comment\">// 0.19999999999999998</span></div><div class=\"line\">x = <span class=\"keyword\">new</span> BigNumber(<span class=\"number\">0.3</span>)</div><div class=\"line\">x.minus(<span class=\"number\">0.1</span>)                        <span class=\"comment\">// \"0.2\"</span></div><div class=\"line\">x                                   <span class=\"comment\">// \"0.3\"</span></div></pre></td></tr></table></figure><p></p>","excerpt":"","more":"<h2 id=\"为什么0-1-0-2-0-30000000000000004？\"><a href=\"#为什么0-1-0-2-0-30000000000000004？\" class=\"headerlink\" title=\"为什么0.1+0.2=0.30000000000000004？\"></a>为什么0.1+0.2=0.30000000000000004？</h2><p>因为在计算机内部使用二进制储存浮点数（<a href=\"https://zh.wikipedia.org/zh-hans/IEEE_754\">IEEE 754</a>），其不能准确地表示0.1，0.2或0.3<br>当编码解释代码时，你的“0.1”已经舍入为该格式的最接近的数字，即使在计算发生之前也会导致小的舍入误差。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">十进制0.1 = 0.00011001100110011...(循环0011)</div><div class=\"line\">十进制0.2 = 0.0011001100110011...(循环0011)</div><div class=\"line\"></div><div class=\"line\">两者相加：</div><div class=\"line\">0.00011001100110011001100110011001100110011001100110011001 +  0.00110011001100110011001100110011001100110011001100110011 = 0.01001100110011001100110011001100110011001100110011001100</div><div class=\"line\">转换成10进制之后得到：0.30000000000000004！</div></pre></td></tr></table></figure><h2 id=\"为什么电脑使用这样一个愚蠢的系统？\"><a href=\"#为什么电脑使用这样一个愚蠢的系统？\" class=\"headerlink\" title=\"为什么电脑使用这样一个愚蠢的系统？\"></a>为什么电脑使用这样一个愚蠢的系统？</h2><p>这不是愚蠢的，只是不一样。十进制数字不能准确地表示像1/3的数字，所以你只能得到像0.33这样的一个数字，你不会指望0.33 + 0.33 + 0.33加起来等于1是吧？</p><p>计算机使用二进制数，因为它们在处理这些数据时速度更方便。（<a href=\"https://www.zhihu.com/question/20830886\">二进制有什么好处，为何电脑都采用二进制？</a>）</p><h2 id=\"如何处理金额运算等对精度要求高的场景？\"><a href=\"#如何处理金额运算等对精度要求高的场景？\" class=\"headerlink\" title=\"如何处理金额运算等对精度要求高的场景？\"></a>如何处理金额运算等对精度要求高的场景？</h2><p>在别的一些语言中，比如 c#，Java，提供了单精度和双精度的数据类型，来应对不同的精度要求</p><p>Javascript 是一门弱类型语言，所有的数字都是 Number 类型，而且 Number 和 String 之间可以隐式转换，当我们需要强制转换成浮点数的话，可以使用<code>parseFloat()</code>函数。<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseFloat</span>(<span class=\"string\">\"3.5\"</span>);</div></pre></td></tr></table></figure><p></p><h3 id=\"bignumber-js\"><a href=\"#bignumber-js\" class=\"headerlink\" title=\"bignumber.js\"></a><a href=\"https://github.com/MikeMcl/bignumber.js/\">bignumber.js</a></h3><p>一个专门处理十进制小数运算的库<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0.3</span> - <span class=\"number\">0.1</span>                           <span class=\"comment\">// 0.19999999999999998</span></div><div class=\"line\">x = <span class=\"keyword\">new</span> BigNumber(<span class=\"number\">0.3</span>)</div><div class=\"line\">x.minus(<span class=\"number\">0.1</span>)                        <span class=\"comment\">// \"0.2\"</span></div><div class=\"line\">x                                   <span class=\"comment\">// \"0.3\"</span></div></pre></td></tr></table></figure><p></p>"},{"title":"Webpack 基本概念","date":"2016-12-27T04:40:10.000Z","_content":"Webpack 的核心概念可以分为：Entry point，Chunk，Module，这三者之间的关系可以用一张官方图片来解释：\n\n![generated update chunks](https://webpack.github.io/assets/HMR.svg)\n\n## [Entry point](http://webpack.github.io/docs/configuration.html#entry)\nEntry point 是比较好理解的，指的是程序的入口文件，也是 Webpack 解析依赖的入口文件，Entry point 可以设置单入口或者多入口，以一个最简单的入口文件为例\n\n``` js\n// index.js\nvar a = require('./a');\n\na();\n```\n\n## Chunk\nChunk 指的是经过编译后的代码包，Webpack 会将每个由用户定义的模块，转换成 Chunk 的形式，这些 Chunk 最终汇总到一个数组中，供运行时调用\n\n``` js\n// 原始的 a.js\nmodule.export = function() {\n    alert('Hello');\n};\n\n// 经过编译后的 chunk\nfunction(module, exports, __webpack_require__) {\n    'use strict';\n\n    module.exports = function () {\n        alert('Hello');\n    };\n}\n```\n\n这里 Chunk 转换的过程中还会调用 Loaders，Loaders 的作用是将非 JS 资源转换成字符串，并且提供运行时解析这些字符串的功能\n\n最终 Webpack 为模块代码外面包了一层 function，并且注入了 `module`、`exports` 和 `__webpack_require__` 3个参数，这些参数的定义看下文代码示例中的 `require` 方法\n\n\n## Module\nModule 是拥有如下结构的一个 `Object`，它的作用是保存 Chunk 的信息\n\n``` js\n{\n    exports: {},\n    id: 3,\n    loaded: false\n}\n```\n一个 Module 对应一个 Chunk，`exports` 保存了 Chunk 中输出的内容，`id` 为 Chunk 的索引，`loaded` 记录 Chunk 是否加载\n\n## 它们是如何工作的？\nWebpack Runtime 的一个简单实现\n\n``` js\nconst chunks = [\n    function(module, exports, __webpack_require__) {\n        'use strict';\n\n        module.exports = function () {\n            alert('Hello');\n        };\n    },\n    ...\n];\n\nfunction require(id) {\n    // 定义 module 对象\n    var module = {\n        exports: {},\n        id: moduleId,\n        loaded: false\n    };\n\n    // 执行 chunk\n    chunks[id].call(module.exports, module, module.exports, require);\n\n    module.loaded = true;\n\n    // 返回 module 的输出部分\n\treturn module.exports;\n}\n\n// entry point\nvar a = require(0); // 这里的 require('./a') 会被替换为 chunk 的索引\n\na();\n//\n```\n","source":"_posts/Webpack-基本概念.md","raw":"---\ntitle: Webpack 基本概念\ndate: 2016-12-27 12:40:10\ncategories: 技术\ntags: Webpack\n---\nWebpack 的核心概念可以分为：Entry point，Chunk，Module，这三者之间的关系可以用一张官方图片来解释：\n\n![generated update chunks](https://webpack.github.io/assets/HMR.svg)\n\n## [Entry point](http://webpack.github.io/docs/configuration.html#entry)\nEntry point 是比较好理解的，指的是程序的入口文件，也是 Webpack 解析依赖的入口文件，Entry point 可以设置单入口或者多入口，以一个最简单的入口文件为例\n\n``` js\n// index.js\nvar a = require('./a');\n\na();\n```\n\n## Chunk\nChunk 指的是经过编译后的代码包，Webpack 会将每个由用户定义的模块，转换成 Chunk 的形式，这些 Chunk 最终汇总到一个数组中，供运行时调用\n\n``` js\n// 原始的 a.js\nmodule.export = function() {\n    alert('Hello');\n};\n\n// 经过编译后的 chunk\nfunction(module, exports, __webpack_require__) {\n    'use strict';\n\n    module.exports = function () {\n        alert('Hello');\n    };\n}\n```\n\n这里 Chunk 转换的过程中还会调用 Loaders，Loaders 的作用是将非 JS 资源转换成字符串，并且提供运行时解析这些字符串的功能\n\n最终 Webpack 为模块代码外面包了一层 function，并且注入了 `module`、`exports` 和 `__webpack_require__` 3个参数，这些参数的定义看下文代码示例中的 `require` 方法\n\n\n## Module\nModule 是拥有如下结构的一个 `Object`，它的作用是保存 Chunk 的信息\n\n``` js\n{\n    exports: {},\n    id: 3,\n    loaded: false\n}\n```\n一个 Module 对应一个 Chunk，`exports` 保存了 Chunk 中输出的内容，`id` 为 Chunk 的索引，`loaded` 记录 Chunk 是否加载\n\n## 它们是如何工作的？\nWebpack Runtime 的一个简单实现\n\n``` js\nconst chunks = [\n    function(module, exports, __webpack_require__) {\n        'use strict';\n\n        module.exports = function () {\n            alert('Hello');\n        };\n    },\n    ...\n];\n\nfunction require(id) {\n    // 定义 module 对象\n    var module = {\n        exports: {},\n        id: moduleId,\n        loaded: false\n    };\n\n    // 执行 chunk\n    chunks[id].call(module.exports, module, module.exports, require);\n\n    module.loaded = true;\n\n    // 返回 module 的输出部分\n\treturn module.exports;\n}\n\n// entry point\nvar a = require(0); // 这里的 require('./a') 会被替换为 chunk 的索引\n\na();\n//\n```\n","slug":"Webpack-基本概念","published":1,"updated":"2017-05-08T13:41:28.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2g6fusa0003l8vdoud2cpeu","content":"<p>Webpack 的核心概念可以分为：Entry point，Chunk，Module，这三者之间的关系可以用一张官方图片来解释：</p><p><img src=\"https://webpack.github.io/assets/HMR.svg\" alt=\"generated update chunks\"></p><h2 id=\"Entry-point\"><a href=\"#Entry-point\" class=\"headerlink\" title=\"Entry point\"></a><a href=\"http://webpack.github.io/docs/configuration.html#entry\" target=\"_blank\" rel=\"external\">Entry point</a></h2><p>Entry point 是比较好理解的，指的是程序的入口文件，也是 Webpack 解析依赖的入口文件，Entry point 可以设置单入口或者多入口，以一个最简单的入口文件为例</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</div><div class=\"line\"></div><div class=\"line\">a();</div></pre></td></tr></table></figure><h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><p>Chunk 指的是经过编译后的代码包，Webpack 会将每个由用户定义的模块，转换成 Chunk 的形式，这些 Chunk 最终汇总到一个数组中，供运行时调用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原始的 a.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.export = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 经过编译后的 chunk</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>这里 Chunk 转换的过程中还会调用 Loaders，Loaders 的作用是将非 JS 资源转换成字符串，并且提供运行时解析这些字符串的功能</p><p>最终 Webpack 为模块代码外面包了一层 function，并且注入了 <code>module</code>、<code>exports</code> 和 <code>__webpack_require__</code> 3个参数，这些参数的定义看下文代码示例中的 <code>require</code> 方法</p><h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><p>Module 是拥有如下结构的一个 <code>Object</code>，它的作用是保存 Chunk 的信息</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>一个 Module 对应一个 Chunk，<code>exports</code> 保存了 Chunk 中输出的内容，<code>id</code> 为 Chunk 的索引，<code>loaded</code> 记录 Chunk 是否加载</p><h2 id=\"它们是如何工作的？\"><a href=\"#它们是如何工作的？\" class=\"headerlink\" title=\"它们是如何工作的？\"></a>它们是如何工作的？</h2><p>Webpack Runtime 的一个简单实现</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> chunks = [</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">        'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ...</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义 module 对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;</div><div class=\"line\">        <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">        <span class=\"attr\">id</span>: moduleId,</div><div class=\"line\">        <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 执行 chunk</span></div><div class=\"line\">    chunks[id].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, <span class=\"built_in\">require</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">module</span>.loaded = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 返回 module 的输出部分</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// entry point</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 这里的 require('./a') 会被替换为 chunk 的索引</span></div><div class=\"line\"></div><div class=\"line\">a();</div><div class=\"line\"><span class=\"comment\">//</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>Webpack 的核心概念可以分为：Entry point，Chunk，Module，这三者之间的关系可以用一张官方图片来解释：</p><p><img src=\"https://webpack.github.io/assets/HMR.svg\" alt=\"generated update chunks\"></p><h2 id=\"Entry-point\"><a href=\"#Entry-point\" class=\"headerlink\" title=\"Entry point\"></a><a href=\"http://webpack.github.io/docs/configuration.html#entry\">Entry point</a></h2><p>Entry point 是比较好理解的，指的是程序的入口文件，也是 Webpack 解析依赖的入口文件，Entry point 可以设置单入口或者多入口，以一个最简单的入口文件为例</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</div><div class=\"line\"></div><div class=\"line\">a();</div></pre></td></tr></table></figure><h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><p>Chunk 指的是经过编译后的代码包，Webpack 会将每个由用户定义的模块，转换成 Chunk 的形式，这些 Chunk 最终汇总到一个数组中，供运行时调用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原始的 a.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.export = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 经过编译后的 chunk</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>这里 Chunk 转换的过程中还会调用 Loaders，Loaders 的作用是将非 JS 资源转换成字符串，并且提供运行时解析这些字符串的功能</p><p>最终 Webpack 为模块代码外面包了一层 function，并且注入了 <code>module</code>、<code>exports</code> 和 <code>__webpack_require__</code> 3个参数，这些参数的定义看下文代码示例中的 <code>require</code> 方法</p><h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><p>Module 是拥有如下结构的一个 <code>Object</code>，它的作用是保存 Chunk 的信息</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>一个 Module 对应一个 Chunk，<code>exports</code> 保存了 Chunk 中输出的内容，<code>id</code> 为 Chunk 的索引，<code>loaded</code> 记录 Chunk 是否加载</p><h2 id=\"它们是如何工作的？\"><a href=\"#它们是如何工作的？\" class=\"headerlink\" title=\"它们是如何工作的？\"></a>它们是如何工作的？</h2><p>Webpack Runtime 的一个简单实现</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> chunks = [</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">        'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ...</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义 module 对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;</div><div class=\"line\">        <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">        <span class=\"attr\">id</span>: moduleId,</div><div class=\"line\">        <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 执行 chunk</span></div><div class=\"line\">    chunks[id].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, <span class=\"built_in\">require</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">module</span>.loaded = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 返回 module 的输出部分</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// entry point</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 这里的 require('./a') 会被替换为 chunk 的索引</span></div><div class=\"line\"></div><div class=\"line\">a();</div><div class=\"line\"><span class=\"comment\">//</span></div></pre></td></tr></table></figure>"},{"title":"Webpack 动态加载","date":"2016-12-19T07:28:17.000Z","_content":"在 Webpack 的使用过程中，一开始人们都习惯了将一切东西 `import` 进来，这样做很符合逻辑，但是随着业务量不断增加，会发现 bundle 的体积不断增大，导致首次加载非常缓慢，比如我有一个路由映射的对象是这样写的\n``` javascript\n...\n'/shop': require('components/Shop/Home'),\n'/shop/goods': require('components/Shop/Goods'),\n'/shop/goods-detail': require('components/Shop/Detail'),\n...\n```\n\n最终这些模块都会被打包进 bundle，而我想要的效果是每次只加载当前路由对应的模块，这一点 Webpack 已经为我们提供了解决方案\n## [Code Splitting](http://webpack.github.io/docs/code-splitting.html)\nCode Splitting 的做法是在代码中定义分离点，在这个分离点内依赖的模块，在编译阶段会被单独打包，并在运行时动态加载进来\n\nCode Splitting 支持 AMD 和 CommonJs 两种风格\n#### CommonJs:\n``` js\n// 参数一 module-a, module-b 作为依赖会首先加载\n// 参数二是 callback 函数，参数 require 可以加载模块\n// 参数三是为这个分离点模块命名\n// 最终 module-a module-b module-c 会被打包成一个文件\nrequire.ensure([\"module-a\", \"module-b\"], function(require) {\n    var a = require(\"module-a\");\n    var c = require(\"module-c\");\n    // ...\n}, 'bundle');\n```\n注意：require.ensure 的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。\n\n#### AMD:\n``` js\n// 参数一同样会首先被加载，并作为参数传入 callback\nrequire([\"module-a\", \"module-b\"], function(a, b) {\n    var c = require(\"module-c\");\n    // ...\n});\n```\n注意 callback 是必须的\n\n当代码运行时 Webpack 会在文档中动态插入\n``` js\n<script type=\"text/javascript\" charset=\"utf-8\" async=\"\" src=\"1.bundle.js\"></script>\n```\n\nWebpack 只会当代码运行时才去加载，假如说我定义了多个分离点\n``` js\nrequire.ensure([], function(require) {\n    var a = require(\"module-a\");\n});\n\nif (false) {\n    require.ensure([], function(require) {\n        var a = require(\"module-b\");\n    });\n}\n```\nmodule-b 是不会被加载，利用这个功能，我们将那个路由映射修改一下\n```js\n...\n'/shop': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Home\"));\n}),\n'/shop/goods': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Goods\"));\n}),\n'/shop/goods-detail': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Detail\"));\n}),\n...\n```\n在路由解析的代码也需要修改一下\n``` js\n// 原来的同步获取模块写法\nvar module = router.match(location.href);\nrender(module);\n\n// 现使用异步方法获得\nrouter.match(location.href, function(module) {\n    render(module);\n});\n```\n由于 require.ensure 写法过于冗长，我曾想把这段封装起来，但是发现是不可行的，require.ensure 方法十分特殊，必须以字符串作为参数\n``` js\n// 以下方式无效！\nfunction getModule(path, callback) {\n    require.ensure([], function(require) {\n        callback(require(path));\n    });\n}\n\n...\n'/shop': callback => getModule(\"components/Shop/Home\", callback),\n...\n```\n\n## 请求路经配置\n根据 Code Splitting 的原理，模块请求的默认 hostname 是和当前页面相同的，比如访问 `http://www.x.com/` 那么模块的请求就是 `http://www.x.com/1.bundle.js`\n\n如果要设置在别的域获取，可以在 `output.publicPath` 中设置\n``` js\n...\noutput: {\n    publicPath: 'http://cdn.x.com/'\n}\n...\n```\n那么请求就变成了 `http://cdn.x.com/1.bundle.js`\n\n这是一种在编译阶段配置的方法，如果路经需要到运行时才能确定，可以在入口文件中设置\n``` js\n__webpack_public_path__ = `http://${config.host}:/`\n```\n详细用法参考 [https://webpack.github.io/docs/configuration.html#output-path](https://webpack.github.io/docs/configuration.html#output-path)\n","source":"_posts/Webpack-动态加载.md","raw":"---\ntitle: Webpack 动态加载\ndate: 2016-12-19 15:28:17\ncategories: 技术\ntags: Webpack\n---\n在 Webpack 的使用过程中，一开始人们都习惯了将一切东西 `import` 进来，这样做很符合逻辑，但是随着业务量不断增加，会发现 bundle 的体积不断增大，导致首次加载非常缓慢，比如我有一个路由映射的对象是这样写的\n``` javascript\n...\n'/shop': require('components/Shop/Home'),\n'/shop/goods': require('components/Shop/Goods'),\n'/shop/goods-detail': require('components/Shop/Detail'),\n...\n```\n\n最终这些模块都会被打包进 bundle，而我想要的效果是每次只加载当前路由对应的模块，这一点 Webpack 已经为我们提供了解决方案\n## [Code Splitting](http://webpack.github.io/docs/code-splitting.html)\nCode Splitting 的做法是在代码中定义分离点，在这个分离点内依赖的模块，在编译阶段会被单独打包，并在运行时动态加载进来\n\nCode Splitting 支持 AMD 和 CommonJs 两种风格\n#### CommonJs:\n``` js\n// 参数一 module-a, module-b 作为依赖会首先加载\n// 参数二是 callback 函数，参数 require 可以加载模块\n// 参数三是为这个分离点模块命名\n// 最终 module-a module-b module-c 会被打包成一个文件\nrequire.ensure([\"module-a\", \"module-b\"], function(require) {\n    var a = require(\"module-a\");\n    var c = require(\"module-c\");\n    // ...\n}, 'bundle');\n```\n注意：require.ensure 的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。\n\n#### AMD:\n``` js\n// 参数一同样会首先被加载，并作为参数传入 callback\nrequire([\"module-a\", \"module-b\"], function(a, b) {\n    var c = require(\"module-c\");\n    // ...\n});\n```\n注意 callback 是必须的\n\n当代码运行时 Webpack 会在文档中动态插入\n``` js\n<script type=\"text/javascript\" charset=\"utf-8\" async=\"\" src=\"1.bundle.js\"></script>\n```\n\nWebpack 只会当代码运行时才去加载，假如说我定义了多个分离点\n``` js\nrequire.ensure([], function(require) {\n    var a = require(\"module-a\");\n});\n\nif (false) {\n    require.ensure([], function(require) {\n        var a = require(\"module-b\");\n    });\n}\n```\nmodule-b 是不会被加载，利用这个功能，我们将那个路由映射修改一下\n```js\n...\n'/shop': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Home\"));\n}),\n'/shop/goods': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Goods\"));\n}),\n'/shop/goods-detail': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Detail\"));\n}),\n...\n```\n在路由解析的代码也需要修改一下\n``` js\n// 原来的同步获取模块写法\nvar module = router.match(location.href);\nrender(module);\n\n// 现使用异步方法获得\nrouter.match(location.href, function(module) {\n    render(module);\n});\n```\n由于 require.ensure 写法过于冗长，我曾想把这段封装起来，但是发现是不可行的，require.ensure 方法十分特殊，必须以字符串作为参数\n``` js\n// 以下方式无效！\nfunction getModule(path, callback) {\n    require.ensure([], function(require) {\n        callback(require(path));\n    });\n}\n\n...\n'/shop': callback => getModule(\"components/Shop/Home\", callback),\n...\n```\n\n## 请求路经配置\n根据 Code Splitting 的原理，模块请求的默认 hostname 是和当前页面相同的，比如访问 `http://www.x.com/` 那么模块的请求就是 `http://www.x.com/1.bundle.js`\n\n如果要设置在别的域获取，可以在 `output.publicPath` 中设置\n``` js\n...\noutput: {\n    publicPath: 'http://cdn.x.com/'\n}\n...\n```\n那么请求就变成了 `http://cdn.x.com/1.bundle.js`\n\n这是一种在编译阶段配置的方法，如果路经需要到运行时才能确定，可以在入口文件中设置\n``` js\n__webpack_public_path__ = `http://${config.host}:/`\n```\n详细用法参考 [https://webpack.github.io/docs/configuration.html#output-path](https://webpack.github.io/docs/configuration.html#output-path)\n","slug":"Webpack-动态加载","published":1,"updated":"2017-05-08T13:41:28.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2g6fusb0005l8vdhfpvv4kf","content":"<p>在 Webpack 的使用过程中，一开始人们都习惯了将一切东西 <code>import</code> 进来，这样做很符合逻辑，但是随着业务量不断增加，会发现 bundle 的体积不断增大，导致首次加载非常缓慢，比如我有一个路由映射的对象是这样写的<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Home'</span>),</div><div class=\"line\"><span class=\"string\">'/shop/goods'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Goods'</span>),</div><div class=\"line\"><span class=\"string\">'/shop/goods-detail'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Detail'</span>),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>最终这些模块都会被打包进 bundle，而我想要的效果是每次只加载当前路由对应的模块，这一点 Webpack 已经为我们提供了解决方案</p><h2 id=\"Code-Splitting\"><a href=\"#Code-Splitting\" class=\"headerlink\" title=\"Code Splitting\"></a><a href=\"http://webpack.github.io/docs/code-splitting.html\" target=\"_blank\" rel=\"external\">Code Splitting</a></h2><p>Code Splitting 的做法是在代码中定义分离点，在这个分离点内依赖的模块，在编译阶段会被单独打包，并在运行时动态加载进来</p><p>Code Splitting 支持 AMD 和 CommonJs 两种风格</p><h4 id=\"CommonJs\"><a href=\"#CommonJs\" class=\"headerlink\" title=\"CommonJs:\"></a>CommonJs:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数一 module-a, module-b 作为依赖会首先加载</span></div><div class=\"line\"><span class=\"comment\">// 参数二是 callback 函数，参数 require 可以加载模块</span></div><div class=\"line\"><span class=\"comment\">// 参数三是为这个分离点模块命名</span></div><div class=\"line\"><span class=\"comment\">// 最终 module-a module-b module-c 会被打包成一个文件</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-c\"</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;, <span class=\"string\">'bundle'</span>);</div></pre></td></tr></table></figure><p>注意：require.ensure 的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。</p><h4 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD:\"></a>AMD:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数一同样会首先被加载，并作为参数传入 callback</span></div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-c\"</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>注意 callback 是必须的</p><p>当代码运行时 Webpack 会在文档中动态插入<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> charset=<span class=\"string\">\"utf-8\"</span> <span class=\"keyword\">async</span>=<span class=\"string\">\"\"</span> src=<span class=\"string\">\"1.bundle.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p></p><p>Webpack 只会当代码运行时才去加载，假如说我定义了多个分离点<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-b\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>module-b 是不会被加载，利用这个功能，我们将那个路由映射修改一下<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Home\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\"><span class=\"string\">'/shop/goods'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Goods\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\"><span class=\"string\">'/shop/goods-detail'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Detail\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>在路由解析的代码也需要修改一下<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原来的同步获取模块写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = router.match(location.href);</div><div class=\"line\">render(<span class=\"built_in\">module</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 现使用异步方法获得</span></div><div class=\"line\">router.match(location.href, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module</span>) </span>&#123;</div><div class=\"line\">    render(<span class=\"built_in\">module</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p></p><p>由于 require.ensure 写法过于冗长，我曾想把这段封装起来，但是发现是不可行的，require.ensure 方法十分特殊，必须以字符串作为参数<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下方式无效！</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getModule</span>(<span class=\"params\">path, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        callback(<span class=\"built_in\">require</span>(path));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> getModule(<span class=\"string\">\"components/Shop/Home\"</span>, callback),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><h2 id=\"请求路经配置\"><a href=\"#请求路经配置\" class=\"headerlink\" title=\"请求路经配置\"></a>请求路经配置</h2><p>根据 Code Splitting 的原理，模块请求的默认 hostname 是和当前页面相同的，比如访问 <code>http://www.x.com/</code> 那么模块的请求就是 <code>http://www.x.com/1.bundle.js</code></p><p>如果要设置在别的域获取，可以在 <code>output.publicPath</code> 中设置<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">output: &#123;</div><div class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">'http://cdn.x.com/'</span></div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>那么请求就变成了 <code>http://cdn.x.com/1.bundle.js</code></p><p>这是一种在编译阶段配置的方法，如果路经需要到运行时才能确定，可以在入口文件中设置<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__webpack_public_path__ = <span class=\"string\">`http://<span class=\"subst\">$&#123;config.host&#125;</span>:/`</span></div></pre></td></tr></table></figure><p></p><p>详细用法参考 <a href=\"https://webpack.github.io/docs/configuration.html#output-path\" target=\"_blank\" rel=\"external\">https://webpack.github.io/docs/configuration.html#output-path</a></p>","excerpt":"","more":"<p>在 Webpack 的使用过程中，一开始人们都习惯了将一切东西 <code>import</code> 进来，这样做很符合逻辑，但是随着业务量不断增加，会发现 bundle 的体积不断增大，导致首次加载非常缓慢，比如我有一个路由映射的对象是这样写的<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Home'</span>),</div><div class=\"line\"><span class=\"string\">'/shop/goods'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Goods'</span>),</div><div class=\"line\"><span class=\"string\">'/shop/goods-detail'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Detail'</span>),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>最终这些模块都会被打包进 bundle，而我想要的效果是每次只加载当前路由对应的模块，这一点 Webpack 已经为我们提供了解决方案</p><h2 id=\"Code-Splitting\"><a href=\"#Code-Splitting\" class=\"headerlink\" title=\"Code Splitting\"></a><a href=\"http://webpack.github.io/docs/code-splitting.html\">Code Splitting</a></h2><p>Code Splitting 的做法是在代码中定义分离点，在这个分离点内依赖的模块，在编译阶段会被单独打包，并在运行时动态加载进来</p><p>Code Splitting 支持 AMD 和 CommonJs 两种风格</p><h4 id=\"CommonJs\"><a href=\"#CommonJs\" class=\"headerlink\" title=\"CommonJs:\"></a>CommonJs:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数一 module-a, module-b 作为依赖会首先加载</span></div><div class=\"line\"><span class=\"comment\">// 参数二是 callback 函数，参数 require 可以加载模块</span></div><div class=\"line\"><span class=\"comment\">// 参数三是为这个分离点模块命名</span></div><div class=\"line\"><span class=\"comment\">// 最终 module-a module-b module-c 会被打包成一个文件</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-c\"</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;, <span class=\"string\">'bundle'</span>);</div></pre></td></tr></table></figure><p>注意：require.ensure 的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。</p><h4 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD:\"></a>AMD:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数一同样会首先被加载，并作为参数传入 callback</span></div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-c\"</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>注意 callback 是必须的</p><p>当代码运行时 Webpack 会在文档中动态插入<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> charset=<span class=\"string\">\"utf-8\"</span> <span class=\"keyword\">async</span>=<span class=\"string\">\"\"</span> src=<span class=\"string\">\"1.bundle.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p></p><p>Webpack 只会当代码运行时才去加载，假如说我定义了多个分离点<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-b\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>module-b 是不会被加载，利用这个功能，我们将那个路由映射修改一下<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Home\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\"><span class=\"string\">'/shop/goods'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Goods\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\"><span class=\"string\">'/shop/goods-detail'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Detail\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>在路由解析的代码也需要修改一下<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原来的同步获取模块写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = router.match(location.href);</div><div class=\"line\">render(<span class=\"built_in\">module</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 现使用异步方法获得</span></div><div class=\"line\">router.match(location.href, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module</span>) </span>&#123;</div><div class=\"line\">    render(<span class=\"built_in\">module</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p></p><p>由于 require.ensure 写法过于冗长，我曾想把这段封装起来，但是发现是不可行的，require.ensure 方法十分特殊，必须以字符串作为参数<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下方式无效！</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getModule</span>(<span class=\"params\">path, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        callback(<span class=\"built_in\">require</span>(path));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> getModule(<span class=\"string\">\"components/Shop/Home\"</span>, callback),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><h2 id=\"请求路经配置\"><a href=\"#请求路经配置\" class=\"headerlink\" title=\"请求路经配置\"></a>请求路经配置</h2><p>根据 Code Splitting 的原理，模块请求的默认 hostname 是和当前页面相同的，比如访问 <code>http://www.x.com/</code> 那么模块的请求就是 <code>http://www.x.com/1.bundle.js</code></p><p>如果要设置在别的域获取，可以在 <code>output.publicPath</code> 中设置<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">output: &#123;</div><div class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">'http://cdn.x.com/'</span></div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>那么请求就变成了 <code>http://cdn.x.com/1.bundle.js</code></p><p>这是一种在编译阶段配置的方法，如果路经需要到运行时才能确定，可以在入口文件中设置<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__webpack_public_path__ = <span class=\"string\">`http://<span class=\"subst\">$&#123;config.host&#125;</span>:/`</span></div></pre></td></tr></table></figure><p></p><p>详细用法参考 <a href=\"https://webpack.github.io/docs/configuration.html#output-path\">https://webpack.github.io/docs/configuration.html#output-path</a></p>"},{"title":"一个新的开始","date":"2016-12-15T15:03:43.000Z","_content":"来到了这个新的博客，想着得写一篇具有纪念意义的文章，想来想去也不知从何说起，我这个人的叙述能力一般，写东西提起笔半天也下不去，最初有开博客的想法也是为了锻炼一下文笔，然而其实并没有写多少东西，即使写也是类似于笔记之类的，没什么语言组织在里面。最近由于服务器到期，也不想掏这个钱了，干脆弄了个 Hexo + Github Pages。在导入之前博客的时候发现页面格式变得乱七八糟，有些图片也挂了，而且写的内容现在看看也觉得幼齿的很，干脆统统不要，一切都从头开始\n\n关于写博客这件事情呢，我认为对学习掌握新知识是特别有帮助的，最重要的2个作用是\n* 把所学到的知识转换成自己的文字，本身是一个对知识的整理、思考、内化的过程\n* 人脑容量有限，趁想法还热乎的时候记录下来，分门别类管理，便于日后查阅\n\n博客还有一个重要的作用是 **装逼**，虽说目前没几个人能看到这些文字，但是未来总有那么个人无意走进来，从而发现我默默耕耘着的小天地，发自内心的为我点👍，对我来说也就足够了\n\n当然写博客最重要的是坚持，纵观我的博客史，发现自己并不是那么勤奋，从3年前开始，多的时候也就一两个月写一篇，有的时候半年才写一篇，想想当初设定的每星期写一篇的目标相去甚远，人呐，骨子里都是懒汉，但是到了一定的岁数，会发现坚持的力量有多么强大，滴水穿石的道理不是嘴上说说就懂的，以前总觉得时间多的是，可是时间哪天不是24小时，何时多出来过，不去珍惜到头来荒废的是自己，这次重开 blog，我也不给自己定什么目标了，平时多加以思考和总结，努力克服内心的懒汉，未来可能还是光明的\n\n关于这个博客，使用的是 [Hexo](https://hexo.io)，之前完全没接触过静态 blog，经人推荐后发现特别简洁，不需要部署一堆东西，也没有后台界面，你需要做的就是纯粹的专注于写作，这种返璞归真的体验真的棒极了，而且 Hexo 是开源的，想要什么直接自己折腾，对于程序员特别友好。站点是托管在 Github Pages，全球 CDN 分布，服务器方面的一概不用操心。HTTPs 证书用的是 [Cloudflare](https://www.cloudflare.com/) 提供的免费服务，反正只要他们家还开着，我就可以一直用下去……\n\n2016 年最后剩下半个月，也快要到我的生日了，身上的种种无知、浮躁会不会随着年龄的增长而减少一点呢？未来的道路又将会指引我通向何处？幸福究竟对我来说是什么样的？只有一点我是可以确认的，眼前的这条道路是真实的，一步一个脚印走下去，最终这些疑问都会得到答案，所以，整理好思绪，收拾好心情，如同这个崭新的博客，迎接未来的人生吧。**虽千万里 吾往矣！**\n","source":"_posts/一个新的开始.md","raw":"---\ntitle: 一个新的开始\ndate: 2016-12-15 23:03:43\ncategories: 随笔\n---\n来到了这个新的博客，想着得写一篇具有纪念意义的文章，想来想去也不知从何说起，我这个人的叙述能力一般，写东西提起笔半天也下不去，最初有开博客的想法也是为了锻炼一下文笔，然而其实并没有写多少东西，即使写也是类似于笔记之类的，没什么语言组织在里面。最近由于服务器到期，也不想掏这个钱了，干脆弄了个 Hexo + Github Pages。在导入之前博客的时候发现页面格式变得乱七八糟，有些图片也挂了，而且写的内容现在看看也觉得幼齿的很，干脆统统不要，一切都从头开始\n\n关于写博客这件事情呢，我认为对学习掌握新知识是特别有帮助的，最重要的2个作用是\n* 把所学到的知识转换成自己的文字，本身是一个对知识的整理、思考、内化的过程\n* 人脑容量有限，趁想法还热乎的时候记录下来，分门别类管理，便于日后查阅\n\n博客还有一个重要的作用是 **装逼**，虽说目前没几个人能看到这些文字，但是未来总有那么个人无意走进来，从而发现我默默耕耘着的小天地，发自内心的为我点👍，对我来说也就足够了\n\n当然写博客最重要的是坚持，纵观我的博客史，发现自己并不是那么勤奋，从3年前开始，多的时候也就一两个月写一篇，有的时候半年才写一篇，想想当初设定的每星期写一篇的目标相去甚远，人呐，骨子里都是懒汉，但是到了一定的岁数，会发现坚持的力量有多么强大，滴水穿石的道理不是嘴上说说就懂的，以前总觉得时间多的是，可是时间哪天不是24小时，何时多出来过，不去珍惜到头来荒废的是自己，这次重开 blog，我也不给自己定什么目标了，平时多加以思考和总结，努力克服内心的懒汉，未来可能还是光明的\n\n关于这个博客，使用的是 [Hexo](https://hexo.io)，之前完全没接触过静态 blog，经人推荐后发现特别简洁，不需要部署一堆东西，也没有后台界面，你需要做的就是纯粹的专注于写作，这种返璞归真的体验真的棒极了，而且 Hexo 是开源的，想要什么直接自己折腾，对于程序员特别友好。站点是托管在 Github Pages，全球 CDN 分布，服务器方面的一概不用操心。HTTPs 证书用的是 [Cloudflare](https://www.cloudflare.com/) 提供的免费服务，反正只要他们家还开着，我就可以一直用下去……\n\n2016 年最后剩下半个月，也快要到我的生日了，身上的种种无知、浮躁会不会随着年龄的增长而减少一点呢？未来的道路又将会指引我通向何处？幸福究竟对我来说是什么样的？只有一点我是可以确认的，眼前的这条道路是真实的，一步一个脚印走下去，最终这些疑问都会得到答案，所以，整理好思绪，收拾好心情，如同这个崭新的博客，迎接未来的人生吧。**虽千万里 吾往矣！**\n","slug":"一个新的开始","published":1,"updated":"2017-05-08T13:41:28.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2g6fusd0006l8vdtow4ihdt","content":"<p>来到了这个新的博客，想着得写一篇具有纪念意义的文章，想来想去也不知从何说起，我这个人的叙述能力一般，写东西提起笔半天也下不去，最初有开博客的想法也是为了锻炼一下文笔，然而其实并没有写多少东西，即使写也是类似于笔记之类的，没什么语言组织在里面。最近由于服务器到期，也不想掏这个钱了，干脆弄了个 Hexo + Github Pages。在导入之前博客的时候发现页面格式变得乱七八糟，有些图片也挂了，而且写的内容现在看看也觉得幼齿的很，干脆统统不要，一切都从头开始</p><p>关于写博客这件事情呢，我认为对学习掌握新知识是特别有帮助的，最重要的2个作用是</p><ul><li>把所学到的知识转换成自己的文字，本身是一个对知识的整理、思考、内化的过程</li><li>人脑容量有限，趁想法还热乎的时候记录下来，分门别类管理，便于日后查阅</li></ul><p>博客还有一个重要的作用是 <strong>装逼</strong>，虽说目前没几个人能看到这些文字，但是未来总有那么个人无意走进来，从而发现我默默耕耘着的小天地，发自内心的为我点👍，对我来说也就足够了</p><p>当然写博客最重要的是坚持，纵观我的博客史，发现自己并不是那么勤奋，从3年前开始，多的时候也就一两个月写一篇，有的时候半年才写一篇，想想当初设定的每星期写一篇的目标相去甚远，人呐，骨子里都是懒汉，但是到了一定的岁数，会发现坚持的力量有多么强大，滴水穿石的道理不是嘴上说说就懂的，以前总觉得时间多的是，可是时间哪天不是24小时，何时多出来过，不去珍惜到头来荒废的是自己，这次重开 blog，我也不给自己定什么目标了，平时多加以思考和总结，努力克服内心的懒汉，未来可能还是光明的</p><p>关于这个博客，使用的是 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a>，之前完全没接触过静态 blog，经人推荐后发现特别简洁，不需要部署一堆东西，也没有后台界面，你需要做的就是纯粹的专注于写作，这种返璞归真的体验真的棒极了，而且 Hexo 是开源的，想要什么直接自己折腾，对于程序员特别友好。站点是托管在 Github Pages，全球 CDN 分布，服务器方面的一概不用操心。HTTPs 证书用的是 <a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">Cloudflare</a> 提供的免费服务，反正只要他们家还开着，我就可以一直用下去……</p><p>2016 年最后剩下半个月，也快要到我的生日了，身上的种种无知、浮躁会不会随着年龄的增长而减少一点呢？未来的道路又将会指引我通向何处？幸福究竟对我来说是什么样的？只有一点我是可以确认的，眼前的这条道路是真实的，一步一个脚印走下去，最终这些疑问都会得到答案，所以，整理好思绪，收拾好心情，如同这个崭新的博客，迎接未来的人生吧。<strong>虽千万里 吾往矣！</strong></p>","excerpt":"","more":"<p>来到了这个新的博客，想着得写一篇具有纪念意义的文章，想来想去也不知从何说起，我这个人的叙述能力一般，写东西提起笔半天也下不去，最初有开博客的想法也是为了锻炼一下文笔，然而其实并没有写多少东西，即使写也是类似于笔记之类的，没什么语言组织在里面。最近由于服务器到期，也不想掏这个钱了，干脆弄了个 Hexo + Github Pages。在导入之前博客的时候发现页面格式变得乱七八糟，有些图片也挂了，而且写的内容现在看看也觉得幼齿的很，干脆统统不要，一切都从头开始</p><p>关于写博客这件事情呢，我认为对学习掌握新知识是特别有帮助的，最重要的2个作用是</p><ul><li>把所学到的知识转换成自己的文字，本身是一个对知识的整理、思考、内化的过程</li><li>人脑容量有限，趁想法还热乎的时候记录下来，分门别类管理，便于日后查阅</li></ul><p>博客还有一个重要的作用是 <strong>装逼</strong>，虽说目前没几个人能看到这些文字，但是未来总有那么个人无意走进来，从而发现我默默耕耘着的小天地，发自内心的为我点👍，对我来说也就足够了</p><p>当然写博客最重要的是坚持，纵观我的博客史，发现自己并不是那么勤奋，从3年前开始，多的时候也就一两个月写一篇，有的时候半年才写一篇，想想当初设定的每星期写一篇的目标相去甚远，人呐，骨子里都是懒汉，但是到了一定的岁数，会发现坚持的力量有多么强大，滴水穿石的道理不是嘴上说说就懂的，以前总觉得时间多的是，可是时间哪天不是24小时，何时多出来过，不去珍惜到头来荒废的是自己，这次重开 blog，我也不给自己定什么目标了，平时多加以思考和总结，努力克服内心的懒汉，未来可能还是光明的</p><p>关于这个博客，使用的是 <a href=\"https://hexo.io\">Hexo</a>，之前完全没接触过静态 blog，经人推荐后发现特别简洁，不需要部署一堆东西，也没有后台界面，你需要做的就是纯粹的专注于写作，这种返璞归真的体验真的棒极了，而且 Hexo 是开源的，想要什么直接自己折腾，对于程序员特别友好。站点是托管在 Github Pages，全球 CDN 分布，服务器方面的一概不用操心。HTTPs 证书用的是 <a href=\"https://www.cloudflare.com/\">Cloudflare</a> 提供的免费服务，反正只要他们家还开着，我就可以一直用下去……</p><p>2016 年最后剩下半个月，也快要到我的生日了，身上的种种无知、浮躁会不会随着年龄的增长而减少一点呢？未来的道路又将会指引我通向何处？幸福究竟对我来说是什么样的？只有一点我是可以确认的，眼前的这条道路是真实的，一步一个脚印走下去，最终这些疑问都会得到答案，所以，整理好思绪，收拾好心情，如同这个崭新的博客，迎接未来的人生吧。<strong>虽千万里 吾往矣！</strong></p>"},{"title":"全站 HTTPS 啦！","date":"2016-12-28T03:38:22.000Z","_content":"主要解决的两个问题：\n## Hexo Next 主题菜单链接\nNext 的菜单链接有个问题，如果在 github pages 部署用的第三方域名（默认域名用户可能没有这个问题），首页是 https 的，点击菜单后会变成 http，我看了下请求发现请求确实是 https 但是会 301 成 http，我就费解了，最后在这个 [issue](https://github.com/iissnan/hexo-theme-next/issues/1187#issuecomment-257788310) 里发现了答案，在链接最后加上 '/' 即可\n\n## CloudFlare 设置 Page Rules\n设置方法：Page Rules -> Create Page rule -> Add a Setting -> Always Use HTTPS\n然后把 http://xxx.com/* 添加进去，这样就会强制 301 到 https 上了\n\n哦，今天还把主题里的 Google Fonts 去掉了，还装了 [hexo-all-minifier](https://github.com/chenzhutian/hexo-all-minifier) 插件，打开速度大幅提升\n","source":"_posts/全站-HTTPS-啦！.md","raw":"---\ntitle: 全站 HTTPS 啦！\ndate: 2016-12-28 11:38:22\ncategories: 技术\ntags: Https\n---\n主要解决的两个问题：\n## Hexo Next 主题菜单链接\nNext 的菜单链接有个问题，如果在 github pages 部署用的第三方域名（默认域名用户可能没有这个问题），首页是 https 的，点击菜单后会变成 http，我看了下请求发现请求确实是 https 但是会 301 成 http，我就费解了，最后在这个 [issue](https://github.com/iissnan/hexo-theme-next/issues/1187#issuecomment-257788310) 里发现了答案，在链接最后加上 '/' 即可\n\n## CloudFlare 设置 Page Rules\n设置方法：Page Rules -> Create Page rule -> Add a Setting -> Always Use HTTPS\n然后把 http://xxx.com/* 添加进去，这样就会强制 301 到 https 上了\n\n哦，今天还把主题里的 Google Fonts 去掉了，还装了 [hexo-all-minifier](https://github.com/chenzhutian/hexo-all-minifier) 插件，打开速度大幅提升\n","slug":"全站-HTTPS-啦！","published":1,"updated":"2017-05-08T13:41:28.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2g6fusg0008l8vd8tmv08rb","content":"<p>主要解决的两个问题：</p><h2 id=\"Hexo-Next-主题菜单链接\"><a href=\"#Hexo-Next-主题菜单链接\" class=\"headerlink\" title=\"Hexo Next 主题菜单链接\"></a>Hexo Next 主题菜单链接</h2><p>Next 的菜单链接有个问题，如果在 github pages 部署用的第三方域名（默认域名用户可能没有这个问题），首页是 https 的，点击菜单后会变成 http，我看了下请求发现请求确实是 https 但是会 301 成 http，我就费解了，最后在这个 <a href=\"https://github.com/iissnan/hexo-theme-next/issues/1187#issuecomment-257788310\" target=\"_blank\" rel=\"external\">issue</a> 里发现了答案，在链接最后加上 ‘/‘ 即可</p><h2 id=\"CloudFlare-设置-Page-Rules\"><a href=\"#CloudFlare-设置-Page-Rules\" class=\"headerlink\" title=\"CloudFlare 设置 Page Rules\"></a>CloudFlare 设置 Page Rules</h2><p>设置方法：Page Rules -&gt; Create Page rule -&gt; Add a Setting -&gt; Always Use HTTPS<br>然后把 <a href=\"http://xxx.com/*\" target=\"_blank\" rel=\"external\">http://xxx.com/*</a> 添加进去，这样就会强制 301 到 https 上了</p><p>哦，今天还把主题里的 Google Fonts 去掉了，还装了 <a href=\"https://github.com/chenzhutian/hexo-all-minifier\" target=\"_blank\" rel=\"external\">hexo-all-minifier</a> 插件，打开速度大幅提升</p>","excerpt":"","more":"<p>主要解决的两个问题：</p><h2 id=\"Hexo-Next-主题菜单链接\"><a href=\"#Hexo-Next-主题菜单链接\" class=\"headerlink\" title=\"Hexo Next 主题菜单链接\"></a>Hexo Next 主题菜单链接</h2><p>Next 的菜单链接有个问题，如果在 github pages 部署用的第三方域名（默认域名用户可能没有这个问题），首页是 https 的，点击菜单后会变成 http，我看了下请求发现请求确实是 https 但是会 301 成 http，我就费解了，最后在这个 <a href=\"https://github.com/iissnan/hexo-theme-next/issues/1187#issuecomment-257788310\">issue</a> 里发现了答案，在链接最后加上 ‘/‘ 即可</p><h2 id=\"CloudFlare-设置-Page-Rules\"><a href=\"#CloudFlare-设置-Page-Rules\" class=\"headerlink\" title=\"CloudFlare 设置 Page Rules\"></a>CloudFlare 设置 Page Rules</h2><p>设置方法：Page Rules -&gt; Create Page rule -&gt; Add a Setting -&gt; Always Use HTTPS<br>然后把 <a href=\"http://xxx.com/*\">http://xxx.com/*</a> 添加进去，这样就会强制 301 到 https 上了</p><p>哦，今天还把主题里的 Google Fonts 去掉了，还装了 <a href=\"https://github.com/chenzhutian/hexo-all-minifier\">hexo-all-minifier</a> 插件，打开速度大幅提升</p>"},{"title":"炉石传说之大局观","date":"2017-02-14T03:12:51.000Z","_content":"\n> 节奏既是大局观，对阵双方谁掌握了节奏，谁就掌握了大局，谁就掌握了胜利\n—— 本人\n\n整天听大神们念叨着“大局观”，听起来很神秘，仿佛是一种高深莫测的武功，只有隐居在深山老林的高僧才能习得，然而事实并不是如此，大局观的概念非常简单，任何一个玩家都能理解，本人天梯对阵中，逐渐摸索出了大局观的真谛，并认为解释的比较合理，因此写下这篇文章谈谈我的理解\n<!--more-->\n\n## 节奏的好与坏\n节奏是指每个法力水晶的价值，当前回合的每个法力值都发挥了最大程度的作用，就是好的节奏，没有打出最大程度的作用，或者没有打完所有的水晶，或者干脆空过一回合，就是差的节奏，对局中打出好的节奏的回合数越多，就越有可能战胜，所以一个好的玩家，应该尽可能打出好的节奏，同时迫使对方发出差的节奏，然而炉石是个抽牌游戏，当前回合抽到的牌很大程度上决定了节奏，但是玩家对于手牌的利用也很重要，手牌好的时候要利用起来滚雪球，手牌差的时候要设法通过操作创造机会\n\n## 节奏的快和慢\n节奏的速度是什么？什么时候需要抢节奏，什么时候需要拖节奏？如果说对节奏好坏的掌握属于基本功，那对节奏快慢的掌握才能真正反映一个人的大局观\n\n回答这个问题首先要解释下速度的概念，速度取决于卡组的曲线，曲线越靠前速度越快，反之则越慢，通常来说卡组分为快、中、慢速3种，以当前加基森版本为例，高速卡组有青海萨、海盗战，中速卡组有龙牧、青玉萨、海龙战，慢速卡组有青玉德、宇宙法、宇宙术\n\n对于这3种速度之间的克制关系，一个比较公认的观念是，通常高速克制慢速，慢速克制中速，中速克制高速，根据这个关系，就可以判断出本局对阵是优势对局还是劣势对局，优势要稳，劣势要博，从而就可以判断应该抢节奏还是拖节奏，以一套中速卡组的优劣对局为例\n\n### 中速卡组对阵高速卡组（优势对局）\n中速卡组的特点是前期质量生物压场，中后期靠场面配合法术平推取胜，高速卡组的特点是前期铺场低费随从抢血，中期直伤爆发斩杀，在这样的对局中，中速卡组的前期生物可以以少换多，让高速卡组无法建立起场面优势，迫使高速卡组交直伤解场，导致高速卡组玩家手牌打空，从而失去比赛胜利，在这样的优势对局中，中速打卡组玩家应该稳扎稳打，尽可能用随从和对面交换，保护自己的血量，关键点不在于打死对方，而是消耗对方的伤害，逐步建立起场面优势，和手牌优势\n\n### 中速卡组对阵慢速卡组（劣势对局）\n慢速卡组的特点是，中前期解场保命，后期清场法术+高费质量生物完成返场，中速卡组的特点前面已经说过了，在这样的对局中，中速卡组的场面可以会被一波清掉，面对对方的大生物占场没有返场能力，从而失去胜利，那么在这样的对局中，中速卡组应该尽可能打快自己的节奏，迫使对面无法承受场面压力，提前交出清场法术，或者保命技能，让对方迟迟不能建立起场面，从而带崩对面的节奏获得胜利，这样做虽然存在 All in 后被清场的尴尬，但是如果节奏被拖住，后期是越打赢面越小，所以劣势要博的道理就在这里\n","source":"_posts/炉石传说之大局观.md","raw":"---\ntitle: 炉石传说之大局观\ndate: 2017-02-14 11:12:51\ncategories: 游戏\ntags: 炉石传说\n---\n\n> 节奏既是大局观，对阵双方谁掌握了节奏，谁就掌握了大局，谁就掌握了胜利\n—— 本人\n\n整天听大神们念叨着“大局观”，听起来很神秘，仿佛是一种高深莫测的武功，只有隐居在深山老林的高僧才能习得，然而事实并不是如此，大局观的概念非常简单，任何一个玩家都能理解，本人天梯对阵中，逐渐摸索出了大局观的真谛，并认为解释的比较合理，因此写下这篇文章谈谈我的理解\n<!--more-->\n\n## 节奏的好与坏\n节奏是指每个法力水晶的价值，当前回合的每个法力值都发挥了最大程度的作用，就是好的节奏，没有打出最大程度的作用，或者没有打完所有的水晶，或者干脆空过一回合，就是差的节奏，对局中打出好的节奏的回合数越多，就越有可能战胜，所以一个好的玩家，应该尽可能打出好的节奏，同时迫使对方发出差的节奏，然而炉石是个抽牌游戏，当前回合抽到的牌很大程度上决定了节奏，但是玩家对于手牌的利用也很重要，手牌好的时候要利用起来滚雪球，手牌差的时候要设法通过操作创造机会\n\n## 节奏的快和慢\n节奏的速度是什么？什么时候需要抢节奏，什么时候需要拖节奏？如果说对节奏好坏的掌握属于基本功，那对节奏快慢的掌握才能真正反映一个人的大局观\n\n回答这个问题首先要解释下速度的概念，速度取决于卡组的曲线，曲线越靠前速度越快，反之则越慢，通常来说卡组分为快、中、慢速3种，以当前加基森版本为例，高速卡组有青海萨、海盗战，中速卡组有龙牧、青玉萨、海龙战，慢速卡组有青玉德、宇宙法、宇宙术\n\n对于这3种速度之间的克制关系，一个比较公认的观念是，通常高速克制慢速，慢速克制中速，中速克制高速，根据这个关系，就可以判断出本局对阵是优势对局还是劣势对局，优势要稳，劣势要博，从而就可以判断应该抢节奏还是拖节奏，以一套中速卡组的优劣对局为例\n\n### 中速卡组对阵高速卡组（优势对局）\n中速卡组的特点是前期质量生物压场，中后期靠场面配合法术平推取胜，高速卡组的特点是前期铺场低费随从抢血，中期直伤爆发斩杀，在这样的对局中，中速卡组的前期生物可以以少换多，让高速卡组无法建立起场面优势，迫使高速卡组交直伤解场，导致高速卡组玩家手牌打空，从而失去比赛胜利，在这样的优势对局中，中速打卡组玩家应该稳扎稳打，尽可能用随从和对面交换，保护自己的血量，关键点不在于打死对方，而是消耗对方的伤害，逐步建立起场面优势，和手牌优势\n\n### 中速卡组对阵慢速卡组（劣势对局）\n慢速卡组的特点是，中前期解场保命，后期清场法术+高费质量生物完成返场，中速卡组的特点前面已经说过了，在这样的对局中，中速卡组的场面可以会被一波清掉，面对对方的大生物占场没有返场能力，从而失去胜利，那么在这样的对局中，中速卡组应该尽可能打快自己的节奏，迫使对面无法承受场面压力，提前交出清场法术，或者保命技能，让对方迟迟不能建立起场面，从而带崩对面的节奏获得胜利，这样做虽然存在 All in 后被清场的尴尬，但是如果节奏被拖住，后期是越打赢面越小，所以劣势要博的道理就在这里\n","slug":"炉石传说之大局观","published":1,"updated":"2017-05-08T13:41:28.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2g6fusj000cl8vd0ao4kspt","content":"<blockquote><p>节奏既是大局观，对阵双方谁掌握了节奏，谁就掌握了大局，谁就掌握了胜利<br>—— 本人</p></blockquote><p>整天听大神们念叨着“大局观”，听起来很神秘，仿佛是一种高深莫测的武功，只有隐居在深山老林的高僧才能习得，然而事实并不是如此，大局观的概念非常简单，任何一个玩家都能理解，本人天梯对阵中，逐渐摸索出了大局观的真谛，并认为解释的比较合理，因此写下这篇文章谈谈我的理解<br><a id=\"more\"></a></p><h2 id=\"节奏的好与坏\"><a href=\"#节奏的好与坏\" class=\"headerlink\" title=\"节奏的好与坏\"></a>节奏的好与坏</h2><p>节奏是指每个法力水晶的价值，当前回合的每个法力值都发挥了最大程度的作用，就是好的节奏，没有打出最大程度的作用，或者没有打完所有的水晶，或者干脆空过一回合，就是差的节奏，对局中打出好的节奏的回合数越多，就越有可能战胜，所以一个好的玩家，应该尽可能打出好的节奏，同时迫使对方发出差的节奏，然而炉石是个抽牌游戏，当前回合抽到的牌很大程度上决定了节奏，但是玩家对于手牌的利用也很重要，手牌好的时候要利用起来滚雪球，手牌差的时候要设法通过操作创造机会</p><h2 id=\"节奏的快和慢\"><a href=\"#节奏的快和慢\" class=\"headerlink\" title=\"节奏的快和慢\"></a>节奏的快和慢</h2><p>节奏的速度是什么？什么时候需要抢节奏，什么时候需要拖节奏？如果说对节奏好坏的掌握属于基本功，那对节奏快慢的掌握才能真正反映一个人的大局观</p><p>回答这个问题首先要解释下速度的概念，速度取决于卡组的曲线，曲线越靠前速度越快，反之则越慢，通常来说卡组分为快、中、慢速3种，以当前加基森版本为例，高速卡组有青海萨、海盗战，中速卡组有龙牧、青玉萨、海龙战，慢速卡组有青玉德、宇宙法、宇宙术</p><p>对于这3种速度之间的克制关系，一个比较公认的观念是，通常高速克制慢速，慢速克制中速，中速克制高速，根据这个关系，就可以判断出本局对阵是优势对局还是劣势对局，优势要稳，劣势要博，从而就可以判断应该抢节奏还是拖节奏，以一套中速卡组的优劣对局为例</p><h3 id=\"中速卡组对阵高速卡组（优势对局）\"><a href=\"#中速卡组对阵高速卡组（优势对局）\" class=\"headerlink\" title=\"中速卡组对阵高速卡组（优势对局）\"></a>中速卡组对阵高速卡组（优势对局）</h3><p>中速卡组的特点是前期质量生物压场，中后期靠场面配合法术平推取胜，高速卡组的特点是前期铺场低费随从抢血，中期直伤爆发斩杀，在这样的对局中，中速卡组的前期生物可以以少换多，让高速卡组无法建立起场面优势，迫使高速卡组交直伤解场，导致高速卡组玩家手牌打空，从而失去比赛胜利，在这样的优势对局中，中速打卡组玩家应该稳扎稳打，尽可能用随从和对面交换，保护自己的血量，关键点不在于打死对方，而是消耗对方的伤害，逐步建立起场面优势，和手牌优势</p><h3 id=\"中速卡组对阵慢速卡组（劣势对局）\"><a href=\"#中速卡组对阵慢速卡组（劣势对局）\" class=\"headerlink\" title=\"中速卡组对阵慢速卡组（劣势对局）\"></a>中速卡组对阵慢速卡组（劣势对局）</h3><p>慢速卡组的特点是，中前期解场保命，后期清场法术+高费质量生物完成返场，中速卡组的特点前面已经说过了，在这样的对局中，中速卡组的场面可以会被一波清掉，面对对方的大生物占场没有返场能力，从而失去胜利，那么在这样的对局中，中速卡组应该尽可能打快自己的节奏，迫使对面无法承受场面压力，提前交出清场法术，或者保命技能，让对方迟迟不能建立起场面，从而带崩对面的节奏获得胜利，这样做虽然存在 All in 后被清场的尴尬，但是如果节奏被拖住，后期是越打赢面越小，所以劣势要博的道理就在这里</p>","excerpt":"<blockquote><p>节奏既是大局观，对阵双方谁掌握了节奏，谁就掌握了大局，谁就掌握了胜利<br>—— 本人</p></blockquote><p>整天听大神们念叨着“大局观”，听起来很神秘，仿佛是一种高深莫测的武功，只有隐居在深山老林的高僧才能习得，然而事实并不是如此，大局观的概念非常简单，任何一个玩家都能理解，本人天梯对阵中，逐渐摸索出了大局观的真谛，并认为解释的比较合理，因此写下这篇文章谈谈我的理解<br>","more":"</p><h2 id=\"节奏的好与坏\"><a href=\"#节奏的好与坏\" class=\"headerlink\" title=\"节奏的好与坏\"></a>节奏的好与坏</h2><p>节奏是指每个法力水晶的价值，当前回合的每个法力值都发挥了最大程度的作用，就是好的节奏，没有打出最大程度的作用，或者没有打完所有的水晶，或者干脆空过一回合，就是差的节奏，对局中打出好的节奏的回合数越多，就越有可能战胜，所以一个好的玩家，应该尽可能打出好的节奏，同时迫使对方发出差的节奏，然而炉石是个抽牌游戏，当前回合抽到的牌很大程度上决定了节奏，但是玩家对于手牌的利用也很重要，手牌好的时候要利用起来滚雪球，手牌差的时候要设法通过操作创造机会</p><h2 id=\"节奏的快和慢\"><a href=\"#节奏的快和慢\" class=\"headerlink\" title=\"节奏的快和慢\"></a>节奏的快和慢</h2><p>节奏的速度是什么？什么时候需要抢节奏，什么时候需要拖节奏？如果说对节奏好坏的掌握属于基本功，那对节奏快慢的掌握才能真正反映一个人的大局观</p><p>回答这个问题首先要解释下速度的概念，速度取决于卡组的曲线，曲线越靠前速度越快，反之则越慢，通常来说卡组分为快、中、慢速3种，以当前加基森版本为例，高速卡组有青海萨、海盗战，中速卡组有龙牧、青玉萨、海龙战，慢速卡组有青玉德、宇宙法、宇宙术</p><p>对于这3种速度之间的克制关系，一个比较公认的观念是，通常高速克制慢速，慢速克制中速，中速克制高速，根据这个关系，就可以判断出本局对阵是优势对局还是劣势对局，优势要稳，劣势要博，从而就可以判断应该抢节奏还是拖节奏，以一套中速卡组的优劣对局为例</p><h3 id=\"中速卡组对阵高速卡组（优势对局）\"><a href=\"#中速卡组对阵高速卡组（优势对局）\" class=\"headerlink\" title=\"中速卡组对阵高速卡组（优势对局）\"></a>中速卡组对阵高速卡组（优势对局）</h3><p>中速卡组的特点是前期质量生物压场，中后期靠场面配合法术平推取胜，高速卡组的特点是前期铺场低费随从抢血，中期直伤爆发斩杀，在这样的对局中，中速卡组的前期生物可以以少换多，让高速卡组无法建立起场面优势，迫使高速卡组交直伤解场，导致高速卡组玩家手牌打空，从而失去比赛胜利，在这样的优势对局中，中速打卡组玩家应该稳扎稳打，尽可能用随从和对面交换，保护自己的血量，关键点不在于打死对方，而是消耗对方的伤害，逐步建立起场面优势，和手牌优势</p><h3 id=\"中速卡组对阵慢速卡组（劣势对局）\"><a href=\"#中速卡组对阵慢速卡组（劣势对局）\" class=\"headerlink\" title=\"中速卡组对阵慢速卡组（劣势对局）\"></a>中速卡组对阵慢速卡组（劣势对局）</h3><p>慢速卡组的特点是，中前期解场保命，后期清场法术+高费质量生物完成返场，中速卡组的特点前面已经说过了，在这样的对局中，中速卡组的场面可以会被一波清掉，面对对方的大生物占场没有返场能力，从而失去胜利，那么在这样的对局中，中速卡组应该尽可能打快自己的节奏，迫使对面无法承受场面压力，提前交出清场法术，或者保命技能，让对方迟迟不能建立起场面，从而带崩对面的节奏获得胜利，这样做虽然存在 All in 后被清场的尴尬，但是如果节奏被拖住，后期是越打赢面越小，所以劣势要博的道理就在这里</p>"},{"title":"大幅提升 React 性能的6个建议","date":"2016-12-24T06:19:21.000Z","_content":"React 在不做任何优化的情况下性能也非常好，然而通过一些小小的优化，可以让性能进一步提升，通过以下这6条建议，可以数十倍加快渲染速度\n\n## 设置 NODE_ENV 为 Production\nReact 在开发环境下，有完整的警告和错误检查，但它们不是为生产环境准备的，如果你看过 React 的源码，你会看到很多 `if (process.env.NODE_ENV != 'production')`，这些代码对于最终用户是不需要的，而且访问 `process.env.NODE_ENV` 会非常慢，对于生产环境而言，完全可以移除这些代码\n\n如果你使用 [Webpack](https://webpack.github.io/)，你可以使用 [DefinePlugin](https://webpack.github.io/docs/list-of-plugins.html#defineplugin) 来替换 `process.env.NODE_ENV` 为 'production'，然后使用 [UglifyJsPlugin](https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin) 移除这些不会执行的代码\n``` js\n// webpack.config.js\n...\nplugins: [\n    new webpack.DefinePlugin({\n        'process.env.NODE_ENV': JSON.stringify('production')\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n            warnings: false\n        }\n    })\n]\n...\n```\n\n## React 15 的渲染速度比 0.14 快约 25%\n在 [React 15 的更新](https://facebook.github.io/react/blog/2016/04/07/react-v15.html)中非常重要的一项是，使用在现代化浏览器中性能更好的 `document.createElement` 替换 `innerHTML`，这一改动也意味着 React 将不再支持 IE8\n\n## Babel Constant 和 Inline Elements 转换\nBabel 为开发者们提供了 [React Constant Elements](http://babeljs.io/docs/plugins/transform-react-constant-elements/) 和 [React Inline Elements](https://babeljs.io/docs/plugins/transform-react-inline-elements/)，这两款插件能够在编译阶段将代码转换成更高效的形式，注意仅将它们用于生产环境\n\n## 封装集合渲染为独立组件\n这一点在循环渲染集合组件时尤其重要，React 在渲染大型集合是性能十分糟糕，原因是 React 会在每次更新中全部重新渲染，因此建议将渲染集合的部分装为独立的组件渲染\n```js\n// Bad\nclass MyComponent extends Component {\n    render() {\n        const {todos, user} = this.props;\n        return (<div>\n            {user.name}\n            <ul>\n                {todos.map(todo => <TodoView todo={todo} key={todo.id} />)}\n            </ul>\n        </div>)\n    }\n}\n```\n``` js\n// Good\n// 当 user.name 更新时，列表不会重新渲染\nclass MyComponent extends Component {\n    render() {\n        const {todos, user} = this.props;\n        return (<div>\n            {user.name}\n            <TodosView todos={todos} />\n        </div>)\n    }\n}\n\nclass TodosView extends Component {\n    render() {\n        const {todos} = this.props;\n        return (<ul>\n            {todos.map(todo => <TodoView todo={todo} key={todo.id} />)}\n        </ul>)\n    }\n}\n```\n\n## 尽早绑定方法\n在 render() 中绑定的方法应该尽早声明，而不是在渲染时定义\n``` js\n// Bad\nrender() {\n    return <MyWidget onClick={() => { alert(this.state.text) }} />\n}\n```\n``` js\n// Good\nconstructor() {\n    this.handleClick = this.handleClick.bind(this);\n}\n\nhandleClick() {\n    alert(this.state.text);\n}\n\nrender() {\n    return <MyWidget onClick={this.handleClick} />\n}\n```\n\n## 不变组件禁用更新\n对于不需要更新的组件，可以在 `shouldComponentUpdate()` 中 `return false`，或者使用 [Stateless Component](https://facebook.github.io/react/docs/components-and-props.html)\n``` js\n// Bad\nclass Logo extends Component {\n    render() {\n        return <div><img src='logo.png' /></div>;\n    }\n}\n```\n\n``` js\n// Good\nclass Logo extends Component {\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    render() {\n        return <div><img src='logo.png' /></div>;\n    }\n}\n\n// or Stateless Component\nconst Logo = () => <div><img src='logo.png' /></div>;\n```\n\n##### 参考文章\n- [React performance](https://github.com/markerikson/react-redux-links/blob/master/react-performance.md)\n- [How to Make Your React Apps 15x Faster](https://reactjsnews.com/how-to-make-your-react-apps-10x-faster)\n- [Avoid bind when passing props](https://daveceddia.com/avoid-bind-when-passing-props/)\n- [Optimizing rendering React components](https://mobxjs.github.io/mobx/best/react-performance.html)\n","source":"_posts/大幅提升-React-性能的6个建议.md","raw":"---\ntitle: 大幅提升 React 性能的6个建议\ndate: 2016-12-24 14:19:21\ncategories: 技术\ntags: React\n---\nReact 在不做任何优化的情况下性能也非常好，然而通过一些小小的优化，可以让性能进一步提升，通过以下这6条建议，可以数十倍加快渲染速度\n\n## 设置 NODE_ENV 为 Production\nReact 在开发环境下，有完整的警告和错误检查，但它们不是为生产环境准备的，如果你看过 React 的源码，你会看到很多 `if (process.env.NODE_ENV != 'production')`，这些代码对于最终用户是不需要的，而且访问 `process.env.NODE_ENV` 会非常慢，对于生产环境而言，完全可以移除这些代码\n\n如果你使用 [Webpack](https://webpack.github.io/)，你可以使用 [DefinePlugin](https://webpack.github.io/docs/list-of-plugins.html#defineplugin) 来替换 `process.env.NODE_ENV` 为 'production'，然后使用 [UglifyJsPlugin](https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin) 移除这些不会执行的代码\n``` js\n// webpack.config.js\n...\nplugins: [\n    new webpack.DefinePlugin({\n        'process.env.NODE_ENV': JSON.stringify('production')\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n            warnings: false\n        }\n    })\n]\n...\n```\n\n## React 15 的渲染速度比 0.14 快约 25%\n在 [React 15 的更新](https://facebook.github.io/react/blog/2016/04/07/react-v15.html)中非常重要的一项是，使用在现代化浏览器中性能更好的 `document.createElement` 替换 `innerHTML`，这一改动也意味着 React 将不再支持 IE8\n\n## Babel Constant 和 Inline Elements 转换\nBabel 为开发者们提供了 [React Constant Elements](http://babeljs.io/docs/plugins/transform-react-constant-elements/) 和 [React Inline Elements](https://babeljs.io/docs/plugins/transform-react-inline-elements/)，这两款插件能够在编译阶段将代码转换成更高效的形式，注意仅将它们用于生产环境\n\n## 封装集合渲染为独立组件\n这一点在循环渲染集合组件时尤其重要，React 在渲染大型集合是性能十分糟糕，原因是 React 会在每次更新中全部重新渲染，因此建议将渲染集合的部分装为独立的组件渲染\n```js\n// Bad\nclass MyComponent extends Component {\n    render() {\n        const {todos, user} = this.props;\n        return (<div>\n            {user.name}\n            <ul>\n                {todos.map(todo => <TodoView todo={todo} key={todo.id} />)}\n            </ul>\n        </div>)\n    }\n}\n```\n``` js\n// Good\n// 当 user.name 更新时，列表不会重新渲染\nclass MyComponent extends Component {\n    render() {\n        const {todos, user} = this.props;\n        return (<div>\n            {user.name}\n            <TodosView todos={todos} />\n        </div>)\n    }\n}\n\nclass TodosView extends Component {\n    render() {\n        const {todos} = this.props;\n        return (<ul>\n            {todos.map(todo => <TodoView todo={todo} key={todo.id} />)}\n        </ul>)\n    }\n}\n```\n\n## 尽早绑定方法\n在 render() 中绑定的方法应该尽早声明，而不是在渲染时定义\n``` js\n// Bad\nrender() {\n    return <MyWidget onClick={() => { alert(this.state.text) }} />\n}\n```\n``` js\n// Good\nconstructor() {\n    this.handleClick = this.handleClick.bind(this);\n}\n\nhandleClick() {\n    alert(this.state.text);\n}\n\nrender() {\n    return <MyWidget onClick={this.handleClick} />\n}\n```\n\n## 不变组件禁用更新\n对于不需要更新的组件，可以在 `shouldComponentUpdate()` 中 `return false`，或者使用 [Stateless Component](https://facebook.github.io/react/docs/components-and-props.html)\n``` js\n// Bad\nclass Logo extends Component {\n    render() {\n        return <div><img src='logo.png' /></div>;\n    }\n}\n```\n\n``` js\n// Good\nclass Logo extends Component {\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    render() {\n        return <div><img src='logo.png' /></div>;\n    }\n}\n\n// or Stateless Component\nconst Logo = () => <div><img src='logo.png' /></div>;\n```\n\n##### 参考文章\n- [React performance](https://github.com/markerikson/react-redux-links/blob/master/react-performance.md)\n- [How to Make Your React Apps 15x Faster](https://reactjsnews.com/how-to-make-your-react-apps-10x-faster)\n- [Avoid bind when passing props](https://daveceddia.com/avoid-bind-when-passing-props/)\n- [Optimizing rendering React components](https://mobxjs.github.io/mobx/best/react-performance.html)\n","slug":"大幅提升-React-性能的6个建议","published":1,"updated":"2017-05-08T13:41:28.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2g6fusl000fl8vd2eaw9irh","content":"<p>React 在不做任何优化的情况下性能也非常好，然而通过一些小小的优化，可以让性能进一步提升，通过以下这6条建议，可以数十倍加快渲染速度</p><h2 id=\"设置-NODE-ENV-为-Production\"><a href=\"#设置-NODE-ENV-为-Production\" class=\"headerlink\" title=\"设置 NODE_ENV 为 Production\"></a>设置 NODE_ENV 为 Production</h2><p>React 在开发环境下，有完整的警告和错误检查，但它们不是为生产环境准备的，如果你看过 React 的源码，你会看到很多 <code>if (process.env.NODE_ENV != &#39;production&#39;)</code>，这些代码对于最终用户是不需要的，而且访问 <code>process.env.NODE_ENV</code> 会非常慢，对于生产环境而言，完全可以移除这些代码</p><p>如果你使用 <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">Webpack</a>，你可以使用 <a href=\"https://webpack.github.io/docs/list-of-plugins.html#defineplugin\" target=\"_blank\" rel=\"external\">DefinePlugin</a> 来替换 <code>process.env.NODE_ENV</code> 为 ‘production’，然后使用 <a href=\"https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\" target=\"_blank\" rel=\"external\">UglifyJsPlugin</a> 移除这些不会执行的代码<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\">...</div><div class=\"line\">plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">        <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">        <span class=\"attr\">compress</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">]</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><h2 id=\"React-15-的渲染速度比-0-14-快约-25\"><a href=\"#React-15-的渲染速度比-0-14-快约-25\" class=\"headerlink\" title=\"React 15 的渲染速度比 0.14 快约 25%\"></a>React 15 的渲染速度比 0.14 快约 25%</h2><p>在 <a href=\"https://facebook.github.io/react/blog/2016/04/07/react-v15.html\" target=\"_blank\" rel=\"external\">React 15 的更新</a>中非常重要的一项是，使用在现代化浏览器中性能更好的 <code>document.createElement</code> 替换 <code>innerHTML</code>，这一改动也意味着 React 将不再支持 IE8</p><h2 id=\"Babel-Constant-和-Inline-Elements-转换\"><a href=\"#Babel-Constant-和-Inline-Elements-转换\" class=\"headerlink\" title=\"Babel Constant 和 Inline Elements 转换\"></a>Babel Constant 和 Inline Elements 转换</h2><p>Babel 为开发者们提供了 <a href=\"http://babeljs.io/docs/plugins/transform-react-constant-elements/\" target=\"_blank\" rel=\"external\">React Constant Elements</a> 和 <a href=\"https://babeljs.io/docs/plugins/transform-react-inline-elements/\" target=\"_blank\" rel=\"external\">React Inline Elements</a>，这两款插件能够在编译阶段将代码转换成更高效的形式，注意仅将它们用于生产环境</p><h2 id=\"封装集合渲染为独立组件\"><a href=\"#封装集合渲染为独立组件\" class=\"headerlink\" title=\"封装集合渲染为独立组件\"></a>封装集合渲染为独立组件</h2><p>这一点在循环渲染集合组件时尤其重要，React 在渲染大型集合是性能十分糟糕，原因是 React 会在每次更新中全部重新渲染，因此建议将渲染集合的部分装为独立的组件渲染<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;todos, user&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &#123;user.name&#125;</div><div class=\"line\">            &lt;ul&gt;</div><div class=\"line\">                &#123;todos.map(todo =&gt; &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;)&#125;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"comment\">// 当 user.name 更新时，列表不会重新渲染</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;todos, user&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &#123;user.name&#125;</div><div class=\"line\">            &lt;TodosView todos=&#123;todos&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TodosView extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        const &#123;todos&#125; = this.props;</div><div class=\"line\">        return (&lt;ul&gt;</div><div class=\"line\">            &#123;todos.map(todo =&gt; &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;)&#125;</div><div class=\"line\">        &lt;/ul&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"尽早绑定方法\"><a href=\"#尽早绑定方法\" class=\"headerlink\" title=\"尽早绑定方法\"></a>尽早绑定方法</h2><p>在 render() 中绑定的方法应该尽早声明，而不是在渲染时定义<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;MyWidget onClick=&#123;() =&gt; &#123; alert(this.state.text) &#125;&#125; /&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleClick = <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">handleClick() &#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.state.text);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;MyWidget onClick=&#123;this.handleClick&#125; /&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"不变组件禁用更新\"><a href=\"#不变组件禁用更新\" class=\"headerlink\" title=\"不变组件禁用更新\"></a>不变组件禁用更新</h2><p>对于不需要更新的组件，可以在 <code>shouldComponentUpdate()</code> 中 <code>return false</code>，或者使用 <a href=\"https://facebook.github.io/react/docs/components-and-props.html\" target=\"_blank\" rel=\"external\">Stateless Component</a><br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    shouldComponentUpdate() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// or Stateless Component</div><div class=\"line\">const Logo = () =&gt; &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div></pre></td></tr></table></figure><h5 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h5><ul><li><a href=\"https://github.com/markerikson/react-redux-links/blob/master/react-performance.md\" target=\"_blank\" rel=\"external\">React performance</a></li><li><a href=\"https://reactjsnews.com/how-to-make-your-react-apps-10x-faster\" target=\"_blank\" rel=\"external\">How to Make Your React Apps 15x Faster</a></li><li><a href=\"https://daveceddia.com/avoid-bind-when-passing-props/\" target=\"_blank\" rel=\"external\">Avoid bind when passing props</a></li><li><a href=\"https://mobxjs.github.io/mobx/best/react-performance.html\" target=\"_blank\" rel=\"external\">Optimizing rendering React components</a></li></ul>","excerpt":"","more":"<p>React 在不做任何优化的情况下性能也非常好，然而通过一些小小的优化，可以让性能进一步提升，通过以下这6条建议，可以数十倍加快渲染速度</p><h2 id=\"设置-NODE-ENV-为-Production\"><a href=\"#设置-NODE-ENV-为-Production\" class=\"headerlink\" title=\"设置 NODE_ENV 为 Production\"></a>设置 NODE_ENV 为 Production</h2><p>React 在开发环境下，有完整的警告和错误检查，但它们不是为生产环境准备的，如果你看过 React 的源码，你会看到很多 <code>if (process.env.NODE_ENV != &#39;production&#39;)</code>，这些代码对于最终用户是不需要的，而且访问 <code>process.env.NODE_ENV</code> 会非常慢，对于生产环境而言，完全可以移除这些代码</p><p>如果你使用 <a href=\"https://webpack.github.io/\">Webpack</a>，你可以使用 <a href=\"https://webpack.github.io/docs/list-of-plugins.html#defineplugin\">DefinePlugin</a> 来替换 <code>process.env.NODE_ENV</code> 为 ‘production’，然后使用 <a href=\"https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\">UglifyJsPlugin</a> 移除这些不会执行的代码<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\">...</div><div class=\"line\">plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">        <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">        <span class=\"attr\">compress</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">]</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><h2 id=\"React-15-的渲染速度比-0-14-快约-25\"><a href=\"#React-15-的渲染速度比-0-14-快约-25\" class=\"headerlink\" title=\"React 15 的渲染速度比 0.14 快约 25%\"></a>React 15 的渲染速度比 0.14 快约 25%</h2><p>在 <a href=\"https://facebook.github.io/react/blog/2016/04/07/react-v15.html\">React 15 的更新</a>中非常重要的一项是，使用在现代化浏览器中性能更好的 <code>document.createElement</code> 替换 <code>innerHTML</code>，这一改动也意味着 React 将不再支持 IE8</p><h2 id=\"Babel-Constant-和-Inline-Elements-转换\"><a href=\"#Babel-Constant-和-Inline-Elements-转换\" class=\"headerlink\" title=\"Babel Constant 和 Inline Elements 转换\"></a>Babel Constant 和 Inline Elements 转换</h2><p>Babel 为开发者们提供了 <a href=\"http://babeljs.io/docs/plugins/transform-react-constant-elements/\">React Constant Elements</a> 和 <a href=\"https://babeljs.io/docs/plugins/transform-react-inline-elements/\">React Inline Elements</a>，这两款插件能够在编译阶段将代码转换成更高效的形式，注意仅将它们用于生产环境</p><h2 id=\"封装集合渲染为独立组件\"><a href=\"#封装集合渲染为独立组件\" class=\"headerlink\" title=\"封装集合渲染为独立组件\"></a>封装集合渲染为独立组件</h2><p>这一点在循环渲染集合组件时尤其重要，React 在渲染大型集合是性能十分糟糕，原因是 React 会在每次更新中全部重新渲染，因此建议将渲染集合的部分装为独立的组件渲染<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;todos, user&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &#123;user.name&#125;</div><div class=\"line\">            &lt;ul&gt;</div><div class=\"line\">                &#123;todos.map(todo =&gt; &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;)&#125;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"comment\">// 当 user.name 更新时，列表不会重新渲染</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;todos, user&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &#123;user.name&#125;</div><div class=\"line\">            &lt;TodosView todos=&#123;todos&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TodosView extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        const &#123;todos&#125; = this.props;</div><div class=\"line\">        return (&lt;ul&gt;</div><div class=\"line\">            &#123;todos.map(todo =&gt; &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;)&#125;</div><div class=\"line\">        &lt;/ul&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"尽早绑定方法\"><a href=\"#尽早绑定方法\" class=\"headerlink\" title=\"尽早绑定方法\"></a>尽早绑定方法</h2><p>在 render() 中绑定的方法应该尽早声明，而不是在渲染时定义<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;MyWidget onClick=&#123;() =&gt; &#123; alert(this.state.text) &#125;&#125; /&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleClick = <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">handleClick() &#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.state.text);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;MyWidget onClick=&#123;this.handleClick&#125; /&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"不变组件禁用更新\"><a href=\"#不变组件禁用更新\" class=\"headerlink\" title=\"不变组件禁用更新\"></a>不变组件禁用更新</h2><p>对于不需要更新的组件，可以在 <code>shouldComponentUpdate()</code> 中 <code>return false</code>，或者使用 <a href=\"https://facebook.github.io/react/docs/components-and-props.html\">Stateless Component</a><br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    shouldComponentUpdate() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// or Stateless Component</div><div class=\"line\">const Logo = () =&gt; &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div></pre></td></tr></table></figure><h5 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h5><ul><li><a href=\"https://github.com/markerikson/react-redux-links/blob/master/react-performance.md\">React performance</a></li><li><a href=\"https://reactjsnews.com/how-to-make-your-react-apps-10x-faster\">How to Make Your React Apps 15x Faster</a></li><li><a href=\"https://daveceddia.com/avoid-bind-when-passing-props/\">Avoid bind when passing props</a></li><li><a href=\"https://mobxjs.github.io/mobx/best/react-performance.html\">Optimizing rendering React components</a></li></ul>"},{"title":"匠人的悲哀","date":"2017-01-25T13:57:39.000Z","_content":"人工智能时代的来临可能还很遥远，然而 Google 的 AlphaGo、自动驾驶等等，已经摒弃了人工编写代码开发，而采用了让机器自主学习的方式，这一项技术无疑将彻底颠覆未来软件开发行业，软件不再是由静态的人工编写的代码构成，而是基于海量数据自主学习，不断优化自身，这一天迟早都会到来，我们这些传统码农终将葬身于历史的车轮下\n\n如果把人类划分为两个阶级，一个掌握资源，一个掌握方法，方法的更替速度是远远超过资源的更新速度的，就比如说获取信息，今天我们可以通过微信朋友圈、公众号，2年前我们通过各种APP，5年前人们使用电脑浏览器，10年前通过电视广播，30年前通过报纸杂志，再往前都不知道多少年来都是靠人们道听途说的，可以发现方法更新的速率是递增的，方法的更新带来的是更加便利的生活，可背后是多少行业的消失，多少人因此而失业。当人学习一项赖以为生技能时，同时就要承担着这项技能随时都会无用的风险，而那些资本家们风险就小得多，无论世界格局如何变幻，只要钱还是钱，石油还是石油，掌握着资源就能立于不败\n\n今天看了“百鸟朝凤”，电影主要内容是唢呐匠人曾经如何如何受尊重，然而如今时代变迁之下，传统文化步入历史边缘，几代人的心血最终一文不值，昔日辉煌与今日凄凉的强烈对比，让人看了不免唏嘘，这样的故事在现实中一定更残酷，历史的车轮无情的转动着，碾碎匠人们的情怀和梦想\n\n也许若干年后，当手工编写代码已经完成历史使命，那时我做着一些如今无法想象的全新工作，或者只是失业在家领取低保，我可能依然会翻翻Github，调试调试以前的代码，尽管它们再也没有发布的价值，或者指导小朋友们学习这项传统技艺，尽管对于他们来说这只是课余爱好，或者只是随手写几个程序，在他人眼中如同会演奏乐器一般，是有文化修养的象征，那时回忆起曾经与产品经理争论某个需求是否合理，和同事争论哪种实现方式更好，也许只剩下一声轻叹\n","source":"_posts/匠人的悲哀.md","raw":"---\ntitle: 匠人的悲哀\ndate: 2017-01-25 21:57:39\ncategories: 随笔\n---\n人工智能时代的来临可能还很遥远，然而 Google 的 AlphaGo、自动驾驶等等，已经摒弃了人工编写代码开发，而采用了让机器自主学习的方式，这一项技术无疑将彻底颠覆未来软件开发行业，软件不再是由静态的人工编写的代码构成，而是基于海量数据自主学习，不断优化自身，这一天迟早都会到来，我们这些传统码农终将葬身于历史的车轮下\n\n如果把人类划分为两个阶级，一个掌握资源，一个掌握方法，方法的更替速度是远远超过资源的更新速度的，就比如说获取信息，今天我们可以通过微信朋友圈、公众号，2年前我们通过各种APP，5年前人们使用电脑浏览器，10年前通过电视广播，30年前通过报纸杂志，再往前都不知道多少年来都是靠人们道听途说的，可以发现方法更新的速率是递增的，方法的更新带来的是更加便利的生活，可背后是多少行业的消失，多少人因此而失业。当人学习一项赖以为生技能时，同时就要承担着这项技能随时都会无用的风险，而那些资本家们风险就小得多，无论世界格局如何变幻，只要钱还是钱，石油还是石油，掌握着资源就能立于不败\n\n今天看了“百鸟朝凤”，电影主要内容是唢呐匠人曾经如何如何受尊重，然而如今时代变迁之下，传统文化步入历史边缘，几代人的心血最终一文不值，昔日辉煌与今日凄凉的强烈对比，让人看了不免唏嘘，这样的故事在现实中一定更残酷，历史的车轮无情的转动着，碾碎匠人们的情怀和梦想\n\n也许若干年后，当手工编写代码已经完成历史使命，那时我做着一些如今无法想象的全新工作，或者只是失业在家领取低保，我可能依然会翻翻Github，调试调试以前的代码，尽管它们再也没有发布的价值，或者指导小朋友们学习这项传统技艺，尽管对于他们来说这只是课余爱好，或者只是随手写几个程序，在他人眼中如同会演奏乐器一般，是有文化修养的象征，那时回忆起曾经与产品经理争论某个需求是否合理，和同事争论哪种实现方式更好，也许只剩下一声轻叹\n","slug":"匠人的悲哀","published":1,"updated":"2017-05-08T13:41:28.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2g6fusm000il8vd75975mqw","content":"<p>人工智能时代的来临可能还很遥远，然而 Google 的 AlphaGo、自动驾驶等等，已经摒弃了人工编写代码开发，而采用了让机器自主学习的方式，这一项技术无疑将彻底颠覆未来软件开发行业，软件不再是由静态的人工编写的代码构成，而是基于海量数据自主学习，不断优化自身，这一天迟早都会到来，我们这些传统码农终将葬身于历史的车轮下</p><p>如果把人类划分为两个阶级，一个掌握资源，一个掌握方法，方法的更替速度是远远超过资源的更新速度的，就比如说获取信息，今天我们可以通过微信朋友圈、公众号，2年前我们通过各种APP，5年前人们使用电脑浏览器，10年前通过电视广播，30年前通过报纸杂志，再往前都不知道多少年来都是靠人们道听途说的，可以发现方法更新的速率是递增的，方法的更新带来的是更加便利的生活，可背后是多少行业的消失，多少人因此而失业。当人学习一项赖以为生技能时，同时就要承担着这项技能随时都会无用的风险，而那些资本家们风险就小得多，无论世界格局如何变幻，只要钱还是钱，石油还是石油，掌握着资源就能立于不败</p><p>今天看了“百鸟朝凤”，电影主要内容是唢呐匠人曾经如何如何受尊重，然而如今时代变迁之下，传统文化步入历史边缘，几代人的心血最终一文不值，昔日辉煌与今日凄凉的强烈对比，让人看了不免唏嘘，这样的故事在现实中一定更残酷，历史的车轮无情的转动着，碾碎匠人们的情怀和梦想</p><p>也许若干年后，当手工编写代码已经完成历史使命，那时我做着一些如今无法想象的全新工作，或者只是失业在家领取低保，我可能依然会翻翻Github，调试调试以前的代码，尽管它们再也没有发布的价值，或者指导小朋友们学习这项传统技艺，尽管对于他们来说这只是课余爱好，或者只是随手写几个程序，在他人眼中如同会演奏乐器一般，是有文化修养的象征，那时回忆起曾经与产品经理争论某个需求是否合理，和同事争论哪种实现方式更好，也许只剩下一声轻叹</p>","excerpt":"","more":"<p>人工智能时代的来临可能还很遥远，然而 Google 的 AlphaGo、自动驾驶等等，已经摒弃了人工编写代码开发，而采用了让机器自主学习的方式，这一项技术无疑将彻底颠覆未来软件开发行业，软件不再是由静态的人工编写的代码构成，而是基于海量数据自主学习，不断优化自身，这一天迟早都会到来，我们这些传统码农终将葬身于历史的车轮下</p><p>如果把人类划分为两个阶级，一个掌握资源，一个掌握方法，方法的更替速度是远远超过资源的更新速度的，就比如说获取信息，今天我们可以通过微信朋友圈、公众号，2年前我们通过各种APP，5年前人们使用电脑浏览器，10年前通过电视广播，30年前通过报纸杂志，再往前都不知道多少年来都是靠人们道听途说的，可以发现方法更新的速率是递增的，方法的更新带来的是更加便利的生活，可背后是多少行业的消失，多少人因此而失业。当人学习一项赖以为生技能时，同时就要承担着这项技能随时都会无用的风险，而那些资本家们风险就小得多，无论世界格局如何变幻，只要钱还是钱，石油还是石油，掌握着资源就能立于不败</p><p>今天看了“百鸟朝凤”，电影主要内容是唢呐匠人曾经如何如何受尊重，然而如今时代变迁之下，传统文化步入历史边缘，几代人的心血最终一文不值，昔日辉煌与今日凄凉的强烈对比，让人看了不免唏嘘，这样的故事在现实中一定更残酷，历史的车轮无情的转动着，碾碎匠人们的情怀和梦想</p><p>也许若干年后，当手工编写代码已经完成历史使命，那时我做着一些如今无法想象的全新工作，或者只是失业在家领取低保，我可能依然会翻翻Github，调试调试以前的代码，尽管它们再也没有发布的价值，或者指导小朋友们学习这项传统技艺，尽管对于他们来说这只是课余爱好，或者只是随手写几个程序，在他人眼中如同会演奏乐器一般，是有文化修养的象征，那时回忆起曾经与产品经理争论某个需求是否合理，和同事争论哪种实现方式更好，也许只剩下一声轻叹</p>"},{"title":"五线谱视谱练习程序","date":"2017-01-05T08:21:00.000Z","_content":"五线谱视谱练习程序，移动端访问\n\n<img src=\"https://i1.piimg.com/567571/4cc46b753fca58cd.jpg\" width=\"200\">\n","source":"_posts/五线谱视谱练习程序.md","raw":"---\ntitle: 五线谱视谱练习程序\ndate: 2017-01-05 16:21:00\ncategories: 技术\n---\n五线谱视谱练习程序，移动端访问\n\n<img src=\"https://i1.piimg.com/567571/4cc46b753fca58cd.jpg\" width=\"200\">\n","slug":"五线谱视谱练习程序","published":1,"updated":"2017-05-08T13:41:28.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2g6fuss000ml8vdu58rbqu6","content":"<p>五线谱视谱练习程序，移动端访问</p><p><img src=\"https://i1.piimg.com/567571/4cc46b753fca58cd.jpg\" width=\"200\"></p>","excerpt":"","more":"<p>五线谱视谱练习程序，移动端访问</p><p><img src=\"https://i1.piimg.com/567571/4cc46b753fca58cd.jpg\" width=\"200\"></p>"},{"title":"前端面试题收集","date":"2017-05-08T13:43:47.000Z","_content":"常见前端面试题整理贴\n<!--more-->\n## JS\n### js的继承实现\nJavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。\n#### 创建方式\n##### 构造器方法\n构造器其实就是一个普通的函数。当使用 new 操作符 来作用这个函数时，它就可以被称为构造方法（构造函数）。\n``` js\nfunction Graph() {\n  this.vertices = [];\n  this.edges = [];\n}\n\nGraph.prototype = {\n  addVertex: function(v){\n    this.vertices.push(v);\n  }\n};\n\nvar g = new Graph();\n// g是生成的对象,他的自身属性有'vertices'和'edges'.\n// 在g被实例化时,g.[[Prototype]]指向了Graph.prototype.\n```\n\n##### Object.create (es5)\nECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：\n``` js\nvar a = {a: 1};\n// a ---> Object.prototype ---> null\n\nvar b = Object.create(a);\n// b ---> a ---> Object.prototype ---> null\nconsole.log(b.a); // 1 (继承而来)\n\nvar c = Object.create(b);\n// c ---> b ---> a ---> Object.prototype ---> null\n\nvar d = Object.create(null);\n// d ---> null\nconsole.log(d.hasOwnProperty); // undefined, 因为d没有继承Object.prototype\n```\n\n##### class (es6)\n```js\nclass Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\nclass Square extends Polygon {\n  constructor(sideLength) {\n    super(sideLength, sideLength);\n  }\n  get area() {\n    return this.height * this.width;\n  }\n  set sideLength(newLength) {\n    this.height = newLength;\n    this.width = newLength;\n  }\n}\n\nvar square = new Square(2);\n```\n\n#### 性能\n遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。\nhasOwnProperty 是 JavaScript 中唯一一个只涉及对象自身属性而不会遍历原型链的方法。\n\n\n### js的闭包\n```\n闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。\n换句话说，这些函数可以“记忆”它被创建时候的环境。\n```\n闭包是指能够访问在封闭作用于内的变量的函数，这些函数可以保存它们被创建时的环境。\n``` js\nfunction makeFunc() {\n  var name = \"Mozilla\";\n  function displayName() {\n    alert(name);\n  }\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n```\n#### 闭包的应用\n* 访问私有属性\n```js\nvar Foo = function(){\n      var name = 'fooname';\n      var age = 12;\n      this.getName = function(){\n          return name;\n      };\n      this.getAge = function(){\n          return age;\n      };\n  };\n  var foo = new Foo();\n\n  foo.name;        //  => undefined\n  foo.age;         //  => undefined\n  foo.getName();   //  => 'fooname'\n  foo.getAge();    //  => 12\n```\n* 在内存中维持变量：如果缓存数据、柯里化。\n\n#### 性能问题\n需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露\n\n### \"use strict\";\n#### 声明方式\n* script 声明\n* function 声明\n#### 区别\n##### 语法错误\n如果代码中使用\"use strict\"开启了严格模式,则下面的情况都会在脚本运行之前抛出SyntaxError异常:\n\n* 八进制语法:var n = 023和var s = \"\\047\" (数字前不能有0)\n* with语句\n* 使用delete删除一个变量名(而不是属性名):delete myVariable\n* 使用eval或arguments作为变量名或函数名\n* 使用未来保留字(也许会在ECMAScript 6中使用):implements, interface, let, package, private, protected, public, static,和yield作为变量名或函数名\n* 在语句块中使用函数声明:if(a<b){ function f(){} }\n* 对象字面量中使用两个相同的属性名:{a: 1, b: 3, a: 7}\n* 函数形参中使用两个相同的参数名:function f(a, b, b){}\n\n#### 语义差异\n##### 函数调用中的this\n在普通的函数调用f()中,this的值会指向全局对象.在严格模式中,this的值会指向undefined.当函数通过call和apply调用时,如果传入的thisvalue参数是一个null和undefined除外的原始值(字符串,数字,布尔值),则this的值会成为那个原始值对应的包装对象,如果thisvalue参数的值是undefined或null,则this的值会指向全局对象.在严格模式中,this的值就是thisvalue参数的值,没有任何类型转换.\n\n##### arguments对象属性不与对应的形参变量同步更新\n在非严格模式中,修改arguments对象中某个索引属性的值,和这个属性对应的形参变量的值也会同时变化,反之亦然.这会让JavaScript的代码混淆引擎让代码变得更难读和理解。在严格模式中arguments 对象会以形参变量的拷贝的形式被创建和初始化，因此 arguments 对象的改变不会影响形参。\n\n##### eval相关的区别\n在严格模式中,eval不会在当前的作用域内创建新的变量.另外,传入eval的字符串参数也会按照严格模式来解析.你需要全面测试来确保没有代码收到影响。另外，如果你并不是为了解决一个非常实际的解决方案中，尽量不要使用eval。\n\n### this\n#### 全局上下文\n在全局运行上下文中（在任何函数体外部），this指代全局对象，无论是否在严格模式下。\n\n#### 函数上下文\n在函数内部，this的值取决于函数是如何调用的。\n##### 直接调用\n* 非严格模式 window\n* 严格模式 如果this未被执行的上下文环境定义，那么它将会默认为undefined。\n\n#### 对象方法中的 this\n对象方法中的this，指向调用该函数的对象（就近原则）\n\n#### 构造函数中的 this\n当一个函数被作为一个构造函数来使用（使用new关键字），它的this与即将被创建的新对象绑定。\n\n#### call / apply\n绑定到一个指定的对象上\n\n#### bind\nf.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数\n\n### 事件委托\n在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。\n\n#### 阻止继续冒泡\nstopPropagation()\n\n### AMD/CMD/UMD\n1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n在 RequireJS 里，模块有多种书写格式，推荐的是：\ndefine([\"./a\", \"./b\"], function(a, b) {\n  a.doSomething();\n  b.doSomething();\n});\n在 SeaJS 里，模块只有一种书写格式：\ndefine(function(require, exports, module) {\n  require(\"./a\").doSomething();\n  require(\"./b\").doSomething();\n});\n\n## CSS\n### 盒子模型\n里到外 padding border margin\n#### box-sizing\n属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。\n##### content-box\n默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。\n##### border-box\n width 和 height 属性包括内容，内边距和边框，但不包括外边距。\n\n\n### position有哪些属性，各自是什么特点？\n##### static\n该关键字指定元素使用正常的布局行为，即元素在文档流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。\n##### relative\n该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 未定义对 table, 元素应用的效果。\n##### absolute\n不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。\n##### fixed\n不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的栈上下文。当元素祖先的 transform  属性非 none 时，容器由视口改为该祖先。\n##### sticky\n盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。\n\n### 垂直居中\n#### table\n```css\n#wrapper {\n    display: table;\n}\n\n#cell {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n#### 绝对定位\n```css\n#content {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n```\n#### 行高（单行文本）\n#### flex\n```css\n#content{\n    display:flex;\n    align-item: center\n}\n```\n#### JS\n### 圣杯布局\nhttp://www.cnblogs.com/imwtr/p/4441741.html\n### flex\nhttp://www.cnblogs.com/imwtr/p/4441741.html\n### grid\nhttps://css-tricks.com/snippets/css/complete-guide-grid/\n\n## HTML\n### Style标签放置的最佳位置\nhead 里，提前加载样式\nw3c不建议放在body中，新增的style标签的“scoped”属性（兼容性不行，只有FF）\n\n### 常见行内元素和块级元素\n行内 ： b, em, strong,\na, br, img, span, sub, sup\nbutton, input, label, select, textarea\n\n块级元素：canvas，div，dl，footer，form，h1，header，hr，p，pre，section，table，ul，li\n\n### HTML5 新增标签\narticle, audio, video, canvas, footer, header, nav, section\n\n### Doctype\n<!DOCTYPE> 告知 浏览器 当前的 HTML (或 XML) 文档是哪一个版本. Doctype 是一条 声明, 而不是一个 标签; 也可以把它叫做 \"文档类型声明\", 或 简称为 \"DTD\".\n\n## 浏览器\n### IE和Chrome事件模型的区别\nChrome 捕获=>目标=>冒泡\nIE 目标=>冒泡\n### cookie和session区别\n1，session 在服务器端，cookie 在客户端（浏览器）\n2，session 默认被存在在服务器的一个文件里（不是内存）\n3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）\n4，session 可以放在 文件、数据库、或内存中都可以。\n5，用户验证这种场合一般会用 session\n\n### 浏览器缓存策略\n#### HTTP 缓存\nCache-Control:public, max-age=31536000\n#### HTML5 manifest\n#### localStorage\n#### Service Worker\n\n## HTTP\n### 处理跨域的方法\n#### Iframe + document.domain\n原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域\n限制：同域document提供的是页面间的互操作，需要载入iframe页面\n#### 有src的标签(统计代码)\n原理：所有具有src属性的HTML标签都是可以跨域的，包括img, script\n限制：需要创建一个DOM对象，只能用于GET方法\n#### JSONP\n原理：script是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数。\n限制：需要创建一个DOM对象并且添加到DOM树，只能用于GET方法\n.getJSON与.get的区别是前者会把responseText转换为JSON，而且当URL具有callback参数时， jQuery将会把它解释为一个JSONP请求，创建一个script标签来完成该请求。\n#### 跨域资源共享（CORS）\n原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求\n限制：浏览器需要支持HTML5，可以支持POST，PUT等方法\n\n### 常见HTTP状态码\n1.\t1xx消息\n2.\t2xx成功\n3.\t3xx重定向\n4.\t4xx客户端错误\n5.\t5xx服务器错误\n### GET和POST的区别\nGET在浏览器回退时是无害的，而POST会再次提交请求。\nGET产生的URL地址可以被Bookmark，而POST不可以。\nGET请求会被浏览器主动cache，而POST不会，除非手动设置。\nGET请求只能进行url编码，而POST支持多种编码方式。\nGET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\nGET请求在URL中传送的参数是有长度限制的，而POST么有。\n对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\nGET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\nGET参数通过URL传递，POST放在Request body中。\n\nHTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。\n\nGET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。\n\nGET产生一个TCP数据包；POST产生两个TCP数据包。\n\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n### url请求的过程\n浏览器查找域名的 IP 地址\n这一步包括 DNS 具体的查找过程，包括：浏览器缓存->系统缓存->路由器缓存…\n浏览器向 web 服务器发送一个 HTTP 请求 4. 服务器的永久重定向响应（从 http://example.com 到 http://www.example.com）\n浏览器跟踪重定向地址\n服务器处理请求\n服务器返回一个 HTTP 响应\n浏览器显示 HTML\n浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）\n浏览器发送异步请求\n\n## 服务器技术\n### websocket\n\n## 框架\n### antdesign\n### React的diff原理和组件化思想\n### state / props\nprops不变的，state变的。\n\n### f7优缺点\n### node版本的区别\n### angularjs 脏检查\nAngular将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变化。如果变化，则执行相应的watcher函数。等到model值不再变化，也就不会再有watch函数被触发，则一个digest循环结束。\n$watch: 监听scope model变化\n$apply: 触发“脏检查”\n$digest: 内部函数，执行脏检查。 digest循环包括2个while循环:\n处理$evalAsync的异步运算队列\n处理$watch的wathers队列\n","source":"_posts/前端面试题收集.md","raw":"---\ntitle: 前端面试题收集\ndate: 2017-05-08 21:43:47\ncategories: 技术\n---\n常见前端面试题整理贴\n<!--more-->\n## JS\n### js的继承实现\nJavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。\n#### 创建方式\n##### 构造器方法\n构造器其实就是一个普通的函数。当使用 new 操作符 来作用这个函数时，它就可以被称为构造方法（构造函数）。\n``` js\nfunction Graph() {\n  this.vertices = [];\n  this.edges = [];\n}\n\nGraph.prototype = {\n  addVertex: function(v){\n    this.vertices.push(v);\n  }\n};\n\nvar g = new Graph();\n// g是生成的对象,他的自身属性有'vertices'和'edges'.\n// 在g被实例化时,g.[[Prototype]]指向了Graph.prototype.\n```\n\n##### Object.create (es5)\nECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：\n``` js\nvar a = {a: 1};\n// a ---> Object.prototype ---> null\n\nvar b = Object.create(a);\n// b ---> a ---> Object.prototype ---> null\nconsole.log(b.a); // 1 (继承而来)\n\nvar c = Object.create(b);\n// c ---> b ---> a ---> Object.prototype ---> null\n\nvar d = Object.create(null);\n// d ---> null\nconsole.log(d.hasOwnProperty); // undefined, 因为d没有继承Object.prototype\n```\n\n##### class (es6)\n```js\nclass Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\nclass Square extends Polygon {\n  constructor(sideLength) {\n    super(sideLength, sideLength);\n  }\n  get area() {\n    return this.height * this.width;\n  }\n  set sideLength(newLength) {\n    this.height = newLength;\n    this.width = newLength;\n  }\n}\n\nvar square = new Square(2);\n```\n\n#### 性能\n遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。\nhasOwnProperty 是 JavaScript 中唯一一个只涉及对象自身属性而不会遍历原型链的方法。\n\n\n### js的闭包\n```\n闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。\n换句话说，这些函数可以“记忆”它被创建时候的环境。\n```\n闭包是指能够访问在封闭作用于内的变量的函数，这些函数可以保存它们被创建时的环境。\n``` js\nfunction makeFunc() {\n  var name = \"Mozilla\";\n  function displayName() {\n    alert(name);\n  }\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n```\n#### 闭包的应用\n* 访问私有属性\n```js\nvar Foo = function(){\n      var name = 'fooname';\n      var age = 12;\n      this.getName = function(){\n          return name;\n      };\n      this.getAge = function(){\n          return age;\n      };\n  };\n  var foo = new Foo();\n\n  foo.name;        //  => undefined\n  foo.age;         //  => undefined\n  foo.getName();   //  => 'fooname'\n  foo.getAge();    //  => 12\n```\n* 在内存中维持变量：如果缓存数据、柯里化。\n\n#### 性能问题\n需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露\n\n### \"use strict\";\n#### 声明方式\n* script 声明\n* function 声明\n#### 区别\n##### 语法错误\n如果代码中使用\"use strict\"开启了严格模式,则下面的情况都会在脚本运行之前抛出SyntaxError异常:\n\n* 八进制语法:var n = 023和var s = \"\\047\" (数字前不能有0)\n* with语句\n* 使用delete删除一个变量名(而不是属性名):delete myVariable\n* 使用eval或arguments作为变量名或函数名\n* 使用未来保留字(也许会在ECMAScript 6中使用):implements, interface, let, package, private, protected, public, static,和yield作为变量名或函数名\n* 在语句块中使用函数声明:if(a<b){ function f(){} }\n* 对象字面量中使用两个相同的属性名:{a: 1, b: 3, a: 7}\n* 函数形参中使用两个相同的参数名:function f(a, b, b){}\n\n#### 语义差异\n##### 函数调用中的this\n在普通的函数调用f()中,this的值会指向全局对象.在严格模式中,this的值会指向undefined.当函数通过call和apply调用时,如果传入的thisvalue参数是一个null和undefined除外的原始值(字符串,数字,布尔值),则this的值会成为那个原始值对应的包装对象,如果thisvalue参数的值是undefined或null,则this的值会指向全局对象.在严格模式中,this的值就是thisvalue参数的值,没有任何类型转换.\n\n##### arguments对象属性不与对应的形参变量同步更新\n在非严格模式中,修改arguments对象中某个索引属性的值,和这个属性对应的形参变量的值也会同时变化,反之亦然.这会让JavaScript的代码混淆引擎让代码变得更难读和理解。在严格模式中arguments 对象会以形参变量的拷贝的形式被创建和初始化，因此 arguments 对象的改变不会影响形参。\n\n##### eval相关的区别\n在严格模式中,eval不会在当前的作用域内创建新的变量.另外,传入eval的字符串参数也会按照严格模式来解析.你需要全面测试来确保没有代码收到影响。另外，如果你并不是为了解决一个非常实际的解决方案中，尽量不要使用eval。\n\n### this\n#### 全局上下文\n在全局运行上下文中（在任何函数体外部），this指代全局对象，无论是否在严格模式下。\n\n#### 函数上下文\n在函数内部，this的值取决于函数是如何调用的。\n##### 直接调用\n* 非严格模式 window\n* 严格模式 如果this未被执行的上下文环境定义，那么它将会默认为undefined。\n\n#### 对象方法中的 this\n对象方法中的this，指向调用该函数的对象（就近原则）\n\n#### 构造函数中的 this\n当一个函数被作为一个构造函数来使用（使用new关键字），它的this与即将被创建的新对象绑定。\n\n#### call / apply\n绑定到一个指定的对象上\n\n#### bind\nf.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数\n\n### 事件委托\n在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。\n\n#### 阻止继续冒泡\nstopPropagation()\n\n### AMD/CMD/UMD\n1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n在 RequireJS 里，模块有多种书写格式，推荐的是：\ndefine([\"./a\", \"./b\"], function(a, b) {\n  a.doSomething();\n  b.doSomething();\n});\n在 SeaJS 里，模块只有一种书写格式：\ndefine(function(require, exports, module) {\n  require(\"./a\").doSomething();\n  require(\"./b\").doSomething();\n});\n\n## CSS\n### 盒子模型\n里到外 padding border margin\n#### box-sizing\n属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。\n##### content-box\n默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。\n##### border-box\n width 和 height 属性包括内容，内边距和边框，但不包括外边距。\n\n\n### position有哪些属性，各自是什么特点？\n##### static\n该关键字指定元素使用正常的布局行为，即元素在文档流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。\n##### relative\n该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 未定义对 table, 元素应用的效果。\n##### absolute\n不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。\n##### fixed\n不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的栈上下文。当元素祖先的 transform  属性非 none 时，容器由视口改为该祖先。\n##### sticky\n盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。\n\n### 垂直居中\n#### table\n```css\n#wrapper {\n    display: table;\n}\n\n#cell {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n#### 绝对定位\n```css\n#content {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n```\n#### 行高（单行文本）\n#### flex\n```css\n#content{\n    display:flex;\n    align-item: center\n}\n```\n#### JS\n### 圣杯布局\nhttp://www.cnblogs.com/imwtr/p/4441741.html\n### flex\nhttp://www.cnblogs.com/imwtr/p/4441741.html\n### grid\nhttps://css-tricks.com/snippets/css/complete-guide-grid/\n\n## HTML\n### Style标签放置的最佳位置\nhead 里，提前加载样式\nw3c不建议放在body中，新增的style标签的“scoped”属性（兼容性不行，只有FF）\n\n### 常见行内元素和块级元素\n行内 ： b, em, strong,\na, br, img, span, sub, sup\nbutton, input, label, select, textarea\n\n块级元素：canvas，div，dl，footer，form，h1，header，hr，p，pre，section，table，ul，li\n\n### HTML5 新增标签\narticle, audio, video, canvas, footer, header, nav, section\n\n### Doctype\n<!DOCTYPE> 告知 浏览器 当前的 HTML (或 XML) 文档是哪一个版本. Doctype 是一条 声明, 而不是一个 标签; 也可以把它叫做 \"文档类型声明\", 或 简称为 \"DTD\".\n\n## 浏览器\n### IE和Chrome事件模型的区别\nChrome 捕获=>目标=>冒泡\nIE 目标=>冒泡\n### cookie和session区别\n1，session 在服务器端，cookie 在客户端（浏览器）\n2，session 默认被存在在服务器的一个文件里（不是内存）\n3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）\n4，session 可以放在 文件、数据库、或内存中都可以。\n5，用户验证这种场合一般会用 session\n\n### 浏览器缓存策略\n#### HTTP 缓存\nCache-Control:public, max-age=31536000\n#### HTML5 manifest\n#### localStorage\n#### Service Worker\n\n## HTTP\n### 处理跨域的方法\n#### Iframe + document.domain\n原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域\n限制：同域document提供的是页面间的互操作，需要载入iframe页面\n#### 有src的标签(统计代码)\n原理：所有具有src属性的HTML标签都是可以跨域的，包括img, script\n限制：需要创建一个DOM对象，只能用于GET方法\n#### JSONP\n原理：script是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数。\n限制：需要创建一个DOM对象并且添加到DOM树，只能用于GET方法\n.getJSON与.get的区别是前者会把responseText转换为JSON，而且当URL具有callback参数时， jQuery将会把它解释为一个JSONP请求，创建一个script标签来完成该请求。\n#### 跨域资源共享（CORS）\n原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求\n限制：浏览器需要支持HTML5，可以支持POST，PUT等方法\n\n### 常见HTTP状态码\n1.\t1xx消息\n2.\t2xx成功\n3.\t3xx重定向\n4.\t4xx客户端错误\n5.\t5xx服务器错误\n### GET和POST的区别\nGET在浏览器回退时是无害的，而POST会再次提交请求。\nGET产生的URL地址可以被Bookmark，而POST不可以。\nGET请求会被浏览器主动cache，而POST不会，除非手动设置。\nGET请求只能进行url编码，而POST支持多种编码方式。\nGET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\nGET请求在URL中传送的参数是有长度限制的，而POST么有。\n对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\nGET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\nGET参数通过URL传递，POST放在Request body中。\n\nHTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。\n\nGET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。\n\nGET产生一个TCP数据包；POST产生两个TCP数据包。\n\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n### url请求的过程\n浏览器查找域名的 IP 地址\n这一步包括 DNS 具体的查找过程，包括：浏览器缓存->系统缓存->路由器缓存…\n浏览器向 web 服务器发送一个 HTTP 请求 4. 服务器的永久重定向响应（从 http://example.com 到 http://www.example.com）\n浏览器跟踪重定向地址\n服务器处理请求\n服务器返回一个 HTTP 响应\n浏览器显示 HTML\n浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）\n浏览器发送异步请求\n\n## 服务器技术\n### websocket\n\n## 框架\n### antdesign\n### React的diff原理和组件化思想\n### state / props\nprops不变的，state变的。\n\n### f7优缺点\n### node版本的区别\n### angularjs 脏检查\nAngular将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变化。如果变化，则执行相应的watcher函数。等到model值不再变化，也就不会再有watch函数被触发，则一个digest循环结束。\n$watch: 监听scope model变化\n$apply: 触发“脏检查”\n$digest: 内部函数，执行脏检查。 digest循环包括2个while循环:\n处理$evalAsync的异步运算队列\n处理$watch的wathers队列\n","slug":"前端面试题收集","published":1,"updated":"2017-05-08T13:54:14.055Z","_id":"cj2g6hbqz000zl8vde2ywq88q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>常见前端面试题整理贴<br><a id=\"more\"></a></p><h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"js的继承实现\"><a href=\"#js的继承实现\" class=\"headerlink\" title=\"js的继承实现\"></a>js的继承实现</h3><p>JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p><h4 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h4><h5 id=\"构造器方法\"><a href=\"#构造器方法\" class=\"headerlink\" title=\"构造器方法\"></a>构造器方法</h5><p>构造器其实就是一个普通的函数。当使用 new 操作符 来作用这个函数时，它就可以被称为构造方法（构造函数）。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Graph</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.vertices = [];</div><div class=\"line\">  <span class=\"keyword\">this</span>.edges = [];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Graph.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">addVertex</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.vertices.push(v);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">new</span> Graph();</div><div class=\"line\"><span class=\"comment\">// g是生成的对象,他的自身属性有'vertices'和'edges'.</span></div><div class=\"line\"><span class=\"comment\">// 在g被实例化时,g.[[Prototype]]指向了Graph.prototype.</span></div></pre></td></tr></table></figure><p></p><h5 id=\"Object-create-es5\"><a href=\"#Object-create-es5\" class=\"headerlink\" title=\"Object.create (es5)\"></a>Object.create (es5)</h5><p>ECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.create(a);</div><div class=\"line\"><span class=\"comment\">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.a); <span class=\"comment\">// 1 (继承而来)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Object</span>.create(b);</div><div class=\"line\"><span class=\"comment\">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"comment\">// d ---&gt; null</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(d.hasOwnProperty); <span class=\"comment\">// undefined, 因为d没有继承Object.prototype</span></div></pre></td></tr></table></figure><p></p><h5 id=\"class-es6\"><a href=\"#class-es6\" class=\"headerlink\" title=\"class (es6)\"></a>class (es6)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(sideLength) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(sideLength, sideLength);</div><div class=\"line\">  &#125;</div><div class=\"line\">  get area() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.width;</div><div class=\"line\">  &#125;</div><div class=\"line\">  set sideLength(newLength) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = newLength;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = newLength;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"keyword\">new</span> Square(<span class=\"number\">2</span>);</div></pre></td></tr></table></figure><h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。<br>hasOwnProperty 是 JavaScript 中唯一一个只涉及对象自身属性而不会遍历原型链的方法。</p><h3 id=\"js的闭包\"><a href=\"#js的闭包\" class=\"headerlink\" title=\"js的闭包\"></a>js的闭包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。</div><div class=\"line\">换句话说，这些函数可以“记忆”它被创建时候的环境。</div></pre></td></tr></table></figure><p>闭包是指能够访问在封闭作用于内的变量的函数，这些函数可以保存它们被创建时的环境。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"Mozilla\"</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(name);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> displayName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myFunc = makeFunc();</div><div class=\"line\">myFunc();</div></pre></td></tr></table></figure><p></p><h4 id=\"闭包的应用\"><a href=\"#闭包的应用\" class=\"headerlink\" title=\"闭包的应用\"></a>闭包的应用</h4><ul><li><p>访问私有属性</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> name = <span class=\"string\">'fooname'</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> age = <span class=\"number\">12</span>;</div><div class=\"line\">      <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> name;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">this</span>.getAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> age;</div><div class=\"line\">      &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\"></div><div class=\"line\">  foo.name;        <span class=\"comment\">//  =&gt; undefined</span></div><div class=\"line\">  foo.age;         <span class=\"comment\">//  =&gt; undefined</span></div><div class=\"line\">  foo.getName();   <span class=\"comment\">//  =&gt; 'fooname'</span></div><div class=\"line\">  foo.getAge();    <span class=\"comment\">//  =&gt; 12</span></div></pre></td></tr></table></figure></li><li><p>在内存中维持变量：如果缓存数据、柯里化。</p></li></ul><h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><p>需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露</p><h3 id=\"“use-strict”\"><a href=\"#“use-strict”\" class=\"headerlink\" title=\"“use strict”;\"></a>“use strict”;</h3><h4 id=\"声明方式\"><a href=\"#声明方式\" class=\"headerlink\" title=\"声明方式\"></a>声明方式</h4><ul><li>script 声明</li><li><p>function 声明</p><h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><h5 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h5><p>如果代码中使用”use strict”开启了严格模式,则下面的情况都会在脚本运行之前抛出SyntaxError异常:</p></li><li><p>八进制语法:var n = 023和var s = “\\047” (数字前不能有0)</p></li><li>with语句</li><li>使用delete删除一个变量名(而不是属性名):delete myVariable</li><li>使用eval或arguments作为变量名或函数名</li><li>使用未来保留字(也许会在ECMAScript 6中使用):implements, interface, let, package, private, protected, public, static,和yield作为变量名或函数名</li><li>在语句块中使用函数声明:if(a&lt;b){ function f(){} }</li><li>对象字面量中使用两个相同的属性名:{a: 1, b: 3, a: 7}</li><li>函数形参中使用两个相同的参数名:function f(a, b, b){}</li></ul><h4 id=\"语义差异\"><a href=\"#语义差异\" class=\"headerlink\" title=\"语义差异\"></a>语义差异</h4><h5 id=\"函数调用中的this\"><a href=\"#函数调用中的this\" class=\"headerlink\" title=\"函数调用中的this\"></a>函数调用中的this</h5><p>在普通的函数调用f()中,this的值会指向全局对象.在严格模式中,this的值会指向undefined.当函数通过call和apply调用时,如果传入的thisvalue参数是一个null和undefined除外的原始值(字符串,数字,布尔值),则this的值会成为那个原始值对应的包装对象,如果thisvalue参数的值是undefined或null,则this的值会指向全局对象.在严格模式中,this的值就是thisvalue参数的值,没有任何类型转换.</p><h5 id=\"arguments对象属性不与对应的形参变量同步更新\"><a href=\"#arguments对象属性不与对应的形参变量同步更新\" class=\"headerlink\" title=\"arguments对象属性不与对应的形参变量同步更新\"></a>arguments对象属性不与对应的形参变量同步更新</h5><p>在非严格模式中,修改arguments对象中某个索引属性的值,和这个属性对应的形参变量的值也会同时变化,反之亦然.这会让JavaScript的代码混淆引擎让代码变得更难读和理解。在严格模式中arguments 对象会以形参变量的拷贝的形式被创建和初始化，因此 arguments 对象的改变不会影响形参。</p><h5 id=\"eval相关的区别\"><a href=\"#eval相关的区别\" class=\"headerlink\" title=\"eval相关的区别\"></a>eval相关的区别</h5><p>在严格模式中,eval不会在当前的作用域内创建新的变量.另外,传入eval的字符串参数也会按照严格模式来解析.你需要全面测试来确保没有代码收到影响。另外，如果你并不是为了解决一个非常实际的解决方案中，尽量不要使用eval。</p><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><h4 id=\"全局上下文\"><a href=\"#全局上下文\" class=\"headerlink\" title=\"全局上下文\"></a>全局上下文</h4><p>在全局运行上下文中（在任何函数体外部），this指代全局对象，无论是否在严格模式下。</p><h4 id=\"函数上下文\"><a href=\"#函数上下文\" class=\"headerlink\" title=\"函数上下文\"></a>函数上下文</h4><p>在函数内部，this的值取决于函数是如何调用的。</p><h5 id=\"直接调用\"><a href=\"#直接调用\" class=\"headerlink\" title=\"直接调用\"></a>直接调用</h5><ul><li>非严格模式 window</li><li>严格模式 如果this未被执行的上下文环境定义，那么它将会默认为undefined。</li></ul><h4 id=\"对象方法中的-this\"><a href=\"#对象方法中的-this\" class=\"headerlink\" title=\"对象方法中的 this\"></a>对象方法中的 this</h4><p>对象方法中的this，指向调用该函数的对象（就近原则）</p><h4 id=\"构造函数中的-this\"><a href=\"#构造函数中的-this\" class=\"headerlink\" title=\"构造函数中的 this\"></a>构造函数中的 this</h4><p>当一个函数被作为一个构造函数来使用（使用new关键字），它的this与即将被创建的新对象绑定。</p><h4 id=\"call-apply\"><a href=\"#call-apply\" class=\"headerlink\" title=\"call / apply\"></a>call / apply</h4><p>绑定到一个指定的对象上</p><h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><p>f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数</p><h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。</p><h4 id=\"阻止继续冒泡\"><a href=\"#阻止继续冒泡\" class=\"headerlink\" title=\"阻止继续冒泡\"></a>阻止继续冒泡</h4><p>stopPropagation()</p><h3 id=\"AMD-CMD-UMD\"><a href=\"#AMD-CMD-UMD\" class=\"headerlink\" title=\"AMD/CMD/UMD\"></a>AMD/CMD/UMD</h3><ol><li>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：<br>在 RequireJS 里，模块有多种书写格式，推荐的是：<br>define([“./a”, “./b”], function(a, b) {<br>a.doSomething();<br>b.doSomething();<br>});<br>在 SeaJS 里，模块只有一种书写格式：<br>define(function(require, exports, module) {<br>require(“./a”).doSomething();<br>require(“./b”).doSomething();<br>});</li></ol><h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>里到外 padding border margin</p><h4 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h4><p>属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。</p><h5 id=\"content-box\"><a href=\"#content-box\" class=\"headerlink\" title=\"content-box\"></a>content-box</h5><p>默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。</p><h5 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h5><p>width 和 height 属性包括内容，内边距和边框，但不包括外边距。</p><h3 id=\"position有哪些属性，各自是什么特点？\"><a href=\"#position有哪些属性，各自是什么特点？\" class=\"headerlink\" title=\"position有哪些属性，各自是什么特点？\"></a>position有哪些属性，各自是什么特点？</h3><h5 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h5><p>该关键字指定元素使用正常的布局行为，即元素在文档流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</p><h5 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h5><p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 未定义对 table, 元素应用的效果。</p><h5 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h5><p>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p><h5 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h5><p>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的栈上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。</p><h5 id=\"sticky\"><a href=\"#sticky\" class=\"headerlink\" title=\"sticky\"></a>sticky</h5><p>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</p><h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><h4 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#cell</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#content</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"行高（单行文本）\"><a href=\"#行高（单行文本）\" class=\"headerlink\" title=\"行高（单行文本）\"></a>行高（单行文本）</h4><h4 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#content</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>:flex;</div><div class=\"line\">    <span class=\"attribute\">align-item</span>: center</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"JS-1\"><a href=\"#JS-1\" class=\"headerlink\" title=\"JS\"></a>JS</h4><h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><p><a href=\"http://www.cnblogs.com/imwtr/p/4441741.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/imwtr/p/4441741.html</a></p><h3 id=\"flex-1\"><a href=\"#flex-1\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p><a href=\"http://www.cnblogs.com/imwtr/p/4441741.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/imwtr/p/4441741.html</a></p><h3 id=\"grid\"><a href=\"#grid\" class=\"headerlink\" title=\"grid\"></a>grid</h3><p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\" rel=\"external\">https://css-tricks.com/snippets/css/complete-guide-grid/</a></p><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"Style标签放置的最佳位置\"><a href=\"#Style标签放置的最佳位置\" class=\"headerlink\" title=\"Style标签放置的最佳位置\"></a>Style标签放置的最佳位置</h3><p>head 里，提前加载样式<br>w3c不建议放在body中，新增的style标签的“scoped”属性（兼容性不行，只有FF）</p><h3 id=\"常见行内元素和块级元素\"><a href=\"#常见行内元素和块级元素\" class=\"headerlink\" title=\"常见行内元素和块级元素\"></a>常见行内元素和块级元素</h3><p>行内 ： b, em, strong,<br>a, br, img, span, sub, sup<br>button, input, label, select, textarea</p><p>块级元素：canvas，div，dl，footer，form，h1，header，hr，p，pre，section，table，ul，li</p><h3 id=\"HTML5-新增标签\"><a href=\"#HTML5-新增标签\" class=\"headerlink\" title=\"HTML5 新增标签\"></a>HTML5 新增标签</h3><p>article, audio, video, canvas, footer, header, nav, section</p><h3 id=\"Doctype\"><a href=\"#Doctype\" class=\"headerlink\" title=\"Doctype\"></a>Doctype</h3><p>&lt;!DOCTYPE&gt; 告知 浏览器 当前的 HTML (或 XML) 文档是哪一个版本. Doctype 是一条 声明, 而不是一个 标签; 也可以把它叫做 “文档类型声明”, 或 简称为 “DTD”.</p><h2 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h2><h3 id=\"IE和Chrome事件模型的区别\"><a href=\"#IE和Chrome事件模型的区别\" class=\"headerlink\" title=\"IE和Chrome事件模型的区别\"></a>IE和Chrome事件模型的区别</h3><p>Chrome 捕获=&gt;目标=&gt;冒泡<br>IE 目标=&gt;冒泡</p><h3 id=\"cookie和session区别\"><a href=\"#cookie和session区别\" class=\"headerlink\" title=\"cookie和session区别\"></a>cookie和session区别</h3><p>1，session 在服务器端，cookie 在客户端（浏览器）<br>2，session 默认被存在在服务器的一个文件里（不是内存）<br>3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）<br>4，session 可以放在 文件、数据库、或内存中都可以。<br>5，用户验证这种场合一般会用 session</p><h3 id=\"浏览器缓存策略\"><a href=\"#浏览器缓存策略\" class=\"headerlink\" title=\"浏览器缓存策略\"></a>浏览器缓存策略</h3><h4 id=\"HTTP-缓存\"><a href=\"#HTTP-缓存\" class=\"headerlink\" title=\"HTTP 缓存\"></a>HTTP 缓存</h4><p>Cache-Control:public, max-age=31536000</p><h4 id=\"HTML5-manifest\"><a href=\"#HTML5-manifest\" class=\"headerlink\" title=\"HTML5 manifest\"></a>HTML5 manifest</h4><h4 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h4><h4 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h4><h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><h3 id=\"处理跨域的方法\"><a href=\"#处理跨域的方法\" class=\"headerlink\" title=\"处理跨域的方法\"></a>处理跨域的方法</h3><h4 id=\"Iframe-document-domain\"><a href=\"#Iframe-document-domain\" class=\"headerlink\" title=\"Iframe + document.domain\"></a>Iframe + document.domain</h4><p>原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域<br>限制：同域document提供的是页面间的互操作，需要载入iframe页面</p><h4 id=\"有src的标签-统计代码\"><a href=\"#有src的标签-统计代码\" class=\"headerlink\" title=\"有src的标签(统计代码)\"></a>有src的标签(统计代码)</h4><p>原理：所有具有src属性的HTML标签都是可以跨域的，包括img, script<br>限制：需要创建一个DOM对象，只能用于GET方法</p><h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>原理：script是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数。<br>限制：需要创建一个DOM对象并且添加到DOM树，只能用于GET方法<br>.getJSON与.get的区别是前者会把responseText转换为JSON，而且当URL具有callback参数时， jQuery将会把它解释为一个JSONP请求，创建一个script标签来完成该请求。</p><h4 id=\"跨域资源共享（CORS）\"><a href=\"#跨域资源共享（CORS）\" class=\"headerlink\" title=\"跨域资源共享（CORS）\"></a>跨域资源共享（CORS）</h4><p>原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求<br>限制：浏览器需要支持HTML5，可以支持POST，PUT等方法</p><h3 id=\"常见HTTP状态码\"><a href=\"#常见HTTP状态码\" class=\"headerlink\" title=\"常见HTTP状态码\"></a>常见HTTP状态码</h3><ol><li>1xx消息</li><li>2xx成功</li><li>3xx重定向</li><li>4xx客户端错误</li><li>5xx服务器错误<h3 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h3>GET在浏览器回退时是无害的，而POST会再次提交请求。<br>GET产生的URL地址可以被Bookmark，而POST不可以。<br>GET请求会被浏览器主动cache，而POST不会，除非手动设置。<br>GET请求只能进行url编码，而POST支持多种编码方式。<br>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br>GET请求在URL中传送的参数是有长度限制的，而POST么有。<br>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。<br>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。<br>GET参数通过URL传递，POST放在Request body中。</li></ol><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p><p>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><h3 id=\"url请求的过程\"><a href=\"#url请求的过程\" class=\"headerlink\" title=\"url请求的过程\"></a>url请求的过程</h3><p>浏览器查找域名的 IP 地址<br>这一步包括 DNS 具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…<br>浏览器向 web 服务器发送一个 HTTP 请求 4. 服务器的永久重定向响应（从 <a href=\"http://example.com\" target=\"_blank\" rel=\"external\">http://example.com</a> 到 <a href=\"http://www.example.com）\" target=\"_blank\" rel=\"external\">http://www.example.com）</a><br>浏览器跟踪重定向地址<br>服务器处理请求<br>服务器返回一个 HTTP 响应<br>浏览器显示 HTML<br>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）<br>浏览器发送异步请求</p><h2 id=\"服务器技术\"><a href=\"#服务器技术\" class=\"headerlink\" title=\"服务器技术\"></a>服务器技术</h2><h3 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h3><h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><h3 id=\"antdesign\"><a href=\"#antdesign\" class=\"headerlink\" title=\"antdesign\"></a>antdesign</h3><h3 id=\"React的diff原理和组件化思想\"><a href=\"#React的diff原理和组件化思想\" class=\"headerlink\" title=\"React的diff原理和组件化思想\"></a>React的diff原理和组件化思想</h3><h3 id=\"state-props\"><a href=\"#state-props\" class=\"headerlink\" title=\"state / props\"></a>state / props</h3><p>props不变的，state变的。</p><h3 id=\"f7优缺点\"><a href=\"#f7优缺点\" class=\"headerlink\" title=\"f7优缺点\"></a>f7优缺点</h3><h3 id=\"node版本的区别\"><a href=\"#node版本的区别\" class=\"headerlink\" title=\"node版本的区别\"></a>node版本的区别</h3><h3 id=\"angularjs-脏检查\"><a href=\"#angularjs-脏检查\" class=\"headerlink\" title=\"angularjs 脏检查\"></a>angularjs 脏检查</h3><p>Angular将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变化。如果变化，则执行相应的watcher函数。等到model值不再变化，也就不会再有watch函数被触发，则一个digest循环结束。<br>$watch: 监听scope model变化<br>$apply: 触发“脏检查”<br>$digest: 内部函数，执行脏检查。 digest循环包括2个while循环:<br>处理$evalAsync的异步运算队列<br>处理$watch的wathers队列</p>","excerpt":"<p>常见前端面试题整理贴<br>","more":"</p><h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"js的继承实现\"><a href=\"#js的继承实现\" class=\"headerlink\" title=\"js的继承实现\"></a>js的继承实现</h3><p>JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p><h4 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h4><h5 id=\"构造器方法\"><a href=\"#构造器方法\" class=\"headerlink\" title=\"构造器方法\"></a>构造器方法</h5><p>构造器其实就是一个普通的函数。当使用 new 操作符 来作用这个函数时，它就可以被称为构造方法（构造函数）。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Graph</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.vertices = [];</div><div class=\"line\">  <span class=\"keyword\">this</span>.edges = [];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Graph.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">addVertex</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.vertices.push(v);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">new</span> Graph();</div><div class=\"line\"><span class=\"comment\">// g是生成的对象,他的自身属性有'vertices'和'edges'.</span></div><div class=\"line\"><span class=\"comment\">// 在g被实例化时,g.[[Prototype]]指向了Graph.prototype.</span></div></pre></td></tr></table></figure><p></p><h5 id=\"Object-create-es5\"><a href=\"#Object-create-es5\" class=\"headerlink\" title=\"Object.create (es5)\"></a>Object.create (es5)</h5><p>ECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.create(a);</div><div class=\"line\"><span class=\"comment\">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.a); <span class=\"comment\">// 1 (继承而来)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Object</span>.create(b);</div><div class=\"line\"><span class=\"comment\">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"comment\">// d ---&gt; null</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(d.hasOwnProperty); <span class=\"comment\">// undefined, 因为d没有继承Object.prototype</span></div></pre></td></tr></table></figure><p></p><h5 id=\"class-es6\"><a href=\"#class-es6\" class=\"headerlink\" title=\"class (es6)\"></a>class (es6)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(sideLength) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(sideLength, sideLength);</div><div class=\"line\">  &#125;</div><div class=\"line\">  get area() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.width;</div><div class=\"line\">  &#125;</div><div class=\"line\">  set sideLength(newLength) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = newLength;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = newLength;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"keyword\">new</span> Square(<span class=\"number\">2</span>);</div></pre></td></tr></table></figure><h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。<br>hasOwnProperty 是 JavaScript 中唯一一个只涉及对象自身属性而不会遍历原型链的方法。</p><h3 id=\"js的闭包\"><a href=\"#js的闭包\" class=\"headerlink\" title=\"js的闭包\"></a>js的闭包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。</div><div class=\"line\">换句话说，这些函数可以“记忆”它被创建时候的环境。</div></pre></td></tr></table></figure><p>闭包是指能够访问在封闭作用于内的变量的函数，这些函数可以保存它们被创建时的环境。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"Mozilla\"</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(name);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> displayName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myFunc = makeFunc();</div><div class=\"line\">myFunc();</div></pre></td></tr></table></figure><p></p><h4 id=\"闭包的应用\"><a href=\"#闭包的应用\" class=\"headerlink\" title=\"闭包的应用\"></a>闭包的应用</h4><ul><li><p>访问私有属性</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> name = <span class=\"string\">'fooname'</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> age = <span class=\"number\">12</span>;</div><div class=\"line\">      <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> name;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">this</span>.getAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> age;</div><div class=\"line\">      &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\"></div><div class=\"line\">  foo.name;        <span class=\"comment\">//  =&gt; undefined</span></div><div class=\"line\">  foo.age;         <span class=\"comment\">//  =&gt; undefined</span></div><div class=\"line\">  foo.getName();   <span class=\"comment\">//  =&gt; 'fooname'</span></div><div class=\"line\">  foo.getAge();    <span class=\"comment\">//  =&gt; 12</span></div></pre></td></tr></table></figure></li><li><p>在内存中维持变量：如果缓存数据、柯里化。</p></li></ul><h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><p>需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露</p><h3 id=\"“use-strict”\"><a href=\"#“use-strict”\" class=\"headerlink\" title=\"“use strict”;\"></a>“use strict”;</h3><h4 id=\"声明方式\"><a href=\"#声明方式\" class=\"headerlink\" title=\"声明方式\"></a>声明方式</h4><ul><li>script 声明</li><li><p>function 声明</p><h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><h5 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h5><p>如果代码中使用”use strict”开启了严格模式,则下面的情况都会在脚本运行之前抛出SyntaxError异常:</p></li><li><p>八进制语法:var n = 023和var s = “\\047” (数字前不能有0)</p></li><li>with语句</li><li>使用delete删除一个变量名(而不是属性名):delete myVariable</li><li>使用eval或arguments作为变量名或函数名</li><li>使用未来保留字(也许会在ECMAScript 6中使用):implements, interface, let, package, private, protected, public, static,和yield作为变量名或函数名</li><li>在语句块中使用函数声明:if(a&lt;b){ function f(){} }</li><li>对象字面量中使用两个相同的属性名:{a: 1, b: 3, a: 7}</li><li>函数形参中使用两个相同的参数名:function f(a, b, b){}</li></ul><h4 id=\"语义差异\"><a href=\"#语义差异\" class=\"headerlink\" title=\"语义差异\"></a>语义差异</h4><h5 id=\"函数调用中的this\"><a href=\"#函数调用中的this\" class=\"headerlink\" title=\"函数调用中的this\"></a>函数调用中的this</h5><p>在普通的函数调用f()中,this的值会指向全局对象.在严格模式中,this的值会指向undefined.当函数通过call和apply调用时,如果传入的thisvalue参数是一个null和undefined除外的原始值(字符串,数字,布尔值),则this的值会成为那个原始值对应的包装对象,如果thisvalue参数的值是undefined或null,则this的值会指向全局对象.在严格模式中,this的值就是thisvalue参数的值,没有任何类型转换.</p><h5 id=\"arguments对象属性不与对应的形参变量同步更新\"><a href=\"#arguments对象属性不与对应的形参变量同步更新\" class=\"headerlink\" title=\"arguments对象属性不与对应的形参变量同步更新\"></a>arguments对象属性不与对应的形参变量同步更新</h5><p>在非严格模式中,修改arguments对象中某个索引属性的值,和这个属性对应的形参变量的值也会同时变化,反之亦然.这会让JavaScript的代码混淆引擎让代码变得更难读和理解。在严格模式中arguments 对象会以形参变量的拷贝的形式被创建和初始化，因此 arguments 对象的改变不会影响形参。</p><h5 id=\"eval相关的区别\"><a href=\"#eval相关的区别\" class=\"headerlink\" title=\"eval相关的区别\"></a>eval相关的区别</h5><p>在严格模式中,eval不会在当前的作用域内创建新的变量.另外,传入eval的字符串参数也会按照严格模式来解析.你需要全面测试来确保没有代码收到影响。另外，如果你并不是为了解决一个非常实际的解决方案中，尽量不要使用eval。</p><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><h4 id=\"全局上下文\"><a href=\"#全局上下文\" class=\"headerlink\" title=\"全局上下文\"></a>全局上下文</h4><p>在全局运行上下文中（在任何函数体外部），this指代全局对象，无论是否在严格模式下。</p><h4 id=\"函数上下文\"><a href=\"#函数上下文\" class=\"headerlink\" title=\"函数上下文\"></a>函数上下文</h4><p>在函数内部，this的值取决于函数是如何调用的。</p><h5 id=\"直接调用\"><a href=\"#直接调用\" class=\"headerlink\" title=\"直接调用\"></a>直接调用</h5><ul><li>非严格模式 window</li><li>严格模式 如果this未被执行的上下文环境定义，那么它将会默认为undefined。</li></ul><h4 id=\"对象方法中的-this\"><a href=\"#对象方法中的-this\" class=\"headerlink\" title=\"对象方法中的 this\"></a>对象方法中的 this</h4><p>对象方法中的this，指向调用该函数的对象（就近原则）</p><h4 id=\"构造函数中的-this\"><a href=\"#构造函数中的-this\" class=\"headerlink\" title=\"构造函数中的 this\"></a>构造函数中的 this</h4><p>当一个函数被作为一个构造函数来使用（使用new关键字），它的this与即将被创建的新对象绑定。</p><h4 id=\"call-apply\"><a href=\"#call-apply\" class=\"headerlink\" title=\"call / apply\"></a>call / apply</h4><p>绑定到一个指定的对象上</p><h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><p>f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数</p><h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。</p><h4 id=\"阻止继续冒泡\"><a href=\"#阻止继续冒泡\" class=\"headerlink\" title=\"阻止继续冒泡\"></a>阻止继续冒泡</h4><p>stopPropagation()</p><h3 id=\"AMD-CMD-UMD\"><a href=\"#AMD-CMD-UMD\" class=\"headerlink\" title=\"AMD/CMD/UMD\"></a>AMD/CMD/UMD</h3><ol><li>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：<br>在 RequireJS 里，模块有多种书写格式，推荐的是：<br>define([“./a”, “./b”], function(a, b) {<br>a.doSomething();<br>b.doSomething();<br>});<br>在 SeaJS 里，模块只有一种书写格式：<br>define(function(require, exports, module) {<br>require(“./a”).doSomething();<br>require(“./b”).doSomething();<br>});</li></ol><h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>里到外 padding border margin</p><h4 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h4><p>属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。</p><h5 id=\"content-box\"><a href=\"#content-box\" class=\"headerlink\" title=\"content-box\"></a>content-box</h5><p>默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。</p><h5 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h5><p>width 和 height 属性包括内容，内边距和边框，但不包括外边距。</p><h3 id=\"position有哪些属性，各自是什么特点？\"><a href=\"#position有哪些属性，各自是什么特点？\" class=\"headerlink\" title=\"position有哪些属性，各自是什么特点？\"></a>position有哪些属性，各自是什么特点？</h3><h5 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h5><p>该关键字指定元素使用正常的布局行为，即元素在文档流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</p><h5 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h5><p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 未定义对 table, 元素应用的效果。</p><h5 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h5><p>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p><h5 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h5><p>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的栈上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。</p><h5 id=\"sticky\"><a href=\"#sticky\" class=\"headerlink\" title=\"sticky\"></a>sticky</h5><p>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</p><h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><h4 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#cell</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#content</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"行高（单行文本）\"><a href=\"#行高（单行文本）\" class=\"headerlink\" title=\"行高（单行文本）\"></a>行高（单行文本）</h4><h4 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#content</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>:flex;</div><div class=\"line\">    <span class=\"attribute\">align-item</span>: center</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"JS-1\"><a href=\"#JS-1\" class=\"headerlink\" title=\"JS\"></a>JS</h4><h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><p><a href=\"http://www.cnblogs.com/imwtr/p/4441741.html\">http://www.cnblogs.com/imwtr/p/4441741.html</a></p><h3 id=\"flex-1\"><a href=\"#flex-1\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p><a href=\"http://www.cnblogs.com/imwtr/p/4441741.html\">http://www.cnblogs.com/imwtr/p/4441741.html</a></p><h3 id=\"grid\"><a href=\"#grid\" class=\"headerlink\" title=\"grid\"></a>grid</h3><p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">https://css-tricks.com/snippets/css/complete-guide-grid/</a></p><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"Style标签放置的最佳位置\"><a href=\"#Style标签放置的最佳位置\" class=\"headerlink\" title=\"Style标签放置的最佳位置\"></a>Style标签放置的最佳位置</h3><p>head 里，提前加载样式<br>w3c不建议放在body中，新增的style标签的“scoped”属性（兼容性不行，只有FF）</p><h3 id=\"常见行内元素和块级元素\"><a href=\"#常见行内元素和块级元素\" class=\"headerlink\" title=\"常见行内元素和块级元素\"></a>常见行内元素和块级元素</h3><p>行内 ： b, em, strong,<br>a, br, img, span, sub, sup<br>button, input, label, select, textarea</p><p>块级元素：canvas，div，dl，footer，form，h1，header，hr，p，pre，section，table，ul，li</p><h3 id=\"HTML5-新增标签\"><a href=\"#HTML5-新增标签\" class=\"headerlink\" title=\"HTML5 新增标签\"></a>HTML5 新增标签</h3><p>article, audio, video, canvas, footer, header, nav, section</p><h3 id=\"Doctype\"><a href=\"#Doctype\" class=\"headerlink\" title=\"Doctype\"></a>Doctype</h3><p>&lt;!DOCTYPE&gt; 告知 浏览器 当前的 HTML (或 XML) 文档是哪一个版本. Doctype 是一条 声明, 而不是一个 标签; 也可以把它叫做 “文档类型声明”, 或 简称为 “DTD”.</p><h2 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h2><h3 id=\"IE和Chrome事件模型的区别\"><a href=\"#IE和Chrome事件模型的区别\" class=\"headerlink\" title=\"IE和Chrome事件模型的区别\"></a>IE和Chrome事件模型的区别</h3><p>Chrome 捕获=&gt;目标=&gt;冒泡<br>IE 目标=&gt;冒泡</p><h3 id=\"cookie和session区别\"><a href=\"#cookie和session区别\" class=\"headerlink\" title=\"cookie和session区别\"></a>cookie和session区别</h3><p>1，session 在服务器端，cookie 在客户端（浏览器）<br>2，session 默认被存在在服务器的一个文件里（不是内存）<br>3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）<br>4，session 可以放在 文件、数据库、或内存中都可以。<br>5，用户验证这种场合一般会用 session</p><h3 id=\"浏览器缓存策略\"><a href=\"#浏览器缓存策略\" class=\"headerlink\" title=\"浏览器缓存策略\"></a>浏览器缓存策略</h3><h4 id=\"HTTP-缓存\"><a href=\"#HTTP-缓存\" class=\"headerlink\" title=\"HTTP 缓存\"></a>HTTP 缓存</h4><p>Cache-Control:public, max-age=31536000</p><h4 id=\"HTML5-manifest\"><a href=\"#HTML5-manifest\" class=\"headerlink\" title=\"HTML5 manifest\"></a>HTML5 manifest</h4><h4 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h4><h4 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h4><h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><h3 id=\"处理跨域的方法\"><a href=\"#处理跨域的方法\" class=\"headerlink\" title=\"处理跨域的方法\"></a>处理跨域的方法</h3><h4 id=\"Iframe-document-domain\"><a href=\"#Iframe-document-domain\" class=\"headerlink\" title=\"Iframe + document.domain\"></a>Iframe + document.domain</h4><p>原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域<br>限制：同域document提供的是页面间的互操作，需要载入iframe页面</p><h4 id=\"有src的标签-统计代码\"><a href=\"#有src的标签-统计代码\" class=\"headerlink\" title=\"有src的标签(统计代码)\"></a>有src的标签(统计代码)</h4><p>原理：所有具有src属性的HTML标签都是可以跨域的，包括img, script<br>限制：需要创建一个DOM对象，只能用于GET方法</p><h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>原理：script是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数。<br>限制：需要创建一个DOM对象并且添加到DOM树，只能用于GET方法<br>.getJSON与.get的区别是前者会把responseText转换为JSON，而且当URL具有callback参数时， jQuery将会把它解释为一个JSONP请求，创建一个script标签来完成该请求。</p><h4 id=\"跨域资源共享（CORS）\"><a href=\"#跨域资源共享（CORS）\" class=\"headerlink\" title=\"跨域资源共享（CORS）\"></a>跨域资源共享（CORS）</h4><p>原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求<br>限制：浏览器需要支持HTML5，可以支持POST，PUT等方法</p><h3 id=\"常见HTTP状态码\"><a href=\"#常见HTTP状态码\" class=\"headerlink\" title=\"常见HTTP状态码\"></a>常见HTTP状态码</h3><ol><li>1xx消息</li><li>2xx成功</li><li>3xx重定向</li><li>4xx客户端错误</li><li>5xx服务器错误<h3 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h3>GET在浏览器回退时是无害的，而POST会再次提交请求。<br>GET产生的URL地址可以被Bookmark，而POST不可以。<br>GET请求会被浏览器主动cache，而POST不会，除非手动设置。<br>GET请求只能进行url编码，而POST支持多种编码方式。<br>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br>GET请求在URL中传送的参数是有长度限制的，而POST么有。<br>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。<br>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。<br>GET参数通过URL传递，POST放在Request body中。</li></ol><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p><p>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><h3 id=\"url请求的过程\"><a href=\"#url请求的过程\" class=\"headerlink\" title=\"url请求的过程\"></a>url请求的过程</h3><p>浏览器查找域名的 IP 地址<br>这一步包括 DNS 具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…<br>浏览器向 web 服务器发送一个 HTTP 请求 4. 服务器的永久重定向响应（从 <a href=\"http://example.com\">http://example.com</a> 到 <a href=\"http://www.example.com）\">http://www.example.com）</a><br>浏览器跟踪重定向地址<br>服务器处理请求<br>服务器返回一个 HTTP 响应<br>浏览器显示 HTML<br>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）<br>浏览器发送异步请求</p><h2 id=\"服务器技术\"><a href=\"#服务器技术\" class=\"headerlink\" title=\"服务器技术\"></a>服务器技术</h2><h3 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h3><h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><h3 id=\"antdesign\"><a href=\"#antdesign\" class=\"headerlink\" title=\"antdesign\"></a>antdesign</h3><h3 id=\"React的diff原理和组件化思想\"><a href=\"#React的diff原理和组件化思想\" class=\"headerlink\" title=\"React的diff原理和组件化思想\"></a>React的diff原理和组件化思想</h3><h3 id=\"state-props\"><a href=\"#state-props\" class=\"headerlink\" title=\"state / props\"></a>state / props</h3><p>props不变的，state变的。</p><h3 id=\"f7优缺点\"><a href=\"#f7优缺点\" class=\"headerlink\" title=\"f7优缺点\"></a>f7优缺点</h3><h3 id=\"node版本的区别\"><a href=\"#node版本的区别\" class=\"headerlink\" title=\"node版本的区别\"></a>node版本的区别</h3><h3 id=\"angularjs-脏检查\"><a href=\"#angularjs-脏检查\" class=\"headerlink\" title=\"angularjs 脏检查\"></a>angularjs 脏检查</h3><p>Angular将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变化。如果变化，则执行相应的watcher函数。等到model值不再变化，也就不会再有watch函数被触发，则一个digest循环结束。<br>$watch: 监听scope model变化<br>$apply: 触发“脏检查”<br>$digest: 内部函数，执行脏检查。 digest循环包括2个while循环:<br>处理$evalAsync的异步运算队列<br>处理$watch的wathers队列</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2g6fusb0005l8vdhfpvv4kf","category_id":"cj2g6fus80002l8vdjolkjle9","_id":"cj2g6fusi000al8vdultakg7f"},{"post_id":"cj2g6fus20000l8vdfgv4ubyq","category_id":"cj2g6fus80002l8vdjolkjle9","_id":"cj2g6fusl000el8vdp1uuynv9"},{"post_id":"cj2g6fusg0008l8vd8tmv08rb","category_id":"cj2g6fus80002l8vdjolkjle9","_id":"cj2g6fusm000hl8vd1g5itmqg"},{"post_id":"cj2g6fusa0003l8vdoud2cpeu","category_id":"cj2g6fus80002l8vdjolkjle9","_id":"cj2g6fuss000ll8vdxv3lh26y"},{"post_id":"cj2g6fusl000fl8vd2eaw9irh","category_id":"cj2g6fus80002l8vdjolkjle9","_id":"cj2g6fusu000ol8vd4lbvkl7s"},{"post_id":"cj2g6fusd0006l8vdtow4ihdt","category_id":"cj2g6fusk000dl8vdxtt2duh9","_id":"cj2g6fusu000ql8vdmvkk1qww"},{"post_id":"cj2g6fusm000il8vd75975mqw","category_id":"cj2g6fusk000dl8vdxtt2duh9","_id":"cj2g6fusw000sl8vdflk5cge6"},{"post_id":"cj2g6fuss000ml8vdu58rbqu6","category_id":"cj2g6fus80002l8vdjolkjle9","_id":"cj2g6fusw000ul8vd8uco5fhy"},{"post_id":"cj2g6fusj000cl8vd0ao4kspt","category_id":"cj2g6fusr000kl8vdktz3r391","_id":"cj2g6fusx000vl8vdskjuw3aj"},{"post_id":"cj2g6fus60001l8vds3jbr2dt","category_id":"cj2g6fus80002l8vdjolkjle9","_id":"cj2g6is430010l8vdxnezkxyf"},{"post_id":"cj2g6hbqz000zl8vde2ywq88q","category_id":"cj2g6fus80002l8vdjolkjle9","_id":"cj2g6j5q40011l8vdbpq7k0oq"}],"PostTag":[{"post_id":"cj2g6fusa0003l8vdoud2cpeu","tag_id":"cj2g6fush0009l8vdzc0zj3pf","_id":"cj2g6fusr000jl8vdklm066wl"},{"post_id":"cj2g6fusb0005l8vdhfpvv4kf","tag_id":"cj2g6fush0009l8vdzc0zj3pf","_id":"cj2g6fusu000pl8vd6b41zs5d"},{"post_id":"cj2g6fusg0008l8vd8tmv08rb","tag_id":"cj2g6fust000nl8vdgdmdihj2","_id":"cj2g6fusw000tl8vdug8hye18"},{"post_id":"cj2g6fusj000cl8vd0ao4kspt","tag_id":"cj2g6fusv000rl8vdayjn2zxi","_id":"cj2g6fusx000xl8vdkpkgruxe"},{"post_id":"cj2g6fusl000fl8vd2eaw9irh","tag_id":"cj2g6fusx000wl8vd4bh7vdf7","_id":"cj2g6fusy000yl8vd357tok3i"}],"Tag":[{"name":"技术","_id":"cj2g6fusb0004l8vdab7igapb"},{"name":"Webpack","_id":"cj2g6fush0009l8vdzc0zj3pf"},{"name":"Https","_id":"cj2g6fust000nl8vdgdmdihj2"},{"name":"炉石传说","_id":"cj2g6fusv000rl8vdayjn2zxi"},{"name":"React","_id":"cj2g6fusx000wl8vd4bh7vdf7"}]}}