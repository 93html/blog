{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"cbddfbd544777480ceff76dfb59e87dfc29070a1","modified":1494035247000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1494035247000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1494035247000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1494035247000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1494035247000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1494035247000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1494035247000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1494035247000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1494035247000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1494035247000},{"_id":"themes/next/_config.yml","hash":"0e6c7aa4da1fa347fa7e33bfceb6b293903c2a93","modified":1494035247000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1494035247000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1494035247000},{"_id":"source/_posts/Linux-从入门到重装——文件与目录权限.md","hash":"cb276548c94b83399893464011c504e36f44b281","modified":1496911810000},{"_id":"source/_posts/Javascript 浮点数精度问题.md","hash":"c3554b6c049420129472a315a29fe29928617a2c","modified":1495117934000},{"_id":"source/_posts/2016年工作总结.md","hash":"117c689ff7f4e04c57593d341f48786ea95fbc90","modified":1494035247000},{"_id":"source/_posts/Webpack-动态加载.md","hash":"03dfe92ccc4072a49a507c5058334361b9e9d17a","modified":1494035247000},{"_id":"source/_posts/Webpack-基本概念.md","hash":"28d53c1603e93f04a1a2fc23589a5de408c65a34","modified":1494035247000},{"_id":"source/_posts/五线谱视谱练习程序.md","hash":"0ff51d7a9625d88daed885e9a8a3854ec04d3fe1","modified":1494035247000},{"_id":"source/_posts/一个新的开始.md","hash":"d8c2dc864922ce6394de3999512965081a04bdf8","modified":1494035247000},{"_id":"source/_posts/全站-HTTPS-啦！.md","hash":"cecc1746a574fc56ce9e426800441294682c53c5","modified":1494035247000},{"_id":"source/_posts/匠人的悲哀.md","hash":"c5d79c7d080ade28f60950f6f5ad1723e19a8bcd","modified":1494035247000},{"_id":"source/_posts/前端面试题收集.md","hash":"74d13086451ffe0020ef17fcb11b0acbf06a0866","modified":1495117934000},{"_id":"source/_posts/我的失败主义.md","hash":"053f1f35144abc132e2764961a793101c50f9436","modified":1495118869000},{"_id":"source/_posts/大幅提升-React-性能的6个建议.md","hash":"897b3a5ff443c47c77e26f97ac137c3edd6eaf24","modified":1494035247000},{"_id":"source/_posts/炉石传说之大局观.md","hash":"5ea979f32c69151f9a1a0613a2bfa99a375842b5","modified":1494035247000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1494035247000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1494035247000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1494035247000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1494035247000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1494035247000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1494035247000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1494035247000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1494035247000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1494035247000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1494035247000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1494035247000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1494035247000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1494035247000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1494035247000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1494035247000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1494035247000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1494035247000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1494035247000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1494035247000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1494035247000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1494035247000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1494035247000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1494035247000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1494035247000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494035247000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1494035247000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1494035247000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1494035247000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1494035247000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1494035247000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1494035247000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1494035247000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1494035247000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1494035247000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1494035247000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1494035247000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1494035247000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1494035247000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1494035247000},{"_id":"themes/next/source/images/avatar.png","hash":"9c7cb0389d874bd2e4a7438accb95a2efdd44f81","modified":1494035247000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1494035247000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1494035247000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1494035247000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1494035247000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1494035247000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1494035247000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1494035247000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494035247000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494035247000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1494035247000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1494035247000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1494035247000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1494035247000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1494035247000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e6cf78491639d2ddf56e947c776a19fe72eb90c2","modified":1494035247000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1494035247000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1494035247000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1494035247000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1494035247000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494035247000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494035247000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494035247000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494035247000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494035247000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494035247000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1494035247000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1494035247000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1494035247000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1494035247000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1494035247000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1494035247000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"8457fd7be5826464c0fe9c239d7e732c752ad265","modified":1494035247000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1494035247000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1494035247000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7a804a564cc381c40f17a5b8023e80f781f9d380","modified":1494035247000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1494035247000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1494035247000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1494035247000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1494035247000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1494035247000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1494035247000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1494035247000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1494035247000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1494035247000},{"_id":"themes/next/source/js/src/motion.js","hash":"4d531eb3045c5717145014b0a567f7b4e2423a57","modified":1494035247000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1494035247000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1494035247000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1494035247000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1494035247000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1494035247000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1494035247000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1494035247000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1494035247000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1494035247000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1494035247000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1494035247000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1494035247000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1494035247000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1494035247000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1494035247000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1494035247000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1494035247000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1494035247000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1494035247000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1494035247000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1494035247000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1494035247000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1494035247000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1494035247000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1494035247000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1494035247000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1494035247000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1494035247000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1494035247000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1494035247000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1494035247000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1494035247000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1494035247000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1494035247000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1494035247000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1494035247000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1494035247000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1494035247000},{"_id":"public/images/avatar.png","hash":"0448d1e2d7da2a7d896552849fafb81a96bab295","modified":1496991218263},{"_id":"public/images/cc-by-nc-nd.svg","hash":"a001671db56914e9e85147ba7df8c35d9806e664","modified":1496991218263},{"_id":"public/images/avatar.gif","hash":"c19e81dd0f0e59af3290f22a9f1025f95458378f","modified":1496991218263},{"_id":"public/images/cc-by-nc-sa.svg","hash":"716c8de2e05cf9bf7c6650856104a8fe5d2d5443","modified":1496991218263},{"_id":"public/images/cc-by-nc.svg","hash":"0d183dfe21e7b8f037c1572821386e309f147c50","modified":1496991218263},{"_id":"public/images/cc-by-sa.svg","hash":"acb7a5ffef273b46e9353f869608ed13eb2825fe","modified":1496991218263},{"_id":"public/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1496991218263},{"_id":"public/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1496991218263},{"_id":"public/images/cc-zero.svg","hash":"a96cda245a852a0f67bbaddf5e953825d31986b6","modified":1496991218263},{"_id":"public/images/quote-l.svg","hash":"1708b1c302c85dad66ada25bdb5b560861a007d3","modified":1496991218263},{"_id":"public/images/quote-r.svg","hash":"b2251283267cab9186a437cded16a1b929b81097","modified":1496991218263},{"_id":"public/images/searchicon.png","hash":"00eed611c73d736ddea861a92d8c91d44aefef5c","modified":1496991218263},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"d3e4776a07bf7aee7779e26892cb4076909840b3","modified":1496991218263},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"3494864c175935e45c6ae5e76c2cbe7c9d53c41a","modified":1496991218263},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"2f3e392bd9ad92a3dd2a60d1968124f7dfc26e16","modified":1496991218263},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"0183383be7d6a44a90af8666c3ceecab70c9a8a2","modified":1496991218264},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f70e244175be4f96a237a748577f28f39dd3c7cb","modified":1496991218264},{"_id":"public/2017/05/18/我的失败主义/index.html","hash":"0cd57578d4de50bb99210df0de4939a8fb5da744","modified":1496991219858},{"_id":"public/2017/02/14/炉石传说之大局观/index.html","hash":"3f1ac2f0ecc9b8988992a309354edf6736f1a3ef","modified":1496991219858},{"_id":"public/2017/01/05/五线谱视谱练习程序/index.html","hash":"89d8549c259f1a513e17e31ecac170109185447e","modified":1496991219858},{"_id":"public/2016/12/28/全站-HTTPS-啦！/index.html","hash":"ef5d53596961b3a634b4dd88138587e4844a11bc","modified":1496991219858},{"_id":"public/2016/12/15/一个新的开始/index.html","hash":"939721f745124d62df6d789a0f74d23fe2466757","modified":1496991219858},{"_id":"public/2017/01/25/匠人的悲哀/index.html","hash":"197744939673abe7289268981eb60b0f563185cd","modified":1496991219859},{"_id":"public/2017/01/15/2016年工作总结/index.html","hash":"d90de33a63672590774f6995fef8b1891eeeb8d7","modified":1496991219859},{"_id":"public/archives/page/2/index.html","hash":"1c091371601f861bceedf9d1d2cc08bbd42f45e3","modified":1496991219859},{"_id":"public/archives/2016/index.html","hash":"63754b09c8daf45cd95345c5606ce0126070e5cb","modified":1496991219859},{"_id":"public/archives/2016/12/index.html","hash":"9f5f27a04f030270b5c3b3e5c327285e41abd026","modified":1496991219859},{"_id":"public/archives/2017/index.html","hash":"bd38b9e49075e52b698f6ae82c8d204367e60414","modified":1496991219859},{"_id":"public/archives/2017/01/index.html","hash":"dc4187d94e42deccbcf8ad983c2ebf3f3407a42f","modified":1496991219859},{"_id":"public/archives/2017/02/index.html","hash":"289fd8b25d2334dd18e6f5490b8ba051bde16d99","modified":1496991219859},{"_id":"public/archives/2017/05/index.html","hash":"2fb9fb5a22f306ae284c97c68bc540f9e7206660","modified":1496991219859},{"_id":"public/categories/技术/index.html","hash":"d74755517126995ff90f49144d9ecdc09faff5e6","modified":1496991219859},{"_id":"public/categories/随笔/index.html","hash":"c17c4db0bb070a4a7cb08f99b4a715ab2a0a5e83","modified":1496991219859},{"_id":"public/categories/游戏/index.html","hash":"a15fb5d6c27da44ace982884e301c97ee97fc27a","modified":1496991219859},{"_id":"public/tags/Webpack/index.html","hash":"44201b4e3da8e30d9a1b3af3a22c8ac78769a756","modified":1496991219859},{"_id":"public/tags/Https/index.html","hash":"35447af9e6e57ef9f498265f482086eea80e3b89","modified":1496991219860},{"_id":"public/tags/React/index.html","hash":"074934f9634e08d6f0de927ad66d2ff7c0ce4153","modified":1496991219860},{"_id":"public/tags/炉石传说/index.html","hash":"1554c277da369ca1cf9e3213a8efd8d28a4fea65","modified":1496991219860},{"_id":"public/archives/index.html","hash":"2c1ee44b65367bac4b487b2ff088407a72fef6b1","modified":1496991219860},{"_id":"public/2017/05/06/Javascript 浮点数精度问题/index.html","hash":"57f95d951ff7667b8f5a0b8ff6431e82ea46c4d6","modified":1496991219860},{"_id":"public/2017/05/08/前端面试题收集/index.html","hash":"d92d8cae2116eb0bcdb1bdde341fe79a24eabce6","modified":1496991219860},{"_id":"public/2016/12/27/Webpack-基本概念/index.html","hash":"4ac1129d25cde2e21c45fe61389160be6fc98ccf","modified":1496991219860},{"_id":"public/2016/12/24/大幅提升-React-性能的6个建议/index.html","hash":"c3e90d3a5ad567c3e02d88e62cccd846e3eab31d","modified":1496991219860},{"_id":"public/2016/12/19/Webpack-动态加载/index.html","hash":"5a212bf9e16f0782d4ac36d8981ce13f17e8f4c4","modified":1496991219860},{"_id":"public/index.html","hash":"2fea1cd2cb606a5e368df1891ab18528d5575745","modified":1496991219860},{"_id":"public/page/2/index.html","hash":"cc7f364d2442db3f55a6f05bc1040594625962ae","modified":1496991219860},{"_id":"public/archives/2017/06/index.html","hash":"e29eafabd070220d1365fd40a7fcf7344f11964c","modified":1496991219864},{"_id":"public/tags/Linux/index.html","hash":"f06c44185e76b1aa3ce61504c5e5534961c32403","modified":1496991219864},{"_id":"public/2017/06/08/Linux-从入门到重装——文件与目录权限/index.html","hash":"ebf13848b3aa01a5788e29d47b2a6d1cf7b502fb","modified":1496991219864}],"Category":[{"name":"技术","_id":"cj3o3uybd0003d5tbojmqo0fu"},{"name":"随笔","_id":"cj3o3uyc0000kd5tb2tnvqyv4"},{"name":"游戏","_id":"cj3o3uycl000wd5tbsdtyysii"}],"Data":[],"Page":[],"Post":[{"title":"Linux 从入门到重装——文件与目录权限","date":"2017-06-08T07:32:07.000Z","_content":"## 查看权限\n通过命令 `ls -l` 或者 `ll`，可查看文件或目录的权限\n```\n[root@localhost tmp]# ll /\ntotal 24\n-rw-r--r--   1 root root    0 Jun  8 00:43 abc\nlrwxrwxrwx   1 root root    7 Jun  7 16:37 bin -> usr/bin\ndr-xr-xr-x   4 root root 4096 Jun  7 08:53 boot\ndrwxr-xr-x  20 root root 3340 Jun  7 16:52 dev\ndrwxr-xr-x 138 root root 8192 Jun  8 00:36 etc\n```\n其中第一列代表代表这个文件的类型和权限，即 `-rw-r--r--`。\n\n## 权限的表示方法\n权限由10个字符组成，第一个字符代表这个文件是“目录、文件或链接文件等”。\n* [d] 表示目录\n* [-] 表示文件\n* [l] 表示链接文件\n* [b] 表示设备接口\n* [c] 表示串行端口设备\n\n接下来的字符中，均为 “rwx” 或 “-” 的 3字组合，其中 [r] 表示可读（read），[w] 表示可写（write），[x] 表示可执行（execute），注意这 3个权限的位置是不会变的，如果没有权限，就用 [-] 表示。\n* 第一组为 “文件所有者的权限”，以文件 “abc” 为例，该文件的所有者权限为 \"rw-\"，即可读、可写。\n* 第二组为 “同用户组的权限”。\n* 第三组为 “其他非本用户组的权限”。\n\n## 修改权限\n常用的用户组、所有者、各种身份的权限的修改命令如下：\n* `chgrp` 改变文件所属用户组。\n* `chown` 改变文件所有者。\n* `chmod` 改变文件的权限。\n\n权限除了用字母表示外，还可以用数字来表示\n* [r]: 4\n* [w]: 2\n* [x]: 1\n* 每种身份（owner、group、others）各自的三个权限（r、w、x）的分数需要累加的，以 `-rwxrwx---` 为例：\n* owner = rwx = 4+2+1 = 7\n* group = rwx = 4+2+1 = 7\n* other = --- = 0+0+0 = 0\n* 所以当通过 `chmod` 设置权限时，该文件的权限数字就是 770，如果要将这个文件的所有权限启用，那么就执行：\n```\n[root@localhost test]# ll\ntotal 0\n-rwxrwx--- 1 root root 0 Jun  8 01:07 a\n[root@localhost test]# chmod 777 a\n[root@localhost test]# ll\ntotal 0\n-rwxrwxrwx 1 root root 0 Jun  8 01:07 a\n\n```\n\n## 默认权限：umask\numask 指 “目前用户在新建文件或目录时的权限默认值”\n```\n[root@localhost ~]# umask\n0022\n[root@localhost ~]# umask -S\nu=rwx,g=rx,o=rx\n```\n* umask 返回的 4位数字的第一位，代表特殊权限，一会再介绍\n* “文件” 默认没有可执行（x）权限，最大值为 666\n* ”目录“ 的执行（x）权限代表是否可进入，最大值为 777\n* umask 返回的默认值是 ”要被减掉的权限“\n* 666 - 022 = 644 = rw-r--r--\n* 777 - 022 = 755 = rwxr-xr-x\n\n更改默认权限：\n```\n[root@localhost test]# umask\n0022\n[root@localhost test]# touch abc\n[root@localhost test]# ll\ntotal 0\n-rw-r--r--. 1 root root 0 Jun  8 01:19 abc\n[root@localhost test]# umask 002\n[root@localhost test]# touch 123\n[root@localhost test]# ll\ntotal 0\n-rw-rw-r--. 1 root root 0 Jun  8 01:19 123\n-rw-r--r--. 1 root root 0 Jun  8 01:19 abc\n```\n\n## 特殊权限：SUID，SGID，SBIT\n除了 r、w、x 之外，还有其他特殊权限（s、t）\n```\n[root@localhost /]# ls -ld /tmp ; ls -l /usr/bin/passwd\ndrwxrwxrwt. 17 root root 4096 Jun  8 01:19 /tmp\n-rwsr-xr-x. 1 root root 27832 Jun  9  2014 /usr/bin/passwd\n```\n\n### Set UID\n* 当 s 出现在 owner 的 x 权限位置时，例如 `-rwsr-xr-x`，称为 Set UID，简称 SUID 的特殊权限。\n* 具有 x 权限。\n* SUID 仅对二进制程序有效。\n* 本权限仅在程序执行时（run-time）有效。\n* 执行者将具有该程序所有者的权限。\n\n也就是说，当我们执行 `passwd` 时，任何人都暂时获得了该程序的所有者权限，也就是 `rwx`。\n\n### Set GID\n* 当 s 出现在用户组的 x 权限位置时，例如 `-rwx--s--x`，称为 Set GID，简称 SGID 的特殊权限。\n* 具备 x 权限。\n* 可以对目录使用。\n* 对二进制程序有用。\n* 执行者在执行过程中将会获得该程序用户组的支持。\n* 当目录被设置 SGID 权限时，若用户在此目录下具有写入权限，则用户所创建的新文件的用户组与此目录的用户组相同。\n\n### Sticky Bit\n* SBIT 仅对目录有效。\n* 当用户对于此目录具有 w，x 权限时，用户在该目录下创建文件或目录时，只有自己与 root 才有权利删除该文件。\n\n### SUID，SGID，SBIT 权限设置\n特殊权限也可以用数字表示，数字形态的权限的那 “三个数字” 的组合，在之前再加一个数字，就代表这几个特殊权限了。\n* SUID 为 4\n* SGID 为 2\n* SBIT 为 1\n\n```\n[root@localhost tmp]# touch test\n[root@localhost tmp]# chmod 4755 test; ls -l test\n-rwsr-xr-x. 1 root root 0 Jun  8 01:46 test\n[root@localhost tmp]# chmod 6755 test; ls -l test\n-rwsr-sr-x. 1 root root 0 Jun  8 01:46 test\n[root@localhost tmp]# chmod 6755 test; ls -l test\n-rwsr-sr-x. 1 root root 0 Jun  8 01:46 test\n[root@localhost tmp]# chmod 1755 test; ls -l test\n-rwxr-xr-t. 1 root root 0 Jun  8 01:46 test\n[root@localhost tmp]# chmod 7666 test; ls -l test\n-rwSrwSrwT. 1 root root 0 Jun  8 01:46 test\n```\n注意大写的 S、T，代表空的权限，由于 7666 不具备 x 权限，S、T 的基本条件无法满足，所以当然是 “空的” 权限。\n","source":"_posts/Linux-从入门到重装——文件与目录权限.md","raw":"---\ntitle: Linux 从入门到重装——文件与目录权限\ndate: 2017-06-08 15:32:07\ncategories: 技术\ntags: Linux\n---\n## 查看权限\n通过命令 `ls -l` 或者 `ll`，可查看文件或目录的权限\n```\n[root@localhost tmp]# ll /\ntotal 24\n-rw-r--r--   1 root root    0 Jun  8 00:43 abc\nlrwxrwxrwx   1 root root    7 Jun  7 16:37 bin -> usr/bin\ndr-xr-xr-x   4 root root 4096 Jun  7 08:53 boot\ndrwxr-xr-x  20 root root 3340 Jun  7 16:52 dev\ndrwxr-xr-x 138 root root 8192 Jun  8 00:36 etc\n```\n其中第一列代表代表这个文件的类型和权限，即 `-rw-r--r--`。\n\n## 权限的表示方法\n权限由10个字符组成，第一个字符代表这个文件是“目录、文件或链接文件等”。\n* [d] 表示目录\n* [-] 表示文件\n* [l] 表示链接文件\n* [b] 表示设备接口\n* [c] 表示串行端口设备\n\n接下来的字符中，均为 “rwx” 或 “-” 的 3字组合，其中 [r] 表示可读（read），[w] 表示可写（write），[x] 表示可执行（execute），注意这 3个权限的位置是不会变的，如果没有权限，就用 [-] 表示。\n* 第一组为 “文件所有者的权限”，以文件 “abc” 为例，该文件的所有者权限为 \"rw-\"，即可读、可写。\n* 第二组为 “同用户组的权限”。\n* 第三组为 “其他非本用户组的权限”。\n\n## 修改权限\n常用的用户组、所有者、各种身份的权限的修改命令如下：\n* `chgrp` 改变文件所属用户组。\n* `chown` 改变文件所有者。\n* `chmod` 改变文件的权限。\n\n权限除了用字母表示外，还可以用数字来表示\n* [r]: 4\n* [w]: 2\n* [x]: 1\n* 每种身份（owner、group、others）各自的三个权限（r、w、x）的分数需要累加的，以 `-rwxrwx---` 为例：\n* owner = rwx = 4+2+1 = 7\n* group = rwx = 4+2+1 = 7\n* other = --- = 0+0+0 = 0\n* 所以当通过 `chmod` 设置权限时，该文件的权限数字就是 770，如果要将这个文件的所有权限启用，那么就执行：\n```\n[root@localhost test]# ll\ntotal 0\n-rwxrwx--- 1 root root 0 Jun  8 01:07 a\n[root@localhost test]# chmod 777 a\n[root@localhost test]# ll\ntotal 0\n-rwxrwxrwx 1 root root 0 Jun  8 01:07 a\n\n```\n\n## 默认权限：umask\numask 指 “目前用户在新建文件或目录时的权限默认值”\n```\n[root@localhost ~]# umask\n0022\n[root@localhost ~]# umask -S\nu=rwx,g=rx,o=rx\n```\n* umask 返回的 4位数字的第一位，代表特殊权限，一会再介绍\n* “文件” 默认没有可执行（x）权限，最大值为 666\n* ”目录“ 的执行（x）权限代表是否可进入，最大值为 777\n* umask 返回的默认值是 ”要被减掉的权限“\n* 666 - 022 = 644 = rw-r--r--\n* 777 - 022 = 755 = rwxr-xr-x\n\n更改默认权限：\n```\n[root@localhost test]# umask\n0022\n[root@localhost test]# touch abc\n[root@localhost test]# ll\ntotal 0\n-rw-r--r--. 1 root root 0 Jun  8 01:19 abc\n[root@localhost test]# umask 002\n[root@localhost test]# touch 123\n[root@localhost test]# ll\ntotal 0\n-rw-rw-r--. 1 root root 0 Jun  8 01:19 123\n-rw-r--r--. 1 root root 0 Jun  8 01:19 abc\n```\n\n## 特殊权限：SUID，SGID，SBIT\n除了 r、w、x 之外，还有其他特殊权限（s、t）\n```\n[root@localhost /]# ls -ld /tmp ; ls -l /usr/bin/passwd\ndrwxrwxrwt. 17 root root 4096 Jun  8 01:19 /tmp\n-rwsr-xr-x. 1 root root 27832 Jun  9  2014 /usr/bin/passwd\n```\n\n### Set UID\n* 当 s 出现在 owner 的 x 权限位置时，例如 `-rwsr-xr-x`，称为 Set UID，简称 SUID 的特殊权限。\n* 具有 x 权限。\n* SUID 仅对二进制程序有效。\n* 本权限仅在程序执行时（run-time）有效。\n* 执行者将具有该程序所有者的权限。\n\n也就是说，当我们执行 `passwd` 时，任何人都暂时获得了该程序的所有者权限，也就是 `rwx`。\n\n### Set GID\n* 当 s 出现在用户组的 x 权限位置时，例如 `-rwx--s--x`，称为 Set GID，简称 SGID 的特殊权限。\n* 具备 x 权限。\n* 可以对目录使用。\n* 对二进制程序有用。\n* 执行者在执行过程中将会获得该程序用户组的支持。\n* 当目录被设置 SGID 权限时，若用户在此目录下具有写入权限，则用户所创建的新文件的用户组与此目录的用户组相同。\n\n### Sticky Bit\n* SBIT 仅对目录有效。\n* 当用户对于此目录具有 w，x 权限时，用户在该目录下创建文件或目录时，只有自己与 root 才有权利删除该文件。\n\n### SUID，SGID，SBIT 权限设置\n特殊权限也可以用数字表示，数字形态的权限的那 “三个数字” 的组合，在之前再加一个数字，就代表这几个特殊权限了。\n* SUID 为 4\n* SGID 为 2\n* SBIT 为 1\n\n```\n[root@localhost tmp]# touch test\n[root@localhost tmp]# chmod 4755 test; ls -l test\n-rwsr-xr-x. 1 root root 0 Jun  8 01:46 test\n[root@localhost tmp]# chmod 6755 test; ls -l test\n-rwsr-sr-x. 1 root root 0 Jun  8 01:46 test\n[root@localhost tmp]# chmod 6755 test; ls -l test\n-rwsr-sr-x. 1 root root 0 Jun  8 01:46 test\n[root@localhost tmp]# chmod 1755 test; ls -l test\n-rwxr-xr-t. 1 root root 0 Jun  8 01:46 test\n[root@localhost tmp]# chmod 7666 test; ls -l test\n-rwSrwSrwT. 1 root root 0 Jun  8 01:46 test\n```\n注意大写的 S、T，代表空的权限，由于 7666 不具备 x 权限，S、T 的基本条件无法满足，所以当然是 “空的” 权限。\n","slug":"Linux-从入门到重装——文件与目录权限","published":1,"updated":"2017-06-08T08:50:10.000Z","_id":"cj3o3uyb20000d5tbwzb7s0ec","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"查看权限\"><a href=\"#查看权限\" class=\"headerlink\" title=\"查看权限\"></a>查看权限</h2><p>通过命令 <code>ls -l</code> 或者 <code>ll</code>，可查看文件或目录的权限<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost tmp]# ll /</div><div class=\"line\">total 24</div><div class=\"line\">-rw-r--r--   1 root root    0 Jun  8 00:43 abc</div><div class=\"line\">lrwxrwxrwx   1 root root    7 Jun  7 16:37 bin -&gt; usr/bin</div><div class=\"line\">dr-xr-xr-x   4 root root 4096 Jun  7 08:53 boot</div><div class=\"line\">drwxr-xr-x  20 root root 3340 Jun  7 16:52 dev</div><div class=\"line\">drwxr-xr-x 138 root root 8192 Jun  8 00:36 etc</div></pre></td></tr></table></figure><p></p><p>其中第一列代表代表这个文件的类型和权限，即 <code>-rw-r--r--</code>。</p><h2 id=\"权限的表示方法\"><a href=\"#权限的表示方法\" class=\"headerlink\" title=\"权限的表示方法\"></a>权限的表示方法</h2><p>权限由10个字符组成，第一个字符代表这个文件是“目录、文件或链接文件等”。</p><ul><li>[d] 表示目录</li><li>[-] 表示文件</li><li>[l] 表示链接文件</li><li>[b] 表示设备接口</li><li>[c] 表示串行端口设备</li></ul><p>接下来的字符中，均为 “rwx” 或 “-” 的 3字组合，其中 [r] 表示可读（read），[w] 表示可写（write），[x] 表示可执行（execute），注意这 3个权限的位置是不会变的，如果没有权限，就用 [-] 表示。</p><ul><li>第一组为 “文件所有者的权限”，以文件 “abc” 为例，该文件的所有者权限为 “rw-“，即可读、可写。</li><li>第二组为 “同用户组的权限”。</li><li>第三组为 “其他非本用户组的权限”。</li></ul><h2 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h2><p>常用的用户组、所有者、各种身份的权限的修改命令如下：</p><ul><li><code>chgrp</code> 改变文件所属用户组。</li><li><code>chown</code> 改变文件所有者。</li><li><code>chmod</code> 改变文件的权限。</li></ul><p>权限除了用字母表示外，还可以用数字来表示</p><ul><li>[r]: 4</li><li>[w]: 2</li><li>[x]: 1</li><li>每种身份（owner、group、others）各自的三个权限（r、w、x）的分数需要累加的，以 <code>-rwxrwx---</code> 为例：</li><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>other = — = 0+0+0 = 0</li><li>所以当通过 <code>chmod</code> 设置权限时，该文件的权限数字就是 770，如果要将这个文件的所有权限启用，那么就执行：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost test]# ll</div><div class=\"line\">total 0</div><div class=\"line\">-rwxrwx--- 1 root root 0 Jun  8 01:07 a</div><div class=\"line\">[root@localhost test]# chmod 777 a</div><div class=\"line\">[root@localhost test]# ll</div><div class=\"line\">total 0</div><div class=\"line\">-rwxrwxrwx 1 root root 0 Jun  8 01:07 a</div></pre></td></tr></table></figure></li></ul><h2 id=\"默认权限：umask\"><a href=\"#默认权限：umask\" class=\"headerlink\" title=\"默认权限：umask\"></a>默认权限：umask</h2><p>umask 指 “目前用户在新建文件或目录时的权限默认值”<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# umask</div><div class=\"line\">0022</div><div class=\"line\">[root@localhost ~]# umask -S</div><div class=\"line\">u=rwx,g=rx,o=rx</div></pre></td></tr></table></figure><p></p><ul><li>umask 返回的 4位数字的第一位，代表特殊权限，一会再介绍</li><li>“文件” 默认没有可执行（x）权限，最大值为 666</li><li>”目录“ 的执行（x）权限代表是否可进入，最大值为 777</li><li>umask 返回的默认值是 ”要被减掉的权限“</li><li>666 - 022 = 644 = rw-r–r–</li><li>777 - 022 = 755 = rwxr-xr-x</li></ul><p>更改默认权限：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost test]# umask</div><div class=\"line\">0022</div><div class=\"line\">[root@localhost test]# touch abc</div><div class=\"line\">[root@localhost test]# ll</div><div class=\"line\">total 0</div><div class=\"line\">-rw-r--r--. 1 root root 0 Jun  8 01:19 abc</div><div class=\"line\">[root@localhost test]# umask 002</div><div class=\"line\">[root@localhost test]# touch 123</div><div class=\"line\">[root@localhost test]# ll</div><div class=\"line\">total 0</div><div class=\"line\">-rw-rw-r--. 1 root root 0 Jun  8 01:19 123</div><div class=\"line\">-rw-r--r--. 1 root root 0 Jun  8 01:19 abc</div></pre></td></tr></table></figure><p></p><h2 id=\"特殊权限：SUID，SGID，SBIT\"><a href=\"#特殊权限：SUID，SGID，SBIT\" class=\"headerlink\" title=\"特殊权限：SUID，SGID，SBIT\"></a>特殊权限：SUID，SGID，SBIT</h2><p>除了 r、w、x 之外，还有其他特殊权限（s、t）<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost /]# ls -ld /tmp ; ls -l /usr/bin/passwd</div><div class=\"line\">drwxrwxrwt. 17 root root 4096 Jun  8 01:19 /tmp</div><div class=\"line\">-rwsr-xr-x. 1 root root 27832 Jun  9  2014 /usr/bin/passwd</div></pre></td></tr></table></figure><p></p><h3 id=\"Set-UID\"><a href=\"#Set-UID\" class=\"headerlink\" title=\"Set UID\"></a>Set UID</h3><ul><li>当 s 出现在 owner 的 x 权限位置时，例如 <code>-rwsr-xr-x</code>，称为 Set UID，简称 SUID 的特殊权限。</li><li>具有 x 权限。</li><li>SUID 仅对二进制程序有效。</li><li>本权限仅在程序执行时（run-time）有效。</li><li>执行者将具有该程序所有者的权限。</li></ul><p>也就是说，当我们执行 <code>passwd</code> 时，任何人都暂时获得了该程序的所有者权限，也就是 <code>rwx</code>。</p><h3 id=\"Set-GID\"><a href=\"#Set-GID\" class=\"headerlink\" title=\"Set GID\"></a>Set GID</h3><ul><li>当 s 出现在用户组的 x 权限位置时，例如 <code>-rwx--s--x</code>，称为 Set GID，简称 SGID 的特殊权限。</li><li>具备 x 权限。</li><li>可以对目录使用。</li><li>对二进制程序有用。</li><li>执行者在执行过程中将会获得该程序用户组的支持。</li><li>当目录被设置 SGID 权限时，若用户在此目录下具有写入权限，则用户所创建的新文件的用户组与此目录的用户组相同。</li></ul><h3 id=\"Sticky-Bit\"><a href=\"#Sticky-Bit\" class=\"headerlink\" title=\"Sticky Bit\"></a>Sticky Bit</h3><ul><li>SBIT 仅对目录有效。</li><li>当用户对于此目录具有 w，x 权限时，用户在该目录下创建文件或目录时，只有自己与 root 才有权利删除该文件。</li></ul><h3 id=\"SUID，SGID，SBIT-权限设置\"><a href=\"#SUID，SGID，SBIT-权限设置\" class=\"headerlink\" title=\"SUID，SGID，SBIT 权限设置\"></a>SUID，SGID，SBIT 权限设置</h3><p>特殊权限也可以用数字表示，数字形态的权限的那 “三个数字” 的组合，在之前再加一个数字，就代表这几个特殊权限了。</p><ul><li>SUID 为 4</li><li>SGID 为 2</li><li>SBIT 为 1</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost tmp]# touch test</div><div class=\"line\">[root@localhost tmp]# chmod 4755 test; ls -l test</div><div class=\"line\">-rwsr-xr-x. 1 root root 0 Jun  8 01:46 test</div><div class=\"line\">[root@localhost tmp]# chmod 6755 test; ls -l test</div><div class=\"line\">-rwsr-sr-x. 1 root root 0 Jun  8 01:46 test</div><div class=\"line\">[root@localhost tmp]# chmod 6755 test; ls -l test</div><div class=\"line\">-rwsr-sr-x. 1 root root 0 Jun  8 01:46 test</div><div class=\"line\">[root@localhost tmp]# chmod 1755 test; ls -l test</div><div class=\"line\">-rwxr-xr-t. 1 root root 0 Jun  8 01:46 test</div><div class=\"line\">[root@localhost tmp]# chmod 7666 test; ls -l test</div><div class=\"line\">-rwSrwSrwT. 1 root root 0 Jun  8 01:46 test</div></pre></td></tr></table></figure><p>注意大写的 S、T，代表空的权限，由于 7666 不具备 x 权限，S、T 的基本条件无法满足，所以当然是 “空的” 权限。</p>","excerpt":"","more":"<h2 id=\"查看权限\"><a href=\"#查看权限\" class=\"headerlink\" title=\"查看权限\"></a>查看权限</h2><p>通过命令 <code>ls -l</code> 或者 <code>ll</code>，可查看文件或目录的权限<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost tmp]# ll /</div><div class=\"line\">total 24</div><div class=\"line\">-rw-r--r--   1 root root    0 Jun  8 00:43 abc</div><div class=\"line\">lrwxrwxrwx   1 root root    7 Jun  7 16:37 bin -&gt; usr/bin</div><div class=\"line\">dr-xr-xr-x   4 root root 4096 Jun  7 08:53 boot</div><div class=\"line\">drwxr-xr-x  20 root root 3340 Jun  7 16:52 dev</div><div class=\"line\">drwxr-xr-x 138 root root 8192 Jun  8 00:36 etc</div></pre></td></tr></table></figure><p></p><p>其中第一列代表代表这个文件的类型和权限，即 <code>-rw-r--r--</code>。</p><h2 id=\"权限的表示方法\"><a href=\"#权限的表示方法\" class=\"headerlink\" title=\"权限的表示方法\"></a>权限的表示方法</h2><p>权限由10个字符组成，第一个字符代表这个文件是“目录、文件或链接文件等”。</p><ul><li>[d] 表示目录</li><li>[-] 表示文件</li><li>[l] 表示链接文件</li><li>[b] 表示设备接口</li><li>[c] 表示串行端口设备</li></ul><p>接下来的字符中，均为 “rwx” 或 “-” 的 3字组合，其中 [r] 表示可读（read），[w] 表示可写（write），[x] 表示可执行（execute），注意这 3个权限的位置是不会变的，如果没有权限，就用 [-] 表示。</p><ul><li>第一组为 “文件所有者的权限”，以文件 “abc” 为例，该文件的所有者权限为 “rw-“，即可读、可写。</li><li>第二组为 “同用户组的权限”。</li><li>第三组为 “其他非本用户组的权限”。</li></ul><h2 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h2><p>常用的用户组、所有者、各种身份的权限的修改命令如下：</p><ul><li><code>chgrp</code> 改变文件所属用户组。</li><li><code>chown</code> 改变文件所有者。</li><li><code>chmod</code> 改变文件的权限。</li></ul><p>权限除了用字母表示外，还可以用数字来表示</p><ul><li>[r]: 4</li><li>[w]: 2</li><li>[x]: 1</li><li>每种身份（owner、group、others）各自的三个权限（r、w、x）的分数需要累加的，以 <code>-rwxrwx---</code> 为例：</li><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>other = — = 0+0+0 = 0</li><li>所以当通过 <code>chmod</code> 设置权限时，该文件的权限数字就是 770，如果要将这个文件的所有权限启用，那么就执行：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost test]# ll</div><div class=\"line\">total 0</div><div class=\"line\">-rwxrwx--- 1 root root 0 Jun  8 01:07 a</div><div class=\"line\">[root@localhost test]# chmod 777 a</div><div class=\"line\">[root@localhost test]# ll</div><div class=\"line\">total 0</div><div class=\"line\">-rwxrwxrwx 1 root root 0 Jun  8 01:07 a</div></pre></td></tr></table></figure></li></ul><h2 id=\"默认权限：umask\"><a href=\"#默认权限：umask\" class=\"headerlink\" title=\"默认权限：umask\"></a>默认权限：umask</h2><p>umask 指 “目前用户在新建文件或目录时的权限默认值”<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# umask</div><div class=\"line\">0022</div><div class=\"line\">[root@localhost ~]# umask -S</div><div class=\"line\">u=rwx,g=rx,o=rx</div></pre></td></tr></table></figure><p></p><ul><li>umask 返回的 4位数字的第一位，代表特殊权限，一会再介绍</li><li>“文件” 默认没有可执行（x）权限，最大值为 666</li><li>”目录“ 的执行（x）权限代表是否可进入，最大值为 777</li><li>umask 返回的默认值是 ”要被减掉的权限“</li><li>666 - 022 = 644 = rw-r–r–</li><li>777 - 022 = 755 = rwxr-xr-x</li></ul><p>更改默认权限：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost test]# umask</div><div class=\"line\">0022</div><div class=\"line\">[root@localhost test]# touch abc</div><div class=\"line\">[root@localhost test]# ll</div><div class=\"line\">total 0</div><div class=\"line\">-rw-r--r--. 1 root root 0 Jun  8 01:19 abc</div><div class=\"line\">[root@localhost test]# umask 002</div><div class=\"line\">[root@localhost test]# touch 123</div><div class=\"line\">[root@localhost test]# ll</div><div class=\"line\">total 0</div><div class=\"line\">-rw-rw-r--. 1 root root 0 Jun  8 01:19 123</div><div class=\"line\">-rw-r--r--. 1 root root 0 Jun  8 01:19 abc</div></pre></td></tr></table></figure><p></p><h2 id=\"特殊权限：SUID，SGID，SBIT\"><a href=\"#特殊权限：SUID，SGID，SBIT\" class=\"headerlink\" title=\"特殊权限：SUID，SGID，SBIT\"></a>特殊权限：SUID，SGID，SBIT</h2><p>除了 r、w、x 之外，还有其他特殊权限（s、t）<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost /]# ls -ld /tmp ; ls -l /usr/bin/passwd</div><div class=\"line\">drwxrwxrwt. 17 root root 4096 Jun  8 01:19 /tmp</div><div class=\"line\">-rwsr-xr-x. 1 root root 27832 Jun  9  2014 /usr/bin/passwd</div></pre></td></tr></table></figure><p></p><h3 id=\"Set-UID\"><a href=\"#Set-UID\" class=\"headerlink\" title=\"Set UID\"></a>Set UID</h3><ul><li>当 s 出现在 owner 的 x 权限位置时，例如 <code>-rwsr-xr-x</code>，称为 Set UID，简称 SUID 的特殊权限。</li><li>具有 x 权限。</li><li>SUID 仅对二进制程序有效。</li><li>本权限仅在程序执行时（run-time）有效。</li><li>执行者将具有该程序所有者的权限。</li></ul><p>也就是说，当我们执行 <code>passwd</code> 时，任何人都暂时获得了该程序的所有者权限，也就是 <code>rwx</code>。</p><h3 id=\"Set-GID\"><a href=\"#Set-GID\" class=\"headerlink\" title=\"Set GID\"></a>Set GID</h3><ul><li>当 s 出现在用户组的 x 权限位置时，例如 <code>-rwx--s--x</code>，称为 Set GID，简称 SGID 的特殊权限。</li><li>具备 x 权限。</li><li>可以对目录使用。</li><li>对二进制程序有用。</li><li>执行者在执行过程中将会获得该程序用户组的支持。</li><li>当目录被设置 SGID 权限时，若用户在此目录下具有写入权限，则用户所创建的新文件的用户组与此目录的用户组相同。</li></ul><h3 id=\"Sticky-Bit\"><a href=\"#Sticky-Bit\" class=\"headerlink\" title=\"Sticky Bit\"></a>Sticky Bit</h3><ul><li>SBIT 仅对目录有效。</li><li>当用户对于此目录具有 w，x 权限时，用户在该目录下创建文件或目录时，只有自己与 root 才有权利删除该文件。</li></ul><h3 id=\"SUID，SGID，SBIT-权限设置\"><a href=\"#SUID，SGID，SBIT-权限设置\" class=\"headerlink\" title=\"SUID，SGID，SBIT 权限设置\"></a>SUID，SGID，SBIT 权限设置</h3><p>特殊权限也可以用数字表示，数字形态的权限的那 “三个数字” 的组合，在之前再加一个数字，就代表这几个特殊权限了。</p><ul><li>SUID 为 4</li><li>SGID 为 2</li><li>SBIT 为 1</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost tmp]# touch test</div><div class=\"line\">[root@localhost tmp]# chmod 4755 test; ls -l test</div><div class=\"line\">-rwsr-xr-x. 1 root root 0 Jun  8 01:46 test</div><div class=\"line\">[root@localhost tmp]# chmod 6755 test; ls -l test</div><div class=\"line\">-rwsr-sr-x. 1 root root 0 Jun  8 01:46 test</div><div class=\"line\">[root@localhost tmp]# chmod 6755 test; ls -l test</div><div class=\"line\">-rwsr-sr-x. 1 root root 0 Jun  8 01:46 test</div><div class=\"line\">[root@localhost tmp]# chmod 1755 test; ls -l test</div><div class=\"line\">-rwxr-xr-t. 1 root root 0 Jun  8 01:46 test</div><div class=\"line\">[root@localhost tmp]# chmod 7666 test; ls -l test</div><div class=\"line\">-rwSrwSrwT. 1 root root 0 Jun  8 01:46 test</div></pre></td></tr></table></figure><p>注意大写的 S、T，代表空的权限，由于 7666 不具备 x 权限，S、T 的基本条件无法满足，所以当然是 “空的” 权限。</p>"},{"title":"Javascript 浮点数精度问题","date":"2017-05-06T01:53:48.000Z","_content":"## 为什么0.1+0.2=0.30000000000000004？\n因为在计算机内部使用二进制储存浮点数（[IEEE 754](https://zh.wikipedia.org/zh-hans/IEEE_754)），其不能准确地表示0.1，0.2或0.3\n当编码解释代码时，你的“0.1\"已经舍入为该格式的最接近的数字，即使在计算发生之前也会导致小的舍入误差。\n\n```\n十进制0.1 = 0.00011001100110011...(循环0011)\n十进制0.2 = 0.0011001100110011...(循环0011)\n\n两者相加：\n0.00011001100110011001100110011001100110011001100110011001 +  0.00110011001100110011001100110011001100110011001100110011 = 0.01001100110011001100110011001100110011001100110011001100\n转换成10进制之后得到：0.30000000000000004！\n```\n\n## 为什么电脑使用这样一个愚蠢的系统？\n这不是愚蠢的，只是不一样。十进制数字不能准确地表示像1/3的数字，所以你只能得到像0.33这样的一个数字，你不会指望0.33 + 0.33 + 0.33加起来等于1是吧？\n\n计算机使用二进制数，因为它们在处理这些数据时速度更方便。（[二进制有什么好处，为何电脑都采用二进制？](https://www.zhihu.com/question/20830886)）\n\n## 如何处理金额运算等对精度要求高的场景？\n在别的一些语言中，比如 c#，Java，提供了单精度和双精度的数据类型，来应对不同的精度要求\n\nJavascript 是一门弱类型语言，所有的数字都是 Number 类型，而且 Number 和 String 之间可以隐式转换，当我们需要强制转换成浮点数的话，可以使用`parseFloat()`函数。\n```javascript\nvar num = parseFloat(\"3.5\");\n```\n\n### [bignumber.js](https://github.com/MikeMcl/bignumber.js/)\n一个专门处理十进制小数运算的库\n```javascript\n0.3 - 0.1                           // 0.19999999999999998\nx = new BigNumber(0.3)\nx.minus(0.1)                        // \"0.2\"\nx                                   // \"0.3\"\n```\n","source":"_posts/Javascript 浮点数精度问题.md","raw":"---\ntitle: Javascript 浮点数精度问题\ndate: 2017-05-06 09:53:48\ncategories: 技术\n---\n## 为什么0.1+0.2=0.30000000000000004？\n因为在计算机内部使用二进制储存浮点数（[IEEE 754](https://zh.wikipedia.org/zh-hans/IEEE_754)），其不能准确地表示0.1，0.2或0.3\n当编码解释代码时，你的“0.1\"已经舍入为该格式的最接近的数字，即使在计算发生之前也会导致小的舍入误差。\n\n```\n十进制0.1 = 0.00011001100110011...(循环0011)\n十进制0.2 = 0.0011001100110011...(循环0011)\n\n两者相加：\n0.00011001100110011001100110011001100110011001100110011001 +  0.00110011001100110011001100110011001100110011001100110011 = 0.01001100110011001100110011001100110011001100110011001100\n转换成10进制之后得到：0.30000000000000004！\n```\n\n## 为什么电脑使用这样一个愚蠢的系统？\n这不是愚蠢的，只是不一样。十进制数字不能准确地表示像1/3的数字，所以你只能得到像0.33这样的一个数字，你不会指望0.33 + 0.33 + 0.33加起来等于1是吧？\n\n计算机使用二进制数，因为它们在处理这些数据时速度更方便。（[二进制有什么好处，为何电脑都采用二进制？](https://www.zhihu.com/question/20830886)）\n\n## 如何处理金额运算等对精度要求高的场景？\n在别的一些语言中，比如 c#，Java，提供了单精度和双精度的数据类型，来应对不同的精度要求\n\nJavascript 是一门弱类型语言，所有的数字都是 Number 类型，而且 Number 和 String 之间可以隐式转换，当我们需要强制转换成浮点数的话，可以使用`parseFloat()`函数。\n```javascript\nvar num = parseFloat(\"3.5\");\n```\n\n### [bignumber.js](https://github.com/MikeMcl/bignumber.js/)\n一个专门处理十进制小数运算的库\n```javascript\n0.3 - 0.1                           // 0.19999999999999998\nx = new BigNumber(0.3)\nx.minus(0.1)                        // \"0.2\"\nx                                   // \"0.3\"\n```\n","slug":"Javascript 浮点数精度问题","published":1,"updated":"2017-05-18T14:32:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uyba0001d5tbfegncmgg","content":"<h2 id=\"为什么0-1-0-2-0-30000000000000004？\"><a href=\"#为什么0-1-0-2-0-30000000000000004？\" class=\"headerlink\" title=\"为什么0.1+0.2=0.30000000000000004？\"></a>为什么0.1+0.2=0.30000000000000004？</h2><p>因为在计算机内部使用二进制储存浮点数（<a href=\"https://zh.wikipedia.org/zh-hans/IEEE_754\" target=\"_blank\" rel=\"external\">IEEE 754</a>），其不能准确地表示0.1，0.2或0.3<br>当编码解释代码时，你的“0.1”已经舍入为该格式的最接近的数字，即使在计算发生之前也会导致小的舍入误差。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">十进制0.1 = 0.00011001100110011...(循环0011)</div><div class=\"line\">十进制0.2 = 0.0011001100110011...(循环0011)</div><div class=\"line\"></div><div class=\"line\">两者相加：</div><div class=\"line\">0.00011001100110011001100110011001100110011001100110011001 +  0.00110011001100110011001100110011001100110011001100110011 = 0.01001100110011001100110011001100110011001100110011001100</div><div class=\"line\">转换成10进制之后得到：0.30000000000000004！</div></pre></td></tr></table></figure><h2 id=\"为什么电脑使用这样一个愚蠢的系统？\"><a href=\"#为什么电脑使用这样一个愚蠢的系统？\" class=\"headerlink\" title=\"为什么电脑使用这样一个愚蠢的系统？\"></a>为什么电脑使用这样一个愚蠢的系统？</h2><p>这不是愚蠢的，只是不一样。十进制数字不能准确地表示像1/3的数字，所以你只能得到像0.33这样的一个数字，你不会指望0.33 + 0.33 + 0.33加起来等于1是吧？</p><p>计算机使用二进制数，因为它们在处理这些数据时速度更方便。（<a href=\"https://www.zhihu.com/question/20830886\" target=\"_blank\" rel=\"external\">二进制有什么好处，为何电脑都采用二进制？</a>）</p><h2 id=\"如何处理金额运算等对精度要求高的场景？\"><a href=\"#如何处理金额运算等对精度要求高的场景？\" class=\"headerlink\" title=\"如何处理金额运算等对精度要求高的场景？\"></a>如何处理金额运算等对精度要求高的场景？</h2><p>在别的一些语言中，比如 c#，Java，提供了单精度和双精度的数据类型，来应对不同的精度要求</p><p>Javascript 是一门弱类型语言，所有的数字都是 Number 类型，而且 Number 和 String 之间可以隐式转换，当我们需要强制转换成浮点数的话，可以使用<code>parseFloat()</code>函数。<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseFloat</span>(<span class=\"string\">\"3.5\"</span>);</div></pre></td></tr></table></figure><p></p><h3 id=\"bignumber-js\"><a href=\"#bignumber-js\" class=\"headerlink\" title=\"bignumber.js\"></a><a href=\"https://github.com/MikeMcl/bignumber.js/\" target=\"_blank\" rel=\"external\">bignumber.js</a></h3><p>一个专门处理十进制小数运算的库<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0.3</span> - <span class=\"number\">0.1</span>                           <span class=\"comment\">// 0.19999999999999998</span></div><div class=\"line\">x = <span class=\"keyword\">new</span> BigNumber(<span class=\"number\">0.3</span>)</div><div class=\"line\">x.minus(<span class=\"number\">0.1</span>)                        <span class=\"comment\">// \"0.2\"</span></div><div class=\"line\">x                                   <span class=\"comment\">// \"0.3\"</span></div></pre></td></tr></table></figure><p></p>","excerpt":"","more":"<h2 id=\"为什么0-1-0-2-0-30000000000000004？\"><a href=\"#为什么0-1-0-2-0-30000000000000004？\" class=\"headerlink\" title=\"为什么0.1+0.2=0.30000000000000004？\"></a>为什么0.1+0.2=0.30000000000000004？</h2><p>因为在计算机内部使用二进制储存浮点数（<a href=\"https://zh.wikipedia.org/zh-hans/IEEE_754\">IEEE 754</a>），其不能准确地表示0.1，0.2或0.3<br>当编码解释代码时，你的“0.1”已经舍入为该格式的最接近的数字，即使在计算发生之前也会导致小的舍入误差。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">十进制0.1 = 0.00011001100110011...(循环0011)</div><div class=\"line\">十进制0.2 = 0.0011001100110011...(循环0011)</div><div class=\"line\"></div><div class=\"line\">两者相加：</div><div class=\"line\">0.00011001100110011001100110011001100110011001100110011001 +  0.00110011001100110011001100110011001100110011001100110011 = 0.01001100110011001100110011001100110011001100110011001100</div><div class=\"line\">转换成10进制之后得到：0.30000000000000004！</div></pre></td></tr></table></figure><h2 id=\"为什么电脑使用这样一个愚蠢的系统？\"><a href=\"#为什么电脑使用这样一个愚蠢的系统？\" class=\"headerlink\" title=\"为什么电脑使用这样一个愚蠢的系统？\"></a>为什么电脑使用这样一个愚蠢的系统？</h2><p>这不是愚蠢的，只是不一样。十进制数字不能准确地表示像1/3的数字，所以你只能得到像0.33这样的一个数字，你不会指望0.33 + 0.33 + 0.33加起来等于1是吧？</p><p>计算机使用二进制数，因为它们在处理这些数据时速度更方便。（<a href=\"https://www.zhihu.com/question/20830886\">二进制有什么好处，为何电脑都采用二进制？</a>）</p><h2 id=\"如何处理金额运算等对精度要求高的场景？\"><a href=\"#如何处理金额运算等对精度要求高的场景？\" class=\"headerlink\" title=\"如何处理金额运算等对精度要求高的场景？\"></a>如何处理金额运算等对精度要求高的场景？</h2><p>在别的一些语言中，比如 c#，Java，提供了单精度和双精度的数据类型，来应对不同的精度要求</p><p>Javascript 是一门弱类型语言，所有的数字都是 Number 类型，而且 Number 和 String 之间可以隐式转换，当我们需要强制转换成浮点数的话，可以使用<code>parseFloat()</code>函数。<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseFloat</span>(<span class=\"string\">\"3.5\"</span>);</div></pre></td></tr></table></figure><p></p><h3 id=\"bignumber-js\"><a href=\"#bignumber-js\" class=\"headerlink\" title=\"bignumber.js\"></a><a href=\"https://github.com/MikeMcl/bignumber.js/\">bignumber.js</a></h3><p>一个专门处理十进制小数运算的库<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0.3</span> - <span class=\"number\">0.1</span>                           <span class=\"comment\">// 0.19999999999999998</span></div><div class=\"line\">x = <span class=\"keyword\">new</span> BigNumber(<span class=\"number\">0.3</span>)</div><div class=\"line\">x.minus(<span class=\"number\">0.1</span>)                        <span class=\"comment\">// \"0.2\"</span></div><div class=\"line\">x                                   <span class=\"comment\">// \"0.3\"</span></div></pre></td></tr></table></figure><p></p>"},{"title":"2016年工作总结","date":"2017-01-15T03:18:21.000Z","_content":"今年不知怎么的，各大技术社区的年度总结主题特别多，总想着我也要写一篇总结总结，但种种原因（懒）导致一直没有执行起来，直到周四我的领导跑来说让我写一篇公司的前端年度工作总结，年会上要用到，好吧那就搞起来，一番酝酿之后，2016年技术上还演进了不少东西，由于汇报的对象都是普通非技术人员，把点都覆盖到的同时，用词都比较通俗，也比较标题党，给人一种略感浮夸的艺术效果。。\n<!--more-->\n\n### 与分辨率和解，彻底搞定适配性问题！\n以一张 iPhone6 为标准分辨率的设计稿，来兼容市面上五花八门的手机屏幕，一度曾是前端工作中非常头疼的问题之一，如今通过使用一种全新的相对尺寸单位，彻底解决了适配性问题，不管用户用的是 iPhone 几，或者小米华为诺基亚，统统与设计稿的效果是一致的\n\n### 测试机永不构建！\n开发代码与产品代码之间经过一层构建的过程，这个过程通常要花费两到三分钟，曾经一个常见的情节是，一个需要在测试机上反复调试的问题，也许只是把1改为2这样简单的修改都要经过构建，最终修复一个问题的时间，90%都花在了等待构建脚本跑完的过程中，如今在测试服上部署了一套 develop server，提交源码便可在真机上直接运行\n\n### 修正构建配置，代码体积不增反减！\n曾经在构建脚本中存在一个问题，有些代码会被反复打包到结果中，导致用户损失了大量的流量，后经过层层的拨丝抽茧，最终找到了问题的原因，并且完美的结绝了，如果对比去年的代码，从结果上来说，经过了一年的产品迭代后，代码总体积反而还缩小了不少\n\n### 增量更新，不浪费1KB流量！\n曾经的产品代码如同是浇铸出来的一块整体，每次发布新版本都要求用户全量更新，哪怕只是做了一点点修改，后经过优化，将产品代码拆解分层，现在可以精确到几KB级别的更新\n\n### 一键发布产品代码，拒绝做脚本的奴隶！\n由于移动端产品线众多，一次发布过程需要运行最多6条命令，其中若有些许人为失误，就会发生无法预计的错误，如今通过一个脚本来代替人为操作，可靠，高效\n\n### 解放生产力，活动页辅助切图工具！\n曾经来自各种合作方的活动页面占用了很大一部分工作内容，然而其本身就技术层面而言，都是重复性的切图工作，所以我们创造了一套辅助工具，包含 photoshop 切图宏，和自动生成页面脚本，如今制作一个活动页面只需要原来六分之一的时间\n\n### 老中医根治牛皮癣，解决缓存更新问题！\n缓存问题可谓是牛皮癣，虽不致命但是无法让人视而不见，曾经由于一台机器上缓存没有同步，还引发了一场毁灭性的风波，后来在我们在需要更新缓存的文件后面，增加了一些特殊的字符串，客户端会通过这些字符串的变化放弃缓存，从而彻底解决了缓存问题\n","source":"_posts/2016年工作总结.md","raw":"---\ntitle: 2016年工作总结\ndate: 2017-01-15 11:18:21\ncategories: 技术\n---\n今年不知怎么的，各大技术社区的年度总结主题特别多，总想着我也要写一篇总结总结，但种种原因（懒）导致一直没有执行起来，直到周四我的领导跑来说让我写一篇公司的前端年度工作总结，年会上要用到，好吧那就搞起来，一番酝酿之后，2016年技术上还演进了不少东西，由于汇报的对象都是普通非技术人员，把点都覆盖到的同时，用词都比较通俗，也比较标题党，给人一种略感浮夸的艺术效果。。\n<!--more-->\n\n### 与分辨率和解，彻底搞定适配性问题！\n以一张 iPhone6 为标准分辨率的设计稿，来兼容市面上五花八门的手机屏幕，一度曾是前端工作中非常头疼的问题之一，如今通过使用一种全新的相对尺寸单位，彻底解决了适配性问题，不管用户用的是 iPhone 几，或者小米华为诺基亚，统统与设计稿的效果是一致的\n\n### 测试机永不构建！\n开发代码与产品代码之间经过一层构建的过程，这个过程通常要花费两到三分钟，曾经一个常见的情节是，一个需要在测试机上反复调试的问题，也许只是把1改为2这样简单的修改都要经过构建，最终修复一个问题的时间，90%都花在了等待构建脚本跑完的过程中，如今在测试服上部署了一套 develop server，提交源码便可在真机上直接运行\n\n### 修正构建配置，代码体积不增反减！\n曾经在构建脚本中存在一个问题，有些代码会被反复打包到结果中，导致用户损失了大量的流量，后经过层层的拨丝抽茧，最终找到了问题的原因，并且完美的结绝了，如果对比去年的代码，从结果上来说，经过了一年的产品迭代后，代码总体积反而还缩小了不少\n\n### 增量更新，不浪费1KB流量！\n曾经的产品代码如同是浇铸出来的一块整体，每次发布新版本都要求用户全量更新，哪怕只是做了一点点修改，后经过优化，将产品代码拆解分层，现在可以精确到几KB级别的更新\n\n### 一键发布产品代码，拒绝做脚本的奴隶！\n由于移动端产品线众多，一次发布过程需要运行最多6条命令，其中若有些许人为失误，就会发生无法预计的错误，如今通过一个脚本来代替人为操作，可靠，高效\n\n### 解放生产力，活动页辅助切图工具！\n曾经来自各种合作方的活动页面占用了很大一部分工作内容，然而其本身就技术层面而言，都是重复性的切图工作，所以我们创造了一套辅助工具，包含 photoshop 切图宏，和自动生成页面脚本，如今制作一个活动页面只需要原来六分之一的时间\n\n### 老中医根治牛皮癣，解决缓存更新问题！\n缓存问题可谓是牛皮癣，虽不致命但是无法让人视而不见，曾经由于一台机器上缓存没有同步，还引发了一场毁灭性的风波，后来在我们在需要更新缓存的文件后面，增加了一些特殊的字符串，客户端会通过这些字符串的变化放弃缓存，从而彻底解决了缓存问题\n","slug":"2016年工作总结","published":1,"updated":"2017-05-06T01:47:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uybc0002d5tb5yk5ftg7","content":"<p>今年不知怎么的，各大技术社区的年度总结主题特别多，总想着我也要写一篇总结总结，但种种原因（懒）导致一直没有执行起来，直到周四我的领导跑来说让我写一篇公司的前端年度工作总结，年会上要用到，好吧那就搞起来，一番酝酿之后，2016年技术上还演进了不少东西，由于汇报的对象都是普通非技术人员，把点都覆盖到的同时，用词都比较通俗，也比较标题党，给人一种略感浮夸的艺术效果。。<br><a id=\"more\"></a></p><h3 id=\"与分辨率和解，彻底搞定适配性问题！\"><a href=\"#与分辨率和解，彻底搞定适配性问题！\" class=\"headerlink\" title=\"与分辨率和解，彻底搞定适配性问题！\"></a>与分辨率和解，彻底搞定适配性问题！</h3><p>以一张 iPhone6 为标准分辨率的设计稿，来兼容市面上五花八门的手机屏幕，一度曾是前端工作中非常头疼的问题之一，如今通过使用一种全新的相对尺寸单位，彻底解决了适配性问题，不管用户用的是 iPhone 几，或者小米华为诺基亚，统统与设计稿的效果是一致的</p><h3 id=\"测试机永不构建！\"><a href=\"#测试机永不构建！\" class=\"headerlink\" title=\"测试机永不构建！\"></a>测试机永不构建！</h3><p>开发代码与产品代码之间经过一层构建的过程，这个过程通常要花费两到三分钟，曾经一个常见的情节是，一个需要在测试机上反复调试的问题，也许只是把1改为2这样简单的修改都要经过构建，最终修复一个问题的时间，90%都花在了等待构建脚本跑完的过程中，如今在测试服上部署了一套 develop server，提交源码便可在真机上直接运行</p><h3 id=\"修正构建配置，代码体积不增反减！\"><a href=\"#修正构建配置，代码体积不增反减！\" class=\"headerlink\" title=\"修正构建配置，代码体积不增反减！\"></a>修正构建配置，代码体积不增反减！</h3><p>曾经在构建脚本中存在一个问题，有些代码会被反复打包到结果中，导致用户损失了大量的流量，后经过层层的拨丝抽茧，最终找到了问题的原因，并且完美的结绝了，如果对比去年的代码，从结果上来说，经过了一年的产品迭代后，代码总体积反而还缩小了不少</p><h3 id=\"增量更新，不浪费1KB流量！\"><a href=\"#增量更新，不浪费1KB流量！\" class=\"headerlink\" title=\"增量更新，不浪费1KB流量！\"></a>增量更新，不浪费1KB流量！</h3><p>曾经的产品代码如同是浇铸出来的一块整体，每次发布新版本都要求用户全量更新，哪怕只是做了一点点修改，后经过优化，将产品代码拆解分层，现在可以精确到几KB级别的更新</p><h3 id=\"一键发布产品代码，拒绝做脚本的奴隶！\"><a href=\"#一键发布产品代码，拒绝做脚本的奴隶！\" class=\"headerlink\" title=\"一键发布产品代码，拒绝做脚本的奴隶！\"></a>一键发布产品代码，拒绝做脚本的奴隶！</h3><p>由于移动端产品线众多，一次发布过程需要运行最多6条命令，其中若有些许人为失误，就会发生无法预计的错误，如今通过一个脚本来代替人为操作，可靠，高效</p><h3 id=\"解放生产力，活动页辅助切图工具！\"><a href=\"#解放生产力，活动页辅助切图工具！\" class=\"headerlink\" title=\"解放生产力，活动页辅助切图工具！\"></a>解放生产力，活动页辅助切图工具！</h3><p>曾经来自各种合作方的活动页面占用了很大一部分工作内容，然而其本身就技术层面而言，都是重复性的切图工作，所以我们创造了一套辅助工具，包含 photoshop 切图宏，和自动生成页面脚本，如今制作一个活动页面只需要原来六分之一的时间</p><h3 id=\"老中医根治牛皮癣，解决缓存更新问题！\"><a href=\"#老中医根治牛皮癣，解决缓存更新问题！\" class=\"headerlink\" title=\"老中医根治牛皮癣，解决缓存更新问题！\"></a>老中医根治牛皮癣，解决缓存更新问题！</h3><p>缓存问题可谓是牛皮癣，虽不致命但是无法让人视而不见，曾经由于一台机器上缓存没有同步，还引发了一场毁灭性的风波，后来在我们在需要更新缓存的文件后面，增加了一些特殊的字符串，客户端会通过这些字符串的变化放弃缓存，从而彻底解决了缓存问题</p>","excerpt":"<p>今年不知怎么的，各大技术社区的年度总结主题特别多，总想着我也要写一篇总结总结，但种种原因（懒）导致一直没有执行起来，直到周四我的领导跑来说让我写一篇公司的前端年度工作总结，年会上要用到，好吧那就搞起来，一番酝酿之后，2016年技术上还演进了不少东西，由于汇报的对象都是普通非技术人员，把点都覆盖到的同时，用词都比较通俗，也比较标题党，给人一种略感浮夸的艺术效果。。<br>","more":"</p><h3 id=\"与分辨率和解，彻底搞定适配性问题！\"><a href=\"#与分辨率和解，彻底搞定适配性问题！\" class=\"headerlink\" title=\"与分辨率和解，彻底搞定适配性问题！\"></a>与分辨率和解，彻底搞定适配性问题！</h3><p>以一张 iPhone6 为标准分辨率的设计稿，来兼容市面上五花八门的手机屏幕，一度曾是前端工作中非常头疼的问题之一，如今通过使用一种全新的相对尺寸单位，彻底解决了适配性问题，不管用户用的是 iPhone 几，或者小米华为诺基亚，统统与设计稿的效果是一致的</p><h3 id=\"测试机永不构建！\"><a href=\"#测试机永不构建！\" class=\"headerlink\" title=\"测试机永不构建！\"></a>测试机永不构建！</h3><p>开发代码与产品代码之间经过一层构建的过程，这个过程通常要花费两到三分钟，曾经一个常见的情节是，一个需要在测试机上反复调试的问题，也许只是把1改为2这样简单的修改都要经过构建，最终修复一个问题的时间，90%都花在了等待构建脚本跑完的过程中，如今在测试服上部署了一套 develop server，提交源码便可在真机上直接运行</p><h3 id=\"修正构建配置，代码体积不增反减！\"><a href=\"#修正构建配置，代码体积不增反减！\" class=\"headerlink\" title=\"修正构建配置，代码体积不增反减！\"></a>修正构建配置，代码体积不增反减！</h3><p>曾经在构建脚本中存在一个问题，有些代码会被反复打包到结果中，导致用户损失了大量的流量，后经过层层的拨丝抽茧，最终找到了问题的原因，并且完美的结绝了，如果对比去年的代码，从结果上来说，经过了一年的产品迭代后，代码总体积反而还缩小了不少</p><h3 id=\"增量更新，不浪费1KB流量！\"><a href=\"#增量更新，不浪费1KB流量！\" class=\"headerlink\" title=\"增量更新，不浪费1KB流量！\"></a>增量更新，不浪费1KB流量！</h3><p>曾经的产品代码如同是浇铸出来的一块整体，每次发布新版本都要求用户全量更新，哪怕只是做了一点点修改，后经过优化，将产品代码拆解分层，现在可以精确到几KB级别的更新</p><h3 id=\"一键发布产品代码，拒绝做脚本的奴隶！\"><a href=\"#一键发布产品代码，拒绝做脚本的奴隶！\" class=\"headerlink\" title=\"一键发布产品代码，拒绝做脚本的奴隶！\"></a>一键发布产品代码，拒绝做脚本的奴隶！</h3><p>由于移动端产品线众多，一次发布过程需要运行最多6条命令，其中若有些许人为失误，就会发生无法预计的错误，如今通过一个脚本来代替人为操作，可靠，高效</p><h3 id=\"解放生产力，活动页辅助切图工具！\"><a href=\"#解放生产力，活动页辅助切图工具！\" class=\"headerlink\" title=\"解放生产力，活动页辅助切图工具！\"></a>解放生产力，活动页辅助切图工具！</h3><p>曾经来自各种合作方的活动页面占用了很大一部分工作内容，然而其本身就技术层面而言，都是重复性的切图工作，所以我们创造了一套辅助工具，包含 photoshop 切图宏，和自动生成页面脚本，如今制作一个活动页面只需要原来六分之一的时间</p><h3 id=\"老中医根治牛皮癣，解决缓存更新问题！\"><a href=\"#老中医根治牛皮癣，解决缓存更新问题！\" class=\"headerlink\" title=\"老中医根治牛皮癣，解决缓存更新问题！\"></a>老中医根治牛皮癣，解决缓存更新问题！</h3><p>缓存问题可谓是牛皮癣，虽不致命但是无法让人视而不见，曾经由于一台机器上缓存没有同步，还引发了一场毁灭性的风波，后来在我们在需要更新缓存的文件后面，增加了一些特殊的字符串，客户端会通过这些字符串的变化放弃缓存，从而彻底解决了缓存问题</p>"},{"title":"Webpack 基本概念","date":"2016-12-27T04:40:10.000Z","_content":"Webpack 的核心概念可以分为：Entry point，Chunk，Module，这三者之间的关系可以用一张官方图片来解释：\n\n![generated update chunks](https://webpack.github.io/assets/HMR.svg)\n\n## [Entry point](http://webpack.github.io/docs/configuration.html#entry)\nEntry point 是比较好理解的，指的是程序的入口文件，也是 Webpack 解析依赖的入口文件，Entry point 可以设置单入口或者多入口，以一个最简单的入口文件为例\n\n``` js\n// index.js\nvar a = require('./a');\n\na();\n```\n\n## Chunk\nChunk 指的是经过编译后的代码包，Webpack 会将每个由用户定义的模块，转换成 Chunk 的形式，这些 Chunk 最终汇总到一个数组中，供运行时调用\n\n``` js\n// 原始的 a.js\nmodule.export = function() {\n    alert('Hello');\n};\n\n// 经过编译后的 chunk\nfunction(module, exports, __webpack_require__) {\n    'use strict';\n\n    module.exports = function () {\n        alert('Hello');\n    };\n}\n```\n\n这里 Chunk 转换的过程中还会调用 Loaders，Loaders 的作用是将非 JS 资源转换成字符串，并且提供运行时解析这些字符串的功能\n\n最终 Webpack 为模块代码外面包了一层 function，并且注入了 `module`、`exports` 和 `__webpack_require__` 3个参数，这些参数的定义看下文代码示例中的 `require` 方法\n\n\n## Module\nModule 是拥有如下结构的一个 `Object`，它的作用是保存 Chunk 的信息\n\n``` js\n{\n    exports: {},\n    id: 3,\n    loaded: false\n}\n```\n一个 Module 对应一个 Chunk，`exports` 保存了 Chunk 中输出的内容，`id` 为 Chunk 的索引，`loaded` 记录 Chunk 是否加载\n\n## 它们是如何工作的？\nWebpack Runtime 的一个简单实现\n\n``` js\nconst chunks = [\n    function(module, exports, __webpack_require__) {\n        'use strict';\n\n        module.exports = function () {\n            alert('Hello');\n        };\n    },\n    ...\n];\n\nfunction require(id) {\n    // 定义 module 对象\n    var module = {\n        exports: {},\n        id: moduleId,\n        loaded: false\n    };\n\n    // 执行 chunk\n    chunks[id].call(module.exports, module, module.exports, require);\n\n    module.loaded = true;\n\n    // 返回 module 的输出部分\n\treturn module.exports;\n}\n\n// entry point\nvar a = require(0); // 这里的 require('./a') 会被替换为 chunk 的索引\n\na();\n//\n```\n","source":"_posts/Webpack-基本概念.md","raw":"---\ntitle: Webpack 基本概念\ndate: 2016-12-27 12:40:10\ncategories: 技术\ntags: Webpack\n---\nWebpack 的核心概念可以分为：Entry point，Chunk，Module，这三者之间的关系可以用一张官方图片来解释：\n\n![generated update chunks](https://webpack.github.io/assets/HMR.svg)\n\n## [Entry point](http://webpack.github.io/docs/configuration.html#entry)\nEntry point 是比较好理解的，指的是程序的入口文件，也是 Webpack 解析依赖的入口文件，Entry point 可以设置单入口或者多入口，以一个最简单的入口文件为例\n\n``` js\n// index.js\nvar a = require('./a');\n\na();\n```\n\n## Chunk\nChunk 指的是经过编译后的代码包，Webpack 会将每个由用户定义的模块，转换成 Chunk 的形式，这些 Chunk 最终汇总到一个数组中，供运行时调用\n\n``` js\n// 原始的 a.js\nmodule.export = function() {\n    alert('Hello');\n};\n\n// 经过编译后的 chunk\nfunction(module, exports, __webpack_require__) {\n    'use strict';\n\n    module.exports = function () {\n        alert('Hello');\n    };\n}\n```\n\n这里 Chunk 转换的过程中还会调用 Loaders，Loaders 的作用是将非 JS 资源转换成字符串，并且提供运行时解析这些字符串的功能\n\n最终 Webpack 为模块代码外面包了一层 function，并且注入了 `module`、`exports` 和 `__webpack_require__` 3个参数，这些参数的定义看下文代码示例中的 `require` 方法\n\n\n## Module\nModule 是拥有如下结构的一个 `Object`，它的作用是保存 Chunk 的信息\n\n``` js\n{\n    exports: {},\n    id: 3,\n    loaded: false\n}\n```\n一个 Module 对应一个 Chunk，`exports` 保存了 Chunk 中输出的内容，`id` 为 Chunk 的索引，`loaded` 记录 Chunk 是否加载\n\n## 它们是如何工作的？\nWebpack Runtime 的一个简单实现\n\n``` js\nconst chunks = [\n    function(module, exports, __webpack_require__) {\n        'use strict';\n\n        module.exports = function () {\n            alert('Hello');\n        };\n    },\n    ...\n];\n\nfunction require(id) {\n    // 定义 module 对象\n    var module = {\n        exports: {},\n        id: moduleId,\n        loaded: false\n    };\n\n    // 执行 chunk\n    chunks[id].call(module.exports, module, module.exports, require);\n\n    module.loaded = true;\n\n    // 返回 module 的输出部分\n\treturn module.exports;\n}\n\n// entry point\nvar a = require(0); // 这里的 require('./a') 会被替换为 chunk 的索引\n\na();\n//\n```\n","slug":"Webpack-基本概念","published":1,"updated":"2017-05-06T01:47:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uybi0004d5tbisingzu0","content":"<p>Webpack 的核心概念可以分为：Entry point，Chunk，Module，这三者之间的关系可以用一张官方图片来解释：</p><p><img src=\"https://webpack.github.io/assets/HMR.svg\" alt=\"generated update chunks\"></p><h2 id=\"Entry-point\"><a href=\"#Entry-point\" class=\"headerlink\" title=\"Entry point\"></a><a href=\"http://webpack.github.io/docs/configuration.html#entry\" target=\"_blank\" rel=\"external\">Entry point</a></h2><p>Entry point 是比较好理解的，指的是程序的入口文件，也是 Webpack 解析依赖的入口文件，Entry point 可以设置单入口或者多入口，以一个最简单的入口文件为例</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</div><div class=\"line\"></div><div class=\"line\">a();</div></pre></td></tr></table></figure><h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><p>Chunk 指的是经过编译后的代码包，Webpack 会将每个由用户定义的模块，转换成 Chunk 的形式，这些 Chunk 最终汇总到一个数组中，供运行时调用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原始的 a.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.export = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 经过编译后的 chunk</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>这里 Chunk 转换的过程中还会调用 Loaders，Loaders 的作用是将非 JS 资源转换成字符串，并且提供运行时解析这些字符串的功能</p><p>最终 Webpack 为模块代码外面包了一层 function，并且注入了 <code>module</code>、<code>exports</code> 和 <code>__webpack_require__</code> 3个参数，这些参数的定义看下文代码示例中的 <code>require</code> 方法</p><h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><p>Module 是拥有如下结构的一个 <code>Object</code>，它的作用是保存 Chunk 的信息</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>一个 Module 对应一个 Chunk，<code>exports</code> 保存了 Chunk 中输出的内容，<code>id</code> 为 Chunk 的索引，<code>loaded</code> 记录 Chunk 是否加载</p><h2 id=\"它们是如何工作的？\"><a href=\"#它们是如何工作的？\" class=\"headerlink\" title=\"它们是如何工作的？\"></a>它们是如何工作的？</h2><p>Webpack Runtime 的一个简单实现</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> chunks = [</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">        'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ...</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义 module 对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;</div><div class=\"line\">        <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">        <span class=\"attr\">id</span>: moduleId,</div><div class=\"line\">        <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 执行 chunk</span></div><div class=\"line\">    chunks[id].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, <span class=\"built_in\">require</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">module</span>.loaded = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 返回 module 的输出部分</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// entry point</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 这里的 require('./a') 会被替换为 chunk 的索引</span></div><div class=\"line\"></div><div class=\"line\">a();</div><div class=\"line\"><span class=\"comment\">//</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>Webpack 的核心概念可以分为：Entry point，Chunk，Module，这三者之间的关系可以用一张官方图片来解释：</p><p><img src=\"https://webpack.github.io/assets/HMR.svg\" alt=\"generated update chunks\"></p><h2 id=\"Entry-point\"><a href=\"#Entry-point\" class=\"headerlink\" title=\"Entry point\"></a><a href=\"http://webpack.github.io/docs/configuration.html#entry\">Entry point</a></h2><p>Entry point 是比较好理解的，指的是程序的入口文件，也是 Webpack 解析依赖的入口文件，Entry point 可以设置单入口或者多入口，以一个最简单的入口文件为例</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</div><div class=\"line\"></div><div class=\"line\">a();</div></pre></td></tr></table></figure><h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><p>Chunk 指的是经过编译后的代码包，Webpack 会将每个由用户定义的模块，转换成 Chunk 的形式，这些 Chunk 最终汇总到一个数组中，供运行时调用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原始的 a.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.export = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 经过编译后的 chunk</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>这里 Chunk 转换的过程中还会调用 Loaders，Loaders 的作用是将非 JS 资源转换成字符串，并且提供运行时解析这些字符串的功能</p><p>最终 Webpack 为模块代码外面包了一层 function，并且注入了 <code>module</code>、<code>exports</code> 和 <code>__webpack_require__</code> 3个参数，这些参数的定义看下文代码示例中的 <code>require</code> 方法</p><h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><p>Module 是拥有如下结构的一个 <code>Object</code>，它的作用是保存 Chunk 的信息</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>一个 Module 对应一个 Chunk，<code>exports</code> 保存了 Chunk 中输出的内容，<code>id</code> 为 Chunk 的索引，<code>loaded</code> 记录 Chunk 是否加载</p><h2 id=\"它们是如何工作的？\"><a href=\"#它们是如何工作的？\" class=\"headerlink\" title=\"它们是如何工作的？\"></a>它们是如何工作的？</h2><p>Webpack Runtime 的一个简单实现</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> chunks = [</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">        'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">'Hello'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ...</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义 module 对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;</div><div class=\"line\">        <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">        <span class=\"attr\">id</span>: moduleId,</div><div class=\"line\">        <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 执行 chunk</span></div><div class=\"line\">    chunks[id].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, <span class=\"built_in\">require</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">module</span>.loaded = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 返回 module 的输出部分</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// entry point</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 这里的 require('./a') 会被替换为 chunk 的索引</span></div><div class=\"line\"></div><div class=\"line\">a();</div><div class=\"line\"><span class=\"comment\">//</span></div></pre></td></tr></table></figure>"},{"title":"Webpack 动态加载","date":"2016-12-19T07:28:17.000Z","_content":"在 Webpack 的使用过程中，一开始人们都习惯了将一切东西 `import` 进来，这样做很符合逻辑，但是随着业务量不断增加，会发现 bundle 的体积不断增大，导致首次加载非常缓慢，比如我有一个路由映射的对象是这样写的\n``` javascript\n...\n'/shop': require('components/Shop/Home'),\n'/shop/goods': require('components/Shop/Goods'),\n'/shop/goods-detail': require('components/Shop/Detail'),\n...\n```\n\n最终这些模块都会被打包进 bundle，而我想要的效果是每次只加载当前路由对应的模块，这一点 Webpack 已经为我们提供了解决方案\n## [Code Splitting](http://webpack.github.io/docs/code-splitting.html)\nCode Splitting 的做法是在代码中定义分离点，在这个分离点内依赖的模块，在编译阶段会被单独打包，并在运行时动态加载进来\n\nCode Splitting 支持 AMD 和 CommonJs 两种风格\n#### CommonJs:\n``` js\n// 参数一 module-a, module-b 作为依赖会首先加载\n// 参数二是 callback 函数，参数 require 可以加载模块\n// 参数三是为这个分离点模块命名\n// 最终 module-a module-b module-c 会被打包成一个文件\nrequire.ensure([\"module-a\", \"module-b\"], function(require) {\n    var a = require(\"module-a\");\n    var c = require(\"module-c\");\n    // ...\n}, 'bundle');\n```\n注意：require.ensure 的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。\n\n#### AMD:\n``` js\n// 参数一同样会首先被加载，并作为参数传入 callback\nrequire([\"module-a\", \"module-b\"], function(a, b) {\n    var c = require(\"module-c\");\n    // ...\n});\n```\n注意 callback 是必须的\n\n当代码运行时 Webpack 会在文档中动态插入\n``` js\n<script type=\"text/javascript\" charset=\"utf-8\" async=\"\" src=\"1.bundle.js\"></script>\n```\n\nWebpack 只会当代码运行时才去加载，假如说我定义了多个分离点\n``` js\nrequire.ensure([], function(require) {\n    var a = require(\"module-a\");\n});\n\nif (false) {\n    require.ensure([], function(require) {\n        var a = require(\"module-b\");\n    });\n}\n```\nmodule-b 是不会被加载，利用这个功能，我们将那个路由映射修改一下\n```js\n...\n'/shop': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Home\"));\n}),\n'/shop/goods': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Goods\"));\n}),\n'/shop/goods-detail': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Detail\"));\n}),\n...\n```\n在路由解析的代码也需要修改一下\n``` js\n// 原来的同步获取模块写法\nvar module = router.match(location.href);\nrender(module);\n\n// 现使用异步方法获得\nrouter.match(location.href, function(module) {\n    render(module);\n});\n```\n由于 require.ensure 写法过于冗长，我曾想把这段封装起来，但是发现是不可行的，require.ensure 方法十分特殊，必须以字符串作为参数\n``` js\n// 以下方式无效！\nfunction getModule(path, callback) {\n    require.ensure([], function(require) {\n        callback(require(path));\n    });\n}\n\n...\n'/shop': callback => getModule(\"components/Shop/Home\", callback),\n...\n```\n\n## 请求路经配置\n根据 Code Splitting 的原理，模块请求的默认 hostname 是和当前页面相同的，比如访问 `http://www.x.com/` 那么模块的请求就是 `http://www.x.com/1.bundle.js`\n\n如果要设置在别的域获取，可以在 `output.publicPath` 中设置\n``` js\n...\noutput: {\n    publicPath: 'http://cdn.x.com/'\n}\n...\n```\n那么请求就变成了 `http://cdn.x.com/1.bundle.js`\n\n这是一种在编译阶段配置的方法，如果路经需要到运行时才能确定，可以在入口文件中设置\n``` js\n__webpack_public_path__ = `http://${config.host}:/`\n```\n详细用法参考 [https://webpack.github.io/docs/configuration.html#output-path](https://webpack.github.io/docs/configuration.html#output-path)\n","source":"_posts/Webpack-动态加载.md","raw":"---\ntitle: Webpack 动态加载\ndate: 2016-12-19 15:28:17\ncategories: 技术\ntags: Webpack\n---\n在 Webpack 的使用过程中，一开始人们都习惯了将一切东西 `import` 进来，这样做很符合逻辑，但是随着业务量不断增加，会发现 bundle 的体积不断增大，导致首次加载非常缓慢，比如我有一个路由映射的对象是这样写的\n``` javascript\n...\n'/shop': require('components/Shop/Home'),\n'/shop/goods': require('components/Shop/Goods'),\n'/shop/goods-detail': require('components/Shop/Detail'),\n...\n```\n\n最终这些模块都会被打包进 bundle，而我想要的效果是每次只加载当前路由对应的模块，这一点 Webpack 已经为我们提供了解决方案\n## [Code Splitting](http://webpack.github.io/docs/code-splitting.html)\nCode Splitting 的做法是在代码中定义分离点，在这个分离点内依赖的模块，在编译阶段会被单独打包，并在运行时动态加载进来\n\nCode Splitting 支持 AMD 和 CommonJs 两种风格\n#### CommonJs:\n``` js\n// 参数一 module-a, module-b 作为依赖会首先加载\n// 参数二是 callback 函数，参数 require 可以加载模块\n// 参数三是为这个分离点模块命名\n// 最终 module-a module-b module-c 会被打包成一个文件\nrequire.ensure([\"module-a\", \"module-b\"], function(require) {\n    var a = require(\"module-a\");\n    var c = require(\"module-c\");\n    // ...\n}, 'bundle');\n```\n注意：require.ensure 的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。\n\n#### AMD:\n``` js\n// 参数一同样会首先被加载，并作为参数传入 callback\nrequire([\"module-a\", \"module-b\"], function(a, b) {\n    var c = require(\"module-c\");\n    // ...\n});\n```\n注意 callback 是必须的\n\n当代码运行时 Webpack 会在文档中动态插入\n``` js\n<script type=\"text/javascript\" charset=\"utf-8\" async=\"\" src=\"1.bundle.js\"></script>\n```\n\nWebpack 只会当代码运行时才去加载，假如说我定义了多个分离点\n``` js\nrequire.ensure([], function(require) {\n    var a = require(\"module-a\");\n});\n\nif (false) {\n    require.ensure([], function(require) {\n        var a = require(\"module-b\");\n    });\n}\n```\nmodule-b 是不会被加载，利用这个功能，我们将那个路由映射修改一下\n```js\n...\n'/shop': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Home\"));\n}),\n'/shop/goods': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Goods\"));\n}),\n'/shop/goods-detail': callback => require.ensure([], function(require) {\n    callback(require(\"components/Shop/Detail\"));\n}),\n...\n```\n在路由解析的代码也需要修改一下\n``` js\n// 原来的同步获取模块写法\nvar module = router.match(location.href);\nrender(module);\n\n// 现使用异步方法获得\nrouter.match(location.href, function(module) {\n    render(module);\n});\n```\n由于 require.ensure 写法过于冗长，我曾想把这段封装起来，但是发现是不可行的，require.ensure 方法十分特殊，必须以字符串作为参数\n``` js\n// 以下方式无效！\nfunction getModule(path, callback) {\n    require.ensure([], function(require) {\n        callback(require(path));\n    });\n}\n\n...\n'/shop': callback => getModule(\"components/Shop/Home\", callback),\n...\n```\n\n## 请求路经配置\n根据 Code Splitting 的原理，模块请求的默认 hostname 是和当前页面相同的，比如访问 `http://www.x.com/` 那么模块的请求就是 `http://www.x.com/1.bundle.js`\n\n如果要设置在别的域获取，可以在 `output.publicPath` 中设置\n``` js\n...\noutput: {\n    publicPath: 'http://cdn.x.com/'\n}\n...\n```\n那么请求就变成了 `http://cdn.x.com/1.bundle.js`\n\n这是一种在编译阶段配置的方法，如果路经需要到运行时才能确定，可以在入口文件中设置\n``` js\n__webpack_public_path__ = `http://${config.host}:/`\n```\n详细用法参考 [https://webpack.github.io/docs/configuration.html#output-path](https://webpack.github.io/docs/configuration.html#output-path)\n","slug":"Webpack-动态加载","published":1,"updated":"2017-05-06T01:47:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uybj0005d5tb2fmj9bd4","content":"<p>在 Webpack 的使用过程中，一开始人们都习惯了将一切东西 <code>import</code> 进来，这样做很符合逻辑，但是随着业务量不断增加，会发现 bundle 的体积不断增大，导致首次加载非常缓慢，比如我有一个路由映射的对象是这样写的<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Home'</span>),</div><div class=\"line\"><span class=\"string\">'/shop/goods'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Goods'</span>),</div><div class=\"line\"><span class=\"string\">'/shop/goods-detail'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Detail'</span>),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>最终这些模块都会被打包进 bundle，而我想要的效果是每次只加载当前路由对应的模块，这一点 Webpack 已经为我们提供了解决方案</p><h2 id=\"Code-Splitting\"><a href=\"#Code-Splitting\" class=\"headerlink\" title=\"Code Splitting\"></a><a href=\"http://webpack.github.io/docs/code-splitting.html\" target=\"_blank\" rel=\"external\">Code Splitting</a></h2><p>Code Splitting 的做法是在代码中定义分离点，在这个分离点内依赖的模块，在编译阶段会被单独打包，并在运行时动态加载进来</p><p>Code Splitting 支持 AMD 和 CommonJs 两种风格</p><h4 id=\"CommonJs\"><a href=\"#CommonJs\" class=\"headerlink\" title=\"CommonJs:\"></a>CommonJs:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数一 module-a, module-b 作为依赖会首先加载</span></div><div class=\"line\"><span class=\"comment\">// 参数二是 callback 函数，参数 require 可以加载模块</span></div><div class=\"line\"><span class=\"comment\">// 参数三是为这个分离点模块命名</span></div><div class=\"line\"><span class=\"comment\">// 最终 module-a module-b module-c 会被打包成一个文件</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-c\"</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;, <span class=\"string\">'bundle'</span>);</div></pre></td></tr></table></figure><p>注意：require.ensure 的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。</p><h4 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD:\"></a>AMD:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数一同样会首先被加载，并作为参数传入 callback</span></div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-c\"</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>注意 callback 是必须的</p><p>当代码运行时 Webpack 会在文档中动态插入<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> charset=<span class=\"string\">\"utf-8\"</span> <span class=\"keyword\">async</span>=<span class=\"string\">\"\"</span> src=<span class=\"string\">\"1.bundle.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p></p><p>Webpack 只会当代码运行时才去加载，假如说我定义了多个分离点<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-b\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>module-b 是不会被加载，利用这个功能，我们将那个路由映射修改一下<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Home\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\"><span class=\"string\">'/shop/goods'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Goods\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\"><span class=\"string\">'/shop/goods-detail'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Detail\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>在路由解析的代码也需要修改一下<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原来的同步获取模块写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = router.match(location.href);</div><div class=\"line\">render(<span class=\"built_in\">module</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 现使用异步方法获得</span></div><div class=\"line\">router.match(location.href, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module</span>) </span>&#123;</div><div class=\"line\">    render(<span class=\"built_in\">module</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p></p><p>由于 require.ensure 写法过于冗长，我曾想把这段封装起来，但是发现是不可行的，require.ensure 方法十分特殊，必须以字符串作为参数<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下方式无效！</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getModule</span>(<span class=\"params\">path, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        callback(<span class=\"built_in\">require</span>(path));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> getModule(<span class=\"string\">\"components/Shop/Home\"</span>, callback),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><h2 id=\"请求路经配置\"><a href=\"#请求路经配置\" class=\"headerlink\" title=\"请求路经配置\"></a>请求路经配置</h2><p>根据 Code Splitting 的原理，模块请求的默认 hostname 是和当前页面相同的，比如访问 <code>http://www.x.com/</code> 那么模块的请求就是 <code>http://www.x.com/1.bundle.js</code></p><p>如果要设置在别的域获取，可以在 <code>output.publicPath</code> 中设置<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">output: &#123;</div><div class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">'http://cdn.x.com/'</span></div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>那么请求就变成了 <code>http://cdn.x.com/1.bundle.js</code></p><p>这是一种在编译阶段配置的方法，如果路经需要到运行时才能确定，可以在入口文件中设置<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__webpack_public_path__ = <span class=\"string\">`http://<span class=\"subst\">$&#123;config.host&#125;</span>:/`</span></div></pre></td></tr></table></figure><p></p><p>详细用法参考 <a href=\"https://webpack.github.io/docs/configuration.html#output-path\" target=\"_blank\" rel=\"external\">https://webpack.github.io/docs/configuration.html#output-path</a></p>","excerpt":"","more":"<p>在 Webpack 的使用过程中，一开始人们都习惯了将一切东西 <code>import</code> 进来，这样做很符合逻辑，但是随着业务量不断增加，会发现 bundle 的体积不断增大，导致首次加载非常缓慢，比如我有一个路由映射的对象是这样写的<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Home'</span>),</div><div class=\"line\"><span class=\"string\">'/shop/goods'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Goods'</span>),</div><div class=\"line\"><span class=\"string\">'/shop/goods-detail'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'components/Shop/Detail'</span>),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>最终这些模块都会被打包进 bundle，而我想要的效果是每次只加载当前路由对应的模块，这一点 Webpack 已经为我们提供了解决方案</p><h2 id=\"Code-Splitting\"><a href=\"#Code-Splitting\" class=\"headerlink\" title=\"Code Splitting\"></a><a href=\"http://webpack.github.io/docs/code-splitting.html\">Code Splitting</a></h2><p>Code Splitting 的做法是在代码中定义分离点，在这个分离点内依赖的模块，在编译阶段会被单独打包，并在运行时动态加载进来</p><p>Code Splitting 支持 AMD 和 CommonJs 两种风格</p><h4 id=\"CommonJs\"><a href=\"#CommonJs\" class=\"headerlink\" title=\"CommonJs:\"></a>CommonJs:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数一 module-a, module-b 作为依赖会首先加载</span></div><div class=\"line\"><span class=\"comment\">// 参数二是 callback 函数，参数 require 可以加载模块</span></div><div class=\"line\"><span class=\"comment\">// 参数三是为这个分离点模块命名</span></div><div class=\"line\"><span class=\"comment\">// 最终 module-a module-b module-c 会被打包成一个文件</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-c\"</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;, <span class=\"string\">'bundle'</span>);</div></pre></td></tr></table></figure><p>注意：require.ensure 的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。</p><h4 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD:\"></a>AMD:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数一同样会首先被加载，并作为参数传入 callback</span></div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-c\"</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>注意 callback 是必须的</p><p>当代码运行时 Webpack 会在文档中动态插入<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> charset=<span class=\"string\">\"utf-8\"</span> <span class=\"keyword\">async</span>=<span class=\"string\">\"\"</span> src=<span class=\"string\">\"1.bundle.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p></p><p>Webpack 只会当代码运行时才去加载，假如说我定义了多个分离点<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-b\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>module-b 是不会被加载，利用这个功能，我们将那个路由映射修改一下<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Home\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\"><span class=\"string\">'/shop/goods'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Goods\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\"><span class=\"string\">'/shop/goods-detail'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    callback(<span class=\"built_in\">require</span>(<span class=\"string\">\"components/Shop/Detail\"</span>));</div><div class=\"line\">&#125;),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>在路由解析的代码也需要修改一下<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原来的同步获取模块写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = router.match(location.href);</div><div class=\"line\">render(<span class=\"built_in\">module</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 现使用异步方法获得</span></div><div class=\"line\">router.match(location.href, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module</span>) </span>&#123;</div><div class=\"line\">    render(<span class=\"built_in\">module</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p></p><p>由于 require.ensure 写法过于冗长，我曾想把这段封装起来，但是发现是不可行的，require.ensure 方法十分特殊，必须以字符串作为参数<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下方式无效！</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getModule</span>(<span class=\"params\">path, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        callback(<span class=\"built_in\">require</span>(path));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"><span class=\"string\">'/shop'</span>: <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> getModule(<span class=\"string\">\"components/Shop/Home\"</span>, callback),</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><h2 id=\"请求路经配置\"><a href=\"#请求路经配置\" class=\"headerlink\" title=\"请求路经配置\"></a>请求路经配置</h2><p>根据 Code Splitting 的原理，模块请求的默认 hostname 是和当前页面相同的，比如访问 <code>http://www.x.com/</code> 那么模块的请求就是 <code>http://www.x.com/1.bundle.js</code></p><p>如果要设置在别的域获取，可以在 <code>output.publicPath</code> 中设置<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">output: &#123;</div><div class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">'http://cdn.x.com/'</span></div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><p>那么请求就变成了 <code>http://cdn.x.com/1.bundle.js</code></p><p>这是一种在编译阶段配置的方法，如果路经需要到运行时才能确定，可以在入口文件中设置<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__webpack_public_path__ = <span class=\"string\">`http://<span class=\"subst\">$&#123;config.host&#125;</span>:/`</span></div></pre></td></tr></table></figure><p></p><p>详细用法参考 <a href=\"https://webpack.github.io/docs/configuration.html#output-path\">https://webpack.github.io/docs/configuration.html#output-path</a></p>"},{"title":"五线谱视谱练习程序","date":"2017-01-05T08:21:00.000Z","_content":"五线谱视谱练习程序，移动端访问\n\n<img src=\"https://i1.piimg.com/567571/4cc46b753fca58cd.jpg\" width=\"200\">\n","source":"_posts/五线谱视谱练习程序.md","raw":"---\ntitle: 五线谱视谱练习程序\ndate: 2017-01-05 16:21:00\ncategories: 技术\n---\n五线谱视谱练习程序，移动端访问\n\n<img src=\"https://i1.piimg.com/567571/4cc46b753fca58cd.jpg\" width=\"200\">\n","slug":"五线谱视谱练习程序","published":1,"updated":"2017-05-06T01:47:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uybl0007d5tb9dvpapkg","content":"<p>五线谱视谱练习程序，移动端访问</p><p><img src=\"https://i1.piimg.com/567571/4cc46b753fca58cd.jpg\" width=\"200\"></p>","excerpt":"","more":"<p>五线谱视谱练习程序，移动端访问</p><p><img src=\"https://i1.piimg.com/567571/4cc46b753fca58cd.jpg\" width=\"200\"></p>"},{"title":"一个新的开始","date":"2016-12-15T15:03:43.000Z","_content":"来到了这个新的博客，想着得写一篇具有纪念意义的文章，想来想去也不知从何说起，我这个人的叙述能力一般，写东西提起笔半天也下不去，最初有开博客的想法也是为了锻炼一下文笔，然而其实并没有写多少东西，即使写也是类似于笔记之类的，没什么语言组织在里面。最近由于服务器到期，也不想掏这个钱了，干脆弄了个 Hexo + Github Pages。在导入之前博客的时候发现页面格式变得乱七八糟，有些图片也挂了，而且写的内容现在看看也觉得幼齿的很，干脆统统不要，一切都从头开始\n\n关于写博客这件事情呢，我认为对学习掌握新知识是特别有帮助的，最重要的2个作用是\n* 把所学到的知识转换成自己的文字，本身是一个对知识的整理、思考、内化的过程\n* 人脑容量有限，趁想法还热乎的时候记录下来，分门别类管理，便于日后查阅\n\n博客还有一个重要的作用是 **装逼**，虽说目前没几个人能看到这些文字，但是未来总有那么个人无意走进来，从而发现我默默耕耘着的小天地，发自内心的为我点👍，对我来说也就足够了\n\n当然写博客最重要的是坚持，纵观我的博客史，发现自己并不是那么勤奋，从3年前开始，多的时候也就一两个月写一篇，有的时候半年才写一篇，想想当初设定的每星期写一篇的目标相去甚远，人呐，骨子里都是懒汉，但是到了一定的岁数，会发现坚持的力量有多么强大，滴水穿石的道理不是嘴上说说就懂的，以前总觉得时间多的是，可是时间哪天不是24小时，何时多出来过，不去珍惜到头来荒废的是自己，这次重开 blog，我也不给自己定什么目标了，平时多加以思考和总结，努力克服内心的懒汉，未来可能还是光明的\n\n关于这个博客，使用的是 [Hexo](https://hexo.io)，之前完全没接触过静态 blog，经人推荐后发现特别简洁，不需要部署一堆东西，也没有后台界面，你需要做的就是纯粹的专注于写作，这种返璞归真的体验真的棒极了，而且 Hexo 是开源的，想要什么直接自己折腾，对于程序员特别友好。站点是托管在 Github Pages，全球 CDN 分布，服务器方面的一概不用操心。HTTPs 证书用的是 [Cloudflare](https://www.cloudflare.com/) 提供的免费服务，反正只要他们家还开着，我就可以一直用下去……\n\n2016 年最后剩下半个月，也快要到我的生日了，身上的种种无知、浮躁会不会随着年龄的增长而减少一点呢？未来的道路又将会指引我通向何处？幸福究竟对我来说是什么样的？只有一点我是可以确认的，眼前的这条道路是真实的，一步一个脚印走下去，最终这些疑问都会得到答案，所以，整理好思绪，收拾好心情，如同这个崭新的博客，迎接未来的人生吧。**虽千万里 吾往矣！**\n","source":"_posts/一个新的开始.md","raw":"---\ntitle: 一个新的开始\ndate: 2016-12-15 23:03:43\ncategories: 随笔\n---\n来到了这个新的博客，想着得写一篇具有纪念意义的文章，想来想去也不知从何说起，我这个人的叙述能力一般，写东西提起笔半天也下不去，最初有开博客的想法也是为了锻炼一下文笔，然而其实并没有写多少东西，即使写也是类似于笔记之类的，没什么语言组织在里面。最近由于服务器到期，也不想掏这个钱了，干脆弄了个 Hexo + Github Pages。在导入之前博客的时候发现页面格式变得乱七八糟，有些图片也挂了，而且写的内容现在看看也觉得幼齿的很，干脆统统不要，一切都从头开始\n\n关于写博客这件事情呢，我认为对学习掌握新知识是特别有帮助的，最重要的2个作用是\n* 把所学到的知识转换成自己的文字，本身是一个对知识的整理、思考、内化的过程\n* 人脑容量有限，趁想法还热乎的时候记录下来，分门别类管理，便于日后查阅\n\n博客还有一个重要的作用是 **装逼**，虽说目前没几个人能看到这些文字，但是未来总有那么个人无意走进来，从而发现我默默耕耘着的小天地，发自内心的为我点👍，对我来说也就足够了\n\n当然写博客最重要的是坚持，纵观我的博客史，发现自己并不是那么勤奋，从3年前开始，多的时候也就一两个月写一篇，有的时候半年才写一篇，想想当初设定的每星期写一篇的目标相去甚远，人呐，骨子里都是懒汉，但是到了一定的岁数，会发现坚持的力量有多么强大，滴水穿石的道理不是嘴上说说就懂的，以前总觉得时间多的是，可是时间哪天不是24小时，何时多出来过，不去珍惜到头来荒废的是自己，这次重开 blog，我也不给自己定什么目标了，平时多加以思考和总结，努力克服内心的懒汉，未来可能还是光明的\n\n关于这个博客，使用的是 [Hexo](https://hexo.io)，之前完全没接触过静态 blog，经人推荐后发现特别简洁，不需要部署一堆东西，也没有后台界面，你需要做的就是纯粹的专注于写作，这种返璞归真的体验真的棒极了，而且 Hexo 是开源的，想要什么直接自己折腾，对于程序员特别友好。站点是托管在 Github Pages，全球 CDN 分布，服务器方面的一概不用操心。HTTPs 证书用的是 [Cloudflare](https://www.cloudflare.com/) 提供的免费服务，反正只要他们家还开着，我就可以一直用下去……\n\n2016 年最后剩下半个月，也快要到我的生日了，身上的种种无知、浮躁会不会随着年龄的增长而减少一点呢？未来的道路又将会指引我通向何处？幸福究竟对我来说是什么样的？只有一点我是可以确认的，眼前的这条道路是真实的，一步一个脚印走下去，最终这些疑问都会得到答案，所以，整理好思绪，收拾好心情，如同这个崭新的博客，迎接未来的人生吧。**虽千万里 吾往矣！**\n","slug":"一个新的开始","published":1,"updated":"2017-05-06T01:47:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uybq0009d5tbmbe0eyrk","content":"<p>来到了这个新的博客，想着得写一篇具有纪念意义的文章，想来想去也不知从何说起，我这个人的叙述能力一般，写东西提起笔半天也下不去，最初有开博客的想法也是为了锻炼一下文笔，然而其实并没有写多少东西，即使写也是类似于笔记之类的，没什么语言组织在里面。最近由于服务器到期，也不想掏这个钱了，干脆弄了个 Hexo + Github Pages。在导入之前博客的时候发现页面格式变得乱七八糟，有些图片也挂了，而且写的内容现在看看也觉得幼齿的很，干脆统统不要，一切都从头开始</p><p>关于写博客这件事情呢，我认为对学习掌握新知识是特别有帮助的，最重要的2个作用是</p><ul><li>把所学到的知识转换成自己的文字，本身是一个对知识的整理、思考、内化的过程</li><li>人脑容量有限，趁想法还热乎的时候记录下来，分门别类管理，便于日后查阅</li></ul><p>博客还有一个重要的作用是 <strong>装逼</strong>，虽说目前没几个人能看到这些文字，但是未来总有那么个人无意走进来，从而发现我默默耕耘着的小天地，发自内心的为我点👍，对我来说也就足够了</p><p>当然写博客最重要的是坚持，纵观我的博客史，发现自己并不是那么勤奋，从3年前开始，多的时候也就一两个月写一篇，有的时候半年才写一篇，想想当初设定的每星期写一篇的目标相去甚远，人呐，骨子里都是懒汉，但是到了一定的岁数，会发现坚持的力量有多么强大，滴水穿石的道理不是嘴上说说就懂的，以前总觉得时间多的是，可是时间哪天不是24小时，何时多出来过，不去珍惜到头来荒废的是自己，这次重开 blog，我也不给自己定什么目标了，平时多加以思考和总结，努力克服内心的懒汉，未来可能还是光明的</p><p>关于这个博客，使用的是 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a>，之前完全没接触过静态 blog，经人推荐后发现特别简洁，不需要部署一堆东西，也没有后台界面，你需要做的就是纯粹的专注于写作，这种返璞归真的体验真的棒极了，而且 Hexo 是开源的，想要什么直接自己折腾，对于程序员特别友好。站点是托管在 Github Pages，全球 CDN 分布，服务器方面的一概不用操心。HTTPs 证书用的是 <a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">Cloudflare</a> 提供的免费服务，反正只要他们家还开着，我就可以一直用下去……</p><p>2016 年最后剩下半个月，也快要到我的生日了，身上的种种无知、浮躁会不会随着年龄的增长而减少一点呢？未来的道路又将会指引我通向何处？幸福究竟对我来说是什么样的？只有一点我是可以确认的，眼前的这条道路是真实的，一步一个脚印走下去，最终这些疑问都会得到答案，所以，整理好思绪，收拾好心情，如同这个崭新的博客，迎接未来的人生吧。<strong>虽千万里 吾往矣！</strong></p>","excerpt":"","more":"<p>来到了这个新的博客，想着得写一篇具有纪念意义的文章，想来想去也不知从何说起，我这个人的叙述能力一般，写东西提起笔半天也下不去，最初有开博客的想法也是为了锻炼一下文笔，然而其实并没有写多少东西，即使写也是类似于笔记之类的，没什么语言组织在里面。最近由于服务器到期，也不想掏这个钱了，干脆弄了个 Hexo + Github Pages。在导入之前博客的时候发现页面格式变得乱七八糟，有些图片也挂了，而且写的内容现在看看也觉得幼齿的很，干脆统统不要，一切都从头开始</p><p>关于写博客这件事情呢，我认为对学习掌握新知识是特别有帮助的，最重要的2个作用是</p><ul><li>把所学到的知识转换成自己的文字，本身是一个对知识的整理、思考、内化的过程</li><li>人脑容量有限，趁想法还热乎的时候记录下来，分门别类管理，便于日后查阅</li></ul><p>博客还有一个重要的作用是 <strong>装逼</strong>，虽说目前没几个人能看到这些文字，但是未来总有那么个人无意走进来，从而发现我默默耕耘着的小天地，发自内心的为我点👍，对我来说也就足够了</p><p>当然写博客最重要的是坚持，纵观我的博客史，发现自己并不是那么勤奋，从3年前开始，多的时候也就一两个月写一篇，有的时候半年才写一篇，想想当初设定的每星期写一篇的目标相去甚远，人呐，骨子里都是懒汉，但是到了一定的岁数，会发现坚持的力量有多么强大，滴水穿石的道理不是嘴上说说就懂的，以前总觉得时间多的是，可是时间哪天不是24小时，何时多出来过，不去珍惜到头来荒废的是自己，这次重开 blog，我也不给自己定什么目标了，平时多加以思考和总结，努力克服内心的懒汉，未来可能还是光明的</p><p>关于这个博客，使用的是 <a href=\"https://hexo.io\">Hexo</a>，之前完全没接触过静态 blog，经人推荐后发现特别简洁，不需要部署一堆东西，也没有后台界面，你需要做的就是纯粹的专注于写作，这种返璞归真的体验真的棒极了，而且 Hexo 是开源的，想要什么直接自己折腾，对于程序员特别友好。站点是托管在 Github Pages，全球 CDN 分布，服务器方面的一概不用操心。HTTPs 证书用的是 <a href=\"https://www.cloudflare.com/\">Cloudflare</a> 提供的免费服务，反正只要他们家还开着，我就可以一直用下去……</p><p>2016 年最后剩下半个月，也快要到我的生日了，身上的种种无知、浮躁会不会随着年龄的增长而减少一点呢？未来的道路又将会指引我通向何处？幸福究竟对我来说是什么样的？只有一点我是可以确认的，眼前的这条道路是真实的，一步一个脚印走下去，最终这些疑问都会得到答案，所以，整理好思绪，收拾好心情，如同这个崭新的博客，迎接未来的人生吧。<strong>虽千万里 吾往矣！</strong></p>"},{"title":"全站 HTTPS 啦！","date":"2016-12-28T03:38:22.000Z","_content":"主要解决的两个问题：\n## Hexo Next 主题菜单链接\nNext 的菜单链接有个问题，如果在 github pages 部署用的第三方域名（默认域名用户可能没有这个问题），首页是 https 的，点击菜单后会变成 http，我看了下请求发现请求确实是 https 但是会 301 成 http，我就费解了，最后在这个 [issue](https://github.com/iissnan/hexo-theme-next/issues/1187#issuecomment-257788310) 里发现了答案，在链接最后加上 '/' 即可\n\n## CloudFlare 设置 Page Rules\n设置方法：Page Rules -> Create Page rule -> Add a Setting -> Always Use HTTPS\n然后把 http://xxx.com/* 添加进去，这样就会强制 301 到 https 上了\n\n哦，今天还把主题里的 Google Fonts 去掉了，还装了 [hexo-all-minifier](https://github.com/chenzhutian/hexo-all-minifier) 插件，打开速度大幅提升\n","source":"_posts/全站-HTTPS-啦！.md","raw":"---\ntitle: 全站 HTTPS 啦！\ndate: 2016-12-28 11:38:22\ncategories: 技术\ntags: Https\n---\n主要解决的两个问题：\n## Hexo Next 主题菜单链接\nNext 的菜单链接有个问题，如果在 github pages 部署用的第三方域名（默认域名用户可能没有这个问题），首页是 https 的，点击菜单后会变成 http，我看了下请求发现请求确实是 https 但是会 301 成 http，我就费解了，最后在这个 [issue](https://github.com/iissnan/hexo-theme-next/issues/1187#issuecomment-257788310) 里发现了答案，在链接最后加上 '/' 即可\n\n## CloudFlare 设置 Page Rules\n设置方法：Page Rules -> Create Page rule -> Add a Setting -> Always Use HTTPS\n然后把 http://xxx.com/* 添加进去，这样就会强制 301 到 https 上了\n\n哦，今天还把主题里的 Google Fonts 去掉了，还装了 [hexo-all-minifier](https://github.com/chenzhutian/hexo-all-minifier) 插件，打开速度大幅提升\n","slug":"全站-HTTPS-啦！","published":1,"updated":"2017-05-06T01:47:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uybs000bd5tbmvhu1tpz","content":"<p>主要解决的两个问题：</p><h2 id=\"Hexo-Next-主题菜单链接\"><a href=\"#Hexo-Next-主题菜单链接\" class=\"headerlink\" title=\"Hexo Next 主题菜单链接\"></a>Hexo Next 主题菜单链接</h2><p>Next 的菜单链接有个问题，如果在 github pages 部署用的第三方域名（默认域名用户可能没有这个问题），首页是 https 的，点击菜单后会变成 http，我看了下请求发现请求确实是 https 但是会 301 成 http，我就费解了，最后在这个 <a href=\"https://github.com/iissnan/hexo-theme-next/issues/1187#issuecomment-257788310\" target=\"_blank\" rel=\"external\">issue</a> 里发现了答案，在链接最后加上 ‘/‘ 即可</p><h2 id=\"CloudFlare-设置-Page-Rules\"><a href=\"#CloudFlare-设置-Page-Rules\" class=\"headerlink\" title=\"CloudFlare 设置 Page Rules\"></a>CloudFlare 设置 Page Rules</h2><p>设置方法：Page Rules -&gt; Create Page rule -&gt; Add a Setting -&gt; Always Use HTTPS<br>然后把 <a href=\"http://xxx.com/*\" target=\"_blank\" rel=\"external\">http://xxx.com/*</a> 添加进去，这样就会强制 301 到 https 上了</p><p>哦，今天还把主题里的 Google Fonts 去掉了，还装了 <a href=\"https://github.com/chenzhutian/hexo-all-minifier\" target=\"_blank\" rel=\"external\">hexo-all-minifier</a> 插件，打开速度大幅提升</p>","excerpt":"","more":"<p>主要解决的两个问题：</p><h2 id=\"Hexo-Next-主题菜单链接\"><a href=\"#Hexo-Next-主题菜单链接\" class=\"headerlink\" title=\"Hexo Next 主题菜单链接\"></a>Hexo Next 主题菜单链接</h2><p>Next 的菜单链接有个问题，如果在 github pages 部署用的第三方域名（默认域名用户可能没有这个问题），首页是 https 的，点击菜单后会变成 http，我看了下请求发现请求确实是 https 但是会 301 成 http，我就费解了，最后在这个 <a href=\"https://github.com/iissnan/hexo-theme-next/issues/1187#issuecomment-257788310\">issue</a> 里发现了答案，在链接最后加上 ‘/‘ 即可</p><h2 id=\"CloudFlare-设置-Page-Rules\"><a href=\"#CloudFlare-设置-Page-Rules\" class=\"headerlink\" title=\"CloudFlare 设置 Page Rules\"></a>CloudFlare 设置 Page Rules</h2><p>设置方法：Page Rules -&gt; Create Page rule -&gt; Add a Setting -&gt; Always Use HTTPS<br>然后把 <a href=\"http://xxx.com/*\">http://xxx.com/*</a> 添加进去，这样就会强制 301 到 https 上了</p><p>哦，今天还把主题里的 Google Fonts 去掉了，还装了 <a href=\"https://github.com/chenzhutian/hexo-all-minifier\">hexo-all-minifier</a> 插件，打开速度大幅提升</p>"},{"title":"匠人的悲哀","date":"2017-01-25T13:57:39.000Z","_content":"人工智能时代的来临可能还很遥远，然而 Google 的 AlphaGo、自动驾驶等等，已经摒弃了人工编写代码开发，而采用了让机器自主学习的方式，这一项技术无疑将彻底颠覆未来软件开发行业，软件不再是由静态的人工编写的代码构成，而是基于海量数据自主学习，不断优化自身，这一天迟早都会到来，我们这些传统码农终将葬身于历史的车轮下\n\n如果把人类划分为两个阶级，一个掌握资源，一个掌握方法，方法的更替速度是远远超过资源的更新速度的，就比如说获取信息，今天我们可以通过微信朋友圈、公众号，2年前我们通过各种APP，5年前人们使用电脑浏览器，10年前通过电视广播，30年前通过报纸杂志，再往前都不知道多少年来都是靠人们道听途说的，可以发现方法更新的速率是递增的，方法的更新带来的是更加便利的生活，可背后是多少行业的消失，多少人因此而失业。当人学习一项赖以为生技能时，同时就要承担着这项技能随时都会无用的风险，而那些资本家们风险就小得多，无论世界格局如何变幻，只要钱还是钱，石油还是石油，掌握着资源就能立于不败\n\n今天看了“百鸟朝凤”，电影主要内容是唢呐匠人曾经如何如何受尊重，然而如今时代变迁之下，传统文化步入历史边缘，几代人的心血最终一文不值，昔日辉煌与今日凄凉的强烈对比，让人看了不免唏嘘，这样的故事在现实中一定更残酷，历史的车轮无情的转动着，碾碎匠人们的情怀和梦想\n\n也许若干年后，当手工编写代码已经完成历史使命，那时我做着一些如今无法想象的全新工作，或者只是失业在家领取低保，我可能依然会翻翻Github，调试调试以前的代码，尽管它们再也没有发布的价值，或者指导小朋友们学习这项传统技艺，尽管对于他们来说这只是课余爱好，或者只是随手写几个程序，在他人眼中如同会演奏乐器一般，是有文化修养的象征，那时回忆起曾经与产品经理争论某个需求是否合理，和同事争论哪种实现方式更好，也许只剩下一声轻叹\n","source":"_posts/匠人的悲哀.md","raw":"---\ntitle: 匠人的悲哀\ndate: 2017-01-25 21:57:39\ncategories: 随笔\n---\n人工智能时代的来临可能还很遥远，然而 Google 的 AlphaGo、自动驾驶等等，已经摒弃了人工编写代码开发，而采用了让机器自主学习的方式，这一项技术无疑将彻底颠覆未来软件开发行业，软件不再是由静态的人工编写的代码构成，而是基于海量数据自主学习，不断优化自身，这一天迟早都会到来，我们这些传统码农终将葬身于历史的车轮下\n\n如果把人类划分为两个阶级，一个掌握资源，一个掌握方法，方法的更替速度是远远超过资源的更新速度的，就比如说获取信息，今天我们可以通过微信朋友圈、公众号，2年前我们通过各种APP，5年前人们使用电脑浏览器，10年前通过电视广播，30年前通过报纸杂志，再往前都不知道多少年来都是靠人们道听途说的，可以发现方法更新的速率是递增的，方法的更新带来的是更加便利的生活，可背后是多少行业的消失，多少人因此而失业。当人学习一项赖以为生技能时，同时就要承担着这项技能随时都会无用的风险，而那些资本家们风险就小得多，无论世界格局如何变幻，只要钱还是钱，石油还是石油，掌握着资源就能立于不败\n\n今天看了“百鸟朝凤”，电影主要内容是唢呐匠人曾经如何如何受尊重，然而如今时代变迁之下，传统文化步入历史边缘，几代人的心血最终一文不值，昔日辉煌与今日凄凉的强烈对比，让人看了不免唏嘘，这样的故事在现实中一定更残酷，历史的车轮无情的转动着，碾碎匠人们的情怀和梦想\n\n也许若干年后，当手工编写代码已经完成历史使命，那时我做着一些如今无法想象的全新工作，或者只是失业在家领取低保，我可能依然会翻翻Github，调试调试以前的代码，尽管它们再也没有发布的价值，或者指导小朋友们学习这项传统技艺，尽管对于他们来说这只是课余爱好，或者只是随手写几个程序，在他人眼中如同会演奏乐器一般，是有文化修养的象征，那时回忆起曾经与产品经理争论某个需求是否合理，和同事争论哪种实现方式更好，也许只剩下一声轻叹\n","slug":"匠人的悲哀","published":1,"updated":"2017-05-06T01:47:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uybv000gd5tbxvjysibz","content":"<p>人工智能时代的来临可能还很遥远，然而 Google 的 AlphaGo、自动驾驶等等，已经摒弃了人工编写代码开发，而采用了让机器自主学习的方式，这一项技术无疑将彻底颠覆未来软件开发行业，软件不再是由静态的人工编写的代码构成，而是基于海量数据自主学习，不断优化自身，这一天迟早都会到来，我们这些传统码农终将葬身于历史的车轮下</p><p>如果把人类划分为两个阶级，一个掌握资源，一个掌握方法，方法的更替速度是远远超过资源的更新速度的，就比如说获取信息，今天我们可以通过微信朋友圈、公众号，2年前我们通过各种APP，5年前人们使用电脑浏览器，10年前通过电视广播，30年前通过报纸杂志，再往前都不知道多少年来都是靠人们道听途说的，可以发现方法更新的速率是递增的，方法的更新带来的是更加便利的生活，可背后是多少行业的消失，多少人因此而失业。当人学习一项赖以为生技能时，同时就要承担着这项技能随时都会无用的风险，而那些资本家们风险就小得多，无论世界格局如何变幻，只要钱还是钱，石油还是石油，掌握着资源就能立于不败</p><p>今天看了“百鸟朝凤”，电影主要内容是唢呐匠人曾经如何如何受尊重，然而如今时代变迁之下，传统文化步入历史边缘，几代人的心血最终一文不值，昔日辉煌与今日凄凉的强烈对比，让人看了不免唏嘘，这样的故事在现实中一定更残酷，历史的车轮无情的转动着，碾碎匠人们的情怀和梦想</p><p>也许若干年后，当手工编写代码已经完成历史使命，那时我做着一些如今无法想象的全新工作，或者只是失业在家领取低保，我可能依然会翻翻Github，调试调试以前的代码，尽管它们再也没有发布的价值，或者指导小朋友们学习这项传统技艺，尽管对于他们来说这只是课余爱好，或者只是随手写几个程序，在他人眼中如同会演奏乐器一般，是有文化修养的象征，那时回忆起曾经与产品经理争论某个需求是否合理，和同事争论哪种实现方式更好，也许只剩下一声轻叹</p>","excerpt":"","more":"<p>人工智能时代的来临可能还很遥远，然而 Google 的 AlphaGo、自动驾驶等等，已经摒弃了人工编写代码开发，而采用了让机器自主学习的方式，这一项技术无疑将彻底颠覆未来软件开发行业，软件不再是由静态的人工编写的代码构成，而是基于海量数据自主学习，不断优化自身，这一天迟早都会到来，我们这些传统码农终将葬身于历史的车轮下</p><p>如果把人类划分为两个阶级，一个掌握资源，一个掌握方法，方法的更替速度是远远超过资源的更新速度的，就比如说获取信息，今天我们可以通过微信朋友圈、公众号，2年前我们通过各种APP，5年前人们使用电脑浏览器，10年前通过电视广播，30年前通过报纸杂志，再往前都不知道多少年来都是靠人们道听途说的，可以发现方法更新的速率是递增的，方法的更新带来的是更加便利的生活，可背后是多少行业的消失，多少人因此而失业。当人学习一项赖以为生技能时，同时就要承担着这项技能随时都会无用的风险，而那些资本家们风险就小得多，无论世界格局如何变幻，只要钱还是钱，石油还是石油，掌握着资源就能立于不败</p><p>今天看了“百鸟朝凤”，电影主要内容是唢呐匠人曾经如何如何受尊重，然而如今时代变迁之下，传统文化步入历史边缘，几代人的心血最终一文不值，昔日辉煌与今日凄凉的强烈对比，让人看了不免唏嘘，这样的故事在现实中一定更残酷，历史的车轮无情的转动着，碾碎匠人们的情怀和梦想</p><p>也许若干年后，当手工编写代码已经完成历史使命，那时我做着一些如今无法想象的全新工作，或者只是失业在家领取低保，我可能依然会翻翻Github，调试调试以前的代码，尽管它们再也没有发布的价值，或者指导小朋友们学习这项传统技艺，尽管对于他们来说这只是课余爱好，或者只是随手写几个程序，在他人眼中如同会演奏乐器一般，是有文化修养的象征，那时回忆起曾经与产品经理争论某个需求是否合理，和同事争论哪种实现方式更好，也许只剩下一声轻叹</p>"},{"title":"前端面试题收集","date":"2017-05-08T13:43:47.000Z","_content":"常见前端面试题整理贴\n<!--more-->\n## JS\n### js的继承实现\nJavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。\n#### 创建方式\n##### 构造器方法\n构造器其实就是一个普通的函数。当使用 new 操作符 来作用这个函数时，它就可以被称为构造方法（构造函数）。\n``` js\nfunction Graph() {\n  this.vertices = [];\n  this.edges = [];\n}\n\nGraph.prototype = {\n  addVertex: function(v){\n    this.vertices.push(v);\n  }\n};\n\nvar g = new Graph();\n// g是生成的对象,他的自身属性有'vertices'和'edges'.\n// 在g被实例化时,g.[[Prototype]]指向了Graph.prototype.\n```\n\n##### Object.create (es5)\nECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：\n``` js\nvar a = {a: 1};\n// a ---> Object.prototype ---> null\n\nvar b = Object.create(a);\n// b ---> a ---> Object.prototype ---> null\nconsole.log(b.a); // 1 (继承而来)\n\nvar c = Object.create(b);\n// c ---> b ---> a ---> Object.prototype ---> null\n\nvar d = Object.create(null);\n// d ---> null\nconsole.log(d.hasOwnProperty); // undefined, 因为d没有继承Object.prototype\n```\n\n##### class (es6)\n```js\nclass Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\nclass Square extends Polygon {\n  constructor(sideLength) {\n    super(sideLength, sideLength);\n  }\n  get area() {\n    return this.height * this.width;\n  }\n  set sideLength(newLength) {\n    this.height = newLength;\n    this.width = newLength;\n  }\n}\n\nvar square = new Square(2);\n```\n\n#### 性能\n遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。\nhasOwnProperty 是 JavaScript 中唯一一个只涉及对象自身属性而不会遍历原型链的方法。\n\n\n### js的闭包\n```\n闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。\n换句话说，这些函数可以“记忆”它被创建时候的环境。\n```\n闭包是指能够访问在封闭作用于内的变量的函数，这些函数可以保存它们被创建时的环境。\n``` js\nfunction makeFunc() {\n  var name = \"Mozilla\";\n  function displayName() {\n    alert(name);\n  }\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n```\n#### 闭包的应用\n* 访问私有属性\n```js\nvar Foo = function(){\n      var name = 'fooname';\n      var age = 12;\n      this.getName = function(){\n          return name;\n      };\n      this.getAge = function(){\n          return age;\n      };\n  };\n  var foo = new Foo();\n\n  foo.name;        //  => undefined\n  foo.age;         //  => undefined\n  foo.getName();   //  => 'fooname'\n  foo.getAge();    //  => 12\n```\n* 在内存中维持变量：如果缓存数据、柯里化。\n\n#### 性能问题\n需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露\n\n### \"use strict\";\n#### 声明方式\n* script 声明\n* function 声明\n#### 区别\n##### 语法错误\n如果代码中使用\"use strict\"开启了严格模式,则下面的情况都会在脚本运行之前抛出SyntaxError异常:\n\n* 八进制语法:var n = 023和var s = \"\\047\" (数字前不能有0)\n* with语句\n* 使用delete删除一个变量名(而不是属性名):delete myVariable\n* 使用eval或arguments作为变量名或函数名\n* 使用未来保留字(也许会在ECMAScript 6中使用):implements, interface, let, package, private, protected, public, static,和yield作为变量名或函数名\n* 在语句块中使用函数声明:if(a<b){ function f(){} }\n* 对象字面量中使用两个相同的属性名:{a: 1, b: 3, a: 7}\n* 函数形参中使用两个相同的参数名:function f(a, b, b){}\n\n#### 语义差异\n##### 函数调用中的this\n在普通的函数调用f()中,this的值会指向全局对象.在严格模式中,this的值会指向undefined.当函数通过call和apply调用时,如果传入的thisvalue参数是一个null和undefined除外的原始值(字符串,数字,布尔值),则this的值会成为那个原始值对应的包装对象,如果thisvalue参数的值是undefined或null,则this的值会指向全局对象.在严格模式中,this的值就是thisvalue参数的值,没有任何类型转换.\n\n##### arguments对象属性不与对应的形参变量同步更新\n在非严格模式中,修改arguments对象中某个索引属性的值,和这个属性对应的形参变量的值也会同时变化,反之亦然.这会让JavaScript的代码混淆引擎让代码变得更难读和理解。在严格模式中arguments 对象会以形参变量的拷贝的形式被创建和初始化，因此 arguments 对象的改变不会影响形参。\n\n##### eval相关的区别\n在严格模式中,eval不会在当前的作用域内创建新的变量.另外,传入eval的字符串参数也会按照严格模式来解析.你需要全面测试来确保没有代码收到影响。另外，如果你并不是为了解决一个非常实际的解决方案中，尽量不要使用eval。\n\n### this\n#### 全局上下文\n在全局运行上下文中（在任何函数体外部），this指代全局对象，无论是否在严格模式下。\n\n#### 函数上下文\n在函数内部，this的值取决于函数是如何调用的。\n##### 直接调用\n* 非严格模式 window\n* 严格模式 如果this未被执行的上下文环境定义，那么它将会默认为undefined。\n\n#### 对象方法中的 this\n对象方法中的this，指向调用该函数的对象（就近原则）\n\n#### 构造函数中的 this\n当一个函数被作为一个构造函数来使用（使用new关键字），它的this与即将被创建的新对象绑定。\n\n#### call / apply\n绑定到一个指定的对象上\n\n#### bind\nf.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数\n\n### 事件委托\n在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。\n\n#### 阻止继续冒泡\nstopPropagation()\n\n### AMD/CMD/UMD\n1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n在 RequireJS 里，模块有多种书写格式，推荐的是：\ndefine([\"./a\", \"./b\"], function(a, b) {\n  a.doSomething();\n  b.doSomething();\n});\n在 SeaJS 里，模块只有一种书写格式：\ndefine(function(require, exports, module) {\n  require(\"./a\").doSomething();\n  require(\"./b\").doSomething();\n});\n\n## CSS\n### 盒子模型\n里到外 padding border margin\n#### box-sizing\n属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。\n##### content-box\n默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。\n##### border-box\n width 和 height 属性包括内容，内边距和边框，但不包括外边距。\n\n\n### position有哪些属性，各自是什么特点？\n##### static\n该关键字指定元素使用正常的布局行为，即元素在文档流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。\n##### relative\n该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 未定义对 table, 元素应用的效果。\n##### absolute\n不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。\n##### fixed\n不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的栈上下文。当元素祖先的 transform  属性非 none 时，容器由视口改为该祖先。\n##### sticky\n盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。\n\n### 垂直居中\n#### table\n```css\n#wrapper {\n    display: table;\n}\n\n#cell {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n#### 绝对定位\n```css\n#content {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n```\n#### 行高（单行文本）\n#### flex\n```css\n#content{\n    display:flex;\n    align-item: center\n}\n```\n#### JS\n### 圣杯布局\nhttp://www.cnblogs.com/imwtr/p/4441741.html\n### flex\nhttp://www.cnblogs.com/imwtr/p/4441741.html\n### grid\nhttps://css-tricks.com/snippets/css/complete-guide-grid/\n\n## HTML\n### Style标签放置的最佳位置\nhead 里，提前加载样式\nw3c不建议放在body中，新增的style标签的“scoped”属性（兼容性不行，只有FF）\n\n### 常见行内元素和块级元素\n行内 ： b, em, strong,\na, br, img, span, sub, sup\nbutton, input, label, select, textarea\n\n块级元素：canvas，div，dl，footer，form，h1，header，hr，p，pre，section，table，ul，li\n\n### HTML5 新增标签\narticle, audio, video, canvas, footer, header, nav, section\n\n### Doctype\n<!DOCTYPE> 告知 浏览器 当前的 HTML (或 XML) 文档是哪一个版本. Doctype 是一条 声明, 而不是一个 标签; 也可以把它叫做 \"文档类型声明\", 或 简称为 \"DTD\".\n\n## 浏览器\n### IE和Chrome事件模型的区别\nChrome 捕获=>目标=>冒泡\nIE 目标=>冒泡\n### cookie和session区别\n1，session 在服务器端，cookie 在客户端（浏览器）\n2，session 默认被存在在服务器的一个文件里（不是内存）\n3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）\n4，session 可以放在 文件、数据库、或内存中都可以。\n5，用户验证这种场合一般会用 session\n\n### 浏览器缓存策略\n#### HTTP 缓存\nCache-Control:public, max-age=31536000\n#### HTML5 manifest\n#### localStorage\n#### Service Worker\n\n## HTTP\n### 处理跨域的方法\n#### Iframe + document.domain\n原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域\n限制：同域document提供的是页面间的互操作，需要载入iframe页面\n#### 有src的标签(统计代码)\n原理：所有具有src属性的HTML标签都是可以跨域的，包括img, script\n限制：需要创建一个DOM对象，只能用于GET方法\n#### JSONP\n原理：script是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数。\n限制：需要创建一个DOM对象并且添加到DOM树，只能用于GET方法\n.getJSON与.get的区别是前者会把responseText转换为JSON，而且当URL具有callback参数时， jQuery将会把它解释为一个JSONP请求，创建一个script标签来完成该请求。\n#### 跨域资源共享（CORS）\n原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求\n限制：浏览器需要支持HTML5，可以支持POST，PUT等方法\n\n### 常见HTTP状态码\n1.\t1xx消息\n2.\t2xx成功\n3.\t3xx重定向\n4.\t4xx客户端错误\n5.\t5xx服务器错误\n### GET和POST的区别\nGET在浏览器回退时是无害的，而POST会再次提交请求。\nGET产生的URL地址可以被Bookmark，而POST不可以。\nGET请求会被浏览器主动cache，而POST不会，除非手动设置。\nGET请求只能进行url编码，而POST支持多种编码方式。\nGET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\nGET请求在URL中传送的参数是有长度限制的，而POST么有。\n对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\nGET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\nGET参数通过URL传递，POST放在Request body中。\n\nHTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。\n\nGET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。\n\nGET产生一个TCP数据包；POST产生两个TCP数据包。\n\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n### url请求的过程\n浏览器查找域名的 IP 地址\n这一步包括 DNS 具体的查找过程，包括：浏览器缓存->系统缓存->路由器缓存…\n浏览器向 web 服务器发送一个 HTTP 请求 4. 服务器的永久重定向响应（从 http://example.com 到 http://www.example.com）\n浏览器跟踪重定向地址\n服务器处理请求\n服务器返回一个 HTTP 响应\n浏览器显示 HTML\n浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）\n浏览器发送异步请求\n\n## 服务器技术\n### websocket\n\n## 框架\n### antdesign\n### React的diff原理和组件化思想\n### state / props\nprops不变的，state变的。\n\n### f7优缺点\n### node版本的区别\n### angularjs 脏检查\nAngular将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变化。如果变化，则执行相应的watcher函数。等到model值不再变化，也就不会再有watch函数被触发，则一个digest循环结束。\n$watch: 监听scope model变化\n$apply: 触发“脏检查”\n$digest: 内部函数，执行脏检查。 digest循环包括2个while循环:\n处理$evalAsync的异步运算队列\n处理$watch的wathers队列\n","source":"_posts/前端面试题收集.md","raw":"---\ntitle: 前端面试题收集\ndate: 2017-05-08 21:43:47\ncategories: 技术\n---\n常见前端面试题整理贴\n<!--more-->\n## JS\n### js的继承实现\nJavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。\n#### 创建方式\n##### 构造器方法\n构造器其实就是一个普通的函数。当使用 new 操作符 来作用这个函数时，它就可以被称为构造方法（构造函数）。\n``` js\nfunction Graph() {\n  this.vertices = [];\n  this.edges = [];\n}\n\nGraph.prototype = {\n  addVertex: function(v){\n    this.vertices.push(v);\n  }\n};\n\nvar g = new Graph();\n// g是生成的对象,他的自身属性有'vertices'和'edges'.\n// 在g被实例化时,g.[[Prototype]]指向了Graph.prototype.\n```\n\n##### Object.create (es5)\nECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：\n``` js\nvar a = {a: 1};\n// a ---> Object.prototype ---> null\n\nvar b = Object.create(a);\n// b ---> a ---> Object.prototype ---> null\nconsole.log(b.a); // 1 (继承而来)\n\nvar c = Object.create(b);\n// c ---> b ---> a ---> Object.prototype ---> null\n\nvar d = Object.create(null);\n// d ---> null\nconsole.log(d.hasOwnProperty); // undefined, 因为d没有继承Object.prototype\n```\n\n##### class (es6)\n```js\nclass Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\nclass Square extends Polygon {\n  constructor(sideLength) {\n    super(sideLength, sideLength);\n  }\n  get area() {\n    return this.height * this.width;\n  }\n  set sideLength(newLength) {\n    this.height = newLength;\n    this.width = newLength;\n  }\n}\n\nvar square = new Square(2);\n```\n\n#### 性能\n遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。\nhasOwnProperty 是 JavaScript 中唯一一个只涉及对象自身属性而不会遍历原型链的方法。\n\n\n### js的闭包\n```\n闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。\n换句话说，这些函数可以“记忆”它被创建时候的环境。\n```\n闭包是指能够访问在封闭作用于内的变量的函数，这些函数可以保存它们被创建时的环境。\n``` js\nfunction makeFunc() {\n  var name = \"Mozilla\";\n  function displayName() {\n    alert(name);\n  }\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n```\n#### 闭包的应用\n* 访问私有属性\n```js\nvar Foo = function(){\n      var name = 'fooname';\n      var age = 12;\n      this.getName = function(){\n          return name;\n      };\n      this.getAge = function(){\n          return age;\n      };\n  };\n  var foo = new Foo();\n\n  foo.name;        //  => undefined\n  foo.age;         //  => undefined\n  foo.getName();   //  => 'fooname'\n  foo.getAge();    //  => 12\n```\n* 在内存中维持变量：如果缓存数据、柯里化。\n\n#### 性能问题\n需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露\n\n### \"use strict\";\n#### 声明方式\n* script 声明\n* function 声明\n#### 区别\n##### 语法错误\n如果代码中使用\"use strict\"开启了严格模式,则下面的情况都会在脚本运行之前抛出SyntaxError异常:\n\n* 八进制语法:var n = 023和var s = \"\\047\" (数字前不能有0)\n* with语句\n* 使用delete删除一个变量名(而不是属性名):delete myVariable\n* 使用eval或arguments作为变量名或函数名\n* 使用未来保留字(也许会在ECMAScript 6中使用):implements, interface, let, package, private, protected, public, static,和yield作为变量名或函数名\n* 在语句块中使用函数声明:if(a<b){ function f(){} }\n* 对象字面量中使用两个相同的属性名:{a: 1, b: 3, a: 7}\n* 函数形参中使用两个相同的参数名:function f(a, b, b){}\n\n#### 语义差异\n##### 函数调用中的this\n在普通的函数调用f()中,this的值会指向全局对象.在严格模式中,this的值会指向undefined.当函数通过call和apply调用时,如果传入的thisvalue参数是一个null和undefined除外的原始值(字符串,数字,布尔值),则this的值会成为那个原始值对应的包装对象,如果thisvalue参数的值是undefined或null,则this的值会指向全局对象.在严格模式中,this的值就是thisvalue参数的值,没有任何类型转换.\n\n##### arguments对象属性不与对应的形参变量同步更新\n在非严格模式中,修改arguments对象中某个索引属性的值,和这个属性对应的形参变量的值也会同时变化,反之亦然.这会让JavaScript的代码混淆引擎让代码变得更难读和理解。在严格模式中arguments 对象会以形参变量的拷贝的形式被创建和初始化，因此 arguments 对象的改变不会影响形参。\n\n##### eval相关的区别\n在严格模式中,eval不会在当前的作用域内创建新的变量.另外,传入eval的字符串参数也会按照严格模式来解析.你需要全面测试来确保没有代码收到影响。另外，如果你并不是为了解决一个非常实际的解决方案中，尽量不要使用eval。\n\n### this\n#### 全局上下文\n在全局运行上下文中（在任何函数体外部），this指代全局对象，无论是否在严格模式下。\n\n#### 函数上下文\n在函数内部，this的值取决于函数是如何调用的。\n##### 直接调用\n* 非严格模式 window\n* 严格模式 如果this未被执行的上下文环境定义，那么它将会默认为undefined。\n\n#### 对象方法中的 this\n对象方法中的this，指向调用该函数的对象（就近原则）\n\n#### 构造函数中的 this\n当一个函数被作为一个构造函数来使用（使用new关键字），它的this与即将被创建的新对象绑定。\n\n#### call / apply\n绑定到一个指定的对象上\n\n#### bind\nf.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数\n\n### 事件委托\n在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。\n\n#### 阻止继续冒泡\nstopPropagation()\n\n### AMD/CMD/UMD\n1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n在 RequireJS 里，模块有多种书写格式，推荐的是：\ndefine([\"./a\", \"./b\"], function(a, b) {\n  a.doSomething();\n  b.doSomething();\n});\n在 SeaJS 里，模块只有一种书写格式：\ndefine(function(require, exports, module) {\n  require(\"./a\").doSomething();\n  require(\"./b\").doSomething();\n});\n\n## CSS\n### 盒子模型\n里到外 padding border margin\n#### box-sizing\n属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。\n##### content-box\n默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。\n##### border-box\n width 和 height 属性包括内容，内边距和边框，但不包括外边距。\n\n\n### position有哪些属性，各自是什么特点？\n##### static\n该关键字指定元素使用正常的布局行为，即元素在文档流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。\n##### relative\n该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 未定义对 table, 元素应用的效果。\n##### absolute\n不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。\n##### fixed\n不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的栈上下文。当元素祖先的 transform  属性非 none 时，容器由视口改为该祖先。\n##### sticky\n盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。\n\n### 垂直居中\n#### table\n```css\n#wrapper {\n    display: table;\n}\n\n#cell {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n#### 绝对定位\n```css\n#content {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n```\n#### 行高（单行文本）\n#### flex\n```css\n#content{\n    display:flex;\n    align-item: center\n}\n```\n#### JS\n### 圣杯布局\nhttp://www.cnblogs.com/imwtr/p/4441741.html\n### flex\nhttp://www.cnblogs.com/imwtr/p/4441741.html\n### grid\nhttps://css-tricks.com/snippets/css/complete-guide-grid/\n\n## HTML\n### Style标签放置的最佳位置\nhead 里，提前加载样式\nw3c不建议放在body中，新增的style标签的“scoped”属性（兼容性不行，只有FF）\n\n### 常见行内元素和块级元素\n行内 ： b, em, strong,\na, br, img, span, sub, sup\nbutton, input, label, select, textarea\n\n块级元素：canvas，div，dl，footer，form，h1，header，hr，p，pre，section，table，ul，li\n\n### HTML5 新增标签\narticle, audio, video, canvas, footer, header, nav, section\n\n### Doctype\n<!DOCTYPE> 告知 浏览器 当前的 HTML (或 XML) 文档是哪一个版本. Doctype 是一条 声明, 而不是一个 标签; 也可以把它叫做 \"文档类型声明\", 或 简称为 \"DTD\".\n\n## 浏览器\n### IE和Chrome事件模型的区别\nChrome 捕获=>目标=>冒泡\nIE 目标=>冒泡\n### cookie和session区别\n1，session 在服务器端，cookie 在客户端（浏览器）\n2，session 默认被存在在服务器的一个文件里（不是内存）\n3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）\n4，session 可以放在 文件、数据库、或内存中都可以。\n5，用户验证这种场合一般会用 session\n\n### 浏览器缓存策略\n#### HTTP 缓存\nCache-Control:public, max-age=31536000\n#### HTML5 manifest\n#### localStorage\n#### Service Worker\n\n## HTTP\n### 处理跨域的方法\n#### Iframe + document.domain\n原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域\n限制：同域document提供的是页面间的互操作，需要载入iframe页面\n#### 有src的标签(统计代码)\n原理：所有具有src属性的HTML标签都是可以跨域的，包括img, script\n限制：需要创建一个DOM对象，只能用于GET方法\n#### JSONP\n原理：script是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数。\n限制：需要创建一个DOM对象并且添加到DOM树，只能用于GET方法\n.getJSON与.get的区别是前者会把responseText转换为JSON，而且当URL具有callback参数时， jQuery将会把它解释为一个JSONP请求，创建一个script标签来完成该请求。\n#### 跨域资源共享（CORS）\n原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求\n限制：浏览器需要支持HTML5，可以支持POST，PUT等方法\n\n### 常见HTTP状态码\n1.\t1xx消息\n2.\t2xx成功\n3.\t3xx重定向\n4.\t4xx客户端错误\n5.\t5xx服务器错误\n### GET和POST的区别\nGET在浏览器回退时是无害的，而POST会再次提交请求。\nGET产生的URL地址可以被Bookmark，而POST不可以。\nGET请求会被浏览器主动cache，而POST不会，除非手动设置。\nGET请求只能进行url编码，而POST支持多种编码方式。\nGET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\nGET请求在URL中传送的参数是有长度限制的，而POST么有。\n对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\nGET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\nGET参数通过URL传递，POST放在Request body中。\n\nHTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。\n\nGET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。\n\nGET产生一个TCP数据包；POST产生两个TCP数据包。\n\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。\n### url请求的过程\n浏览器查找域名的 IP 地址\n这一步包括 DNS 具体的查找过程，包括：浏览器缓存->系统缓存->路由器缓存…\n浏览器向 web 服务器发送一个 HTTP 请求 4. 服务器的永久重定向响应（从 http://example.com 到 http://www.example.com）\n浏览器跟踪重定向地址\n服务器处理请求\n服务器返回一个 HTTP 响应\n浏览器显示 HTML\n浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）\n浏览器发送异步请求\n\n## 服务器技术\n### websocket\n\n## 框架\n### antdesign\n### React的diff原理和组件化思想\n### state / props\nprops不变的，state变的。\n\n### f7优缺点\n### node版本的区别\n### angularjs 脏检查\nAngular将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变化。如果变化，则执行相应的watcher函数。等到model值不再变化，也就不会再有watch函数被触发，则一个digest循环结束。\n$watch: 监听scope model变化\n$apply: 触发“脏检查”\n$digest: 内部函数，执行脏检查。 digest循环包括2个while循环:\n处理$evalAsync的异步运算队列\n处理$watch的wathers队列\n","slug":"前端面试题收集","published":1,"updated":"2017-05-18T14:32:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uyby000id5tbedbwtuq6","content":"<p>常见前端面试题整理贴<br><a id=\"more\"></a></p><h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"js的继承实现\"><a href=\"#js的继承实现\" class=\"headerlink\" title=\"js的继承实现\"></a>js的继承实现</h3><p>JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p><h4 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h4><h5 id=\"构造器方法\"><a href=\"#构造器方法\" class=\"headerlink\" title=\"构造器方法\"></a>构造器方法</h5><p>构造器其实就是一个普通的函数。当使用 new 操作符 来作用这个函数时，它就可以被称为构造方法（构造函数）。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Graph</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.vertices = [];</div><div class=\"line\">  <span class=\"keyword\">this</span>.edges = [];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Graph.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">addVertex</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.vertices.push(v);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">new</span> Graph();</div><div class=\"line\"><span class=\"comment\">// g是生成的对象,他的自身属性有'vertices'和'edges'.</span></div><div class=\"line\"><span class=\"comment\">// 在g被实例化时,g.[[Prototype]]指向了Graph.prototype.</span></div></pre></td></tr></table></figure><p></p><h5 id=\"Object-create-es5\"><a href=\"#Object-create-es5\" class=\"headerlink\" title=\"Object.create (es5)\"></a>Object.create (es5)</h5><p>ECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.create(a);</div><div class=\"line\"><span class=\"comment\">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.a); <span class=\"comment\">// 1 (继承而来)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Object</span>.create(b);</div><div class=\"line\"><span class=\"comment\">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"comment\">// d ---&gt; null</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(d.hasOwnProperty); <span class=\"comment\">// undefined, 因为d没有继承Object.prototype</span></div></pre></td></tr></table></figure><p></p><h5 id=\"class-es6\"><a href=\"#class-es6\" class=\"headerlink\" title=\"class (es6)\"></a>class (es6)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(sideLength) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(sideLength, sideLength);</div><div class=\"line\">  &#125;</div><div class=\"line\">  get area() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.width;</div><div class=\"line\">  &#125;</div><div class=\"line\">  set sideLength(newLength) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = newLength;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = newLength;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"keyword\">new</span> Square(<span class=\"number\">2</span>);</div></pre></td></tr></table></figure><h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。<br>hasOwnProperty 是 JavaScript 中唯一一个只涉及对象自身属性而不会遍历原型链的方法。</p><h3 id=\"js的闭包\"><a href=\"#js的闭包\" class=\"headerlink\" title=\"js的闭包\"></a>js的闭包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。</div><div class=\"line\">换句话说，这些函数可以“记忆”它被创建时候的环境。</div></pre></td></tr></table></figure><p>闭包是指能够访问在封闭作用于内的变量的函数，这些函数可以保存它们被创建时的环境。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"Mozilla\"</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(name);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> displayName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myFunc = makeFunc();</div><div class=\"line\">myFunc();</div></pre></td></tr></table></figure><p></p><h4 id=\"闭包的应用\"><a href=\"#闭包的应用\" class=\"headerlink\" title=\"闭包的应用\"></a>闭包的应用</h4><ul><li><p>访问私有属性</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> name = <span class=\"string\">'fooname'</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> age = <span class=\"number\">12</span>;</div><div class=\"line\">      <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> name;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">this</span>.getAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> age;</div><div class=\"line\">      &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\"></div><div class=\"line\">  foo.name;        <span class=\"comment\">//  =&gt; undefined</span></div><div class=\"line\">  foo.age;         <span class=\"comment\">//  =&gt; undefined</span></div><div class=\"line\">  foo.getName();   <span class=\"comment\">//  =&gt; 'fooname'</span></div><div class=\"line\">  foo.getAge();    <span class=\"comment\">//  =&gt; 12</span></div></pre></td></tr></table></figure></li><li><p>在内存中维持变量：如果缓存数据、柯里化。</p></li></ul><h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><p>需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露</p><h3 id=\"“use-strict”\"><a href=\"#“use-strict”\" class=\"headerlink\" title=\"“use strict”;\"></a>“use strict”;</h3><h4 id=\"声明方式\"><a href=\"#声明方式\" class=\"headerlink\" title=\"声明方式\"></a>声明方式</h4><ul><li>script 声明</li><li><p>function 声明</p><h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><h5 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h5><p>如果代码中使用”use strict”开启了严格模式,则下面的情况都会在脚本运行之前抛出SyntaxError异常:</p></li><li><p>八进制语法:var n = 023和var s = “\\047” (数字前不能有0)</p></li><li>with语句</li><li>使用delete删除一个变量名(而不是属性名):delete myVariable</li><li>使用eval或arguments作为变量名或函数名</li><li>使用未来保留字(也许会在ECMAScript 6中使用):implements, interface, let, package, private, protected, public, static,和yield作为变量名或函数名</li><li>在语句块中使用函数声明:if(a&lt;b){ function f(){} }</li><li>对象字面量中使用两个相同的属性名:{a: 1, b: 3, a: 7}</li><li>函数形参中使用两个相同的参数名:function f(a, b, b){}</li></ul><h4 id=\"语义差异\"><a href=\"#语义差异\" class=\"headerlink\" title=\"语义差异\"></a>语义差异</h4><h5 id=\"函数调用中的this\"><a href=\"#函数调用中的this\" class=\"headerlink\" title=\"函数调用中的this\"></a>函数调用中的this</h5><p>在普通的函数调用f()中,this的值会指向全局对象.在严格模式中,this的值会指向undefined.当函数通过call和apply调用时,如果传入的thisvalue参数是一个null和undefined除外的原始值(字符串,数字,布尔值),则this的值会成为那个原始值对应的包装对象,如果thisvalue参数的值是undefined或null,则this的值会指向全局对象.在严格模式中,this的值就是thisvalue参数的值,没有任何类型转换.</p><h5 id=\"arguments对象属性不与对应的形参变量同步更新\"><a href=\"#arguments对象属性不与对应的形参变量同步更新\" class=\"headerlink\" title=\"arguments对象属性不与对应的形参变量同步更新\"></a>arguments对象属性不与对应的形参变量同步更新</h5><p>在非严格模式中,修改arguments对象中某个索引属性的值,和这个属性对应的形参变量的值也会同时变化,反之亦然.这会让JavaScript的代码混淆引擎让代码变得更难读和理解。在严格模式中arguments 对象会以形参变量的拷贝的形式被创建和初始化，因此 arguments 对象的改变不会影响形参。</p><h5 id=\"eval相关的区别\"><a href=\"#eval相关的区别\" class=\"headerlink\" title=\"eval相关的区别\"></a>eval相关的区别</h5><p>在严格模式中,eval不会在当前的作用域内创建新的变量.另外,传入eval的字符串参数也会按照严格模式来解析.你需要全面测试来确保没有代码收到影响。另外，如果你并不是为了解决一个非常实际的解决方案中，尽量不要使用eval。</p><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><h4 id=\"全局上下文\"><a href=\"#全局上下文\" class=\"headerlink\" title=\"全局上下文\"></a>全局上下文</h4><p>在全局运行上下文中（在任何函数体外部），this指代全局对象，无论是否在严格模式下。</p><h4 id=\"函数上下文\"><a href=\"#函数上下文\" class=\"headerlink\" title=\"函数上下文\"></a>函数上下文</h4><p>在函数内部，this的值取决于函数是如何调用的。</p><h5 id=\"直接调用\"><a href=\"#直接调用\" class=\"headerlink\" title=\"直接调用\"></a>直接调用</h5><ul><li>非严格模式 window</li><li>严格模式 如果this未被执行的上下文环境定义，那么它将会默认为undefined。</li></ul><h4 id=\"对象方法中的-this\"><a href=\"#对象方法中的-this\" class=\"headerlink\" title=\"对象方法中的 this\"></a>对象方法中的 this</h4><p>对象方法中的this，指向调用该函数的对象（就近原则）</p><h4 id=\"构造函数中的-this\"><a href=\"#构造函数中的-this\" class=\"headerlink\" title=\"构造函数中的 this\"></a>构造函数中的 this</h4><p>当一个函数被作为一个构造函数来使用（使用new关键字），它的this与即将被创建的新对象绑定。</p><h4 id=\"call-apply\"><a href=\"#call-apply\" class=\"headerlink\" title=\"call / apply\"></a>call / apply</h4><p>绑定到一个指定的对象上</p><h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><p>f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数</p><h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。</p><h4 id=\"阻止继续冒泡\"><a href=\"#阻止继续冒泡\" class=\"headerlink\" title=\"阻止继续冒泡\"></a>阻止继续冒泡</h4><p>stopPropagation()</p><h3 id=\"AMD-CMD-UMD\"><a href=\"#AMD-CMD-UMD\" class=\"headerlink\" title=\"AMD/CMD/UMD\"></a>AMD/CMD/UMD</h3><ol><li>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：<br>在 RequireJS 里，模块有多种书写格式，推荐的是：<br>define([“./a”, “./b”], function(a, b) {<br>a.doSomething();<br>b.doSomething();<br>});<br>在 SeaJS 里，模块只有一种书写格式：<br>define(function(require, exports, module) {<br>require(“./a”).doSomething();<br>require(“./b”).doSomething();<br>});</li></ol><h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>里到外 padding border margin</p><h4 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h4><p>属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。</p><h5 id=\"content-box\"><a href=\"#content-box\" class=\"headerlink\" title=\"content-box\"></a>content-box</h5><p>默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。</p><h5 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h5><p>width 和 height 属性包括内容，内边距和边框，但不包括外边距。</p><h3 id=\"position有哪些属性，各自是什么特点？\"><a href=\"#position有哪些属性，各自是什么特点？\" class=\"headerlink\" title=\"position有哪些属性，各自是什么特点？\"></a>position有哪些属性，各自是什么特点？</h3><h5 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h5><p>该关键字指定元素使用正常的布局行为，即元素在文档流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</p><h5 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h5><p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 未定义对 table, 元素应用的效果。</p><h5 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h5><p>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p><h5 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h5><p>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的栈上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。</p><h5 id=\"sticky\"><a href=\"#sticky\" class=\"headerlink\" title=\"sticky\"></a>sticky</h5><p>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</p><h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><h4 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#cell</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#content</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"行高（单行文本）\"><a href=\"#行高（单行文本）\" class=\"headerlink\" title=\"行高（单行文本）\"></a>行高（单行文本）</h4><h4 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#content</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>:flex;</div><div class=\"line\">    <span class=\"attribute\">align-item</span>: center</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"JS-1\"><a href=\"#JS-1\" class=\"headerlink\" title=\"JS\"></a>JS</h4><h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><p><a href=\"http://www.cnblogs.com/imwtr/p/4441741.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/imwtr/p/4441741.html</a></p><h3 id=\"flex-1\"><a href=\"#flex-1\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p><a href=\"http://www.cnblogs.com/imwtr/p/4441741.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/imwtr/p/4441741.html</a></p><h3 id=\"grid\"><a href=\"#grid\" class=\"headerlink\" title=\"grid\"></a>grid</h3><p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\" rel=\"external\">https://css-tricks.com/snippets/css/complete-guide-grid/</a></p><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"Style标签放置的最佳位置\"><a href=\"#Style标签放置的最佳位置\" class=\"headerlink\" title=\"Style标签放置的最佳位置\"></a>Style标签放置的最佳位置</h3><p>head 里，提前加载样式<br>w3c不建议放在body中，新增的style标签的“scoped”属性（兼容性不行，只有FF）</p><h3 id=\"常见行内元素和块级元素\"><a href=\"#常见行内元素和块级元素\" class=\"headerlink\" title=\"常见行内元素和块级元素\"></a>常见行内元素和块级元素</h3><p>行内 ： b, em, strong,<br>a, br, img, span, sub, sup<br>button, input, label, select, textarea</p><p>块级元素：canvas，div，dl，footer，form，h1，header，hr，p，pre，section，table，ul，li</p><h3 id=\"HTML5-新增标签\"><a href=\"#HTML5-新增标签\" class=\"headerlink\" title=\"HTML5 新增标签\"></a>HTML5 新增标签</h3><p>article, audio, video, canvas, footer, header, nav, section</p><h3 id=\"Doctype\"><a href=\"#Doctype\" class=\"headerlink\" title=\"Doctype\"></a>Doctype</h3><p>&lt;!DOCTYPE&gt; 告知 浏览器 当前的 HTML (或 XML) 文档是哪一个版本. Doctype 是一条 声明, 而不是一个 标签; 也可以把它叫做 “文档类型声明”, 或 简称为 “DTD”.</p><h2 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h2><h3 id=\"IE和Chrome事件模型的区别\"><a href=\"#IE和Chrome事件模型的区别\" class=\"headerlink\" title=\"IE和Chrome事件模型的区别\"></a>IE和Chrome事件模型的区别</h3><p>Chrome 捕获=&gt;目标=&gt;冒泡<br>IE 目标=&gt;冒泡</p><h3 id=\"cookie和session区别\"><a href=\"#cookie和session区别\" class=\"headerlink\" title=\"cookie和session区别\"></a>cookie和session区别</h3><p>1，session 在服务器端，cookie 在客户端（浏览器）<br>2，session 默认被存在在服务器的一个文件里（不是内存）<br>3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）<br>4，session 可以放在 文件、数据库、或内存中都可以。<br>5，用户验证这种场合一般会用 session</p><h3 id=\"浏览器缓存策略\"><a href=\"#浏览器缓存策略\" class=\"headerlink\" title=\"浏览器缓存策略\"></a>浏览器缓存策略</h3><h4 id=\"HTTP-缓存\"><a href=\"#HTTP-缓存\" class=\"headerlink\" title=\"HTTP 缓存\"></a>HTTP 缓存</h4><p>Cache-Control:public, max-age=31536000</p><h4 id=\"HTML5-manifest\"><a href=\"#HTML5-manifest\" class=\"headerlink\" title=\"HTML5 manifest\"></a>HTML5 manifest</h4><h4 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h4><h4 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h4><h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><h3 id=\"处理跨域的方法\"><a href=\"#处理跨域的方法\" class=\"headerlink\" title=\"处理跨域的方法\"></a>处理跨域的方法</h3><h4 id=\"Iframe-document-domain\"><a href=\"#Iframe-document-domain\" class=\"headerlink\" title=\"Iframe + document.domain\"></a>Iframe + document.domain</h4><p>原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域<br>限制：同域document提供的是页面间的互操作，需要载入iframe页面</p><h4 id=\"有src的标签-统计代码\"><a href=\"#有src的标签-统计代码\" class=\"headerlink\" title=\"有src的标签(统计代码)\"></a>有src的标签(统计代码)</h4><p>原理：所有具有src属性的HTML标签都是可以跨域的，包括img, script<br>限制：需要创建一个DOM对象，只能用于GET方法</p><h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>原理：script是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数。<br>限制：需要创建一个DOM对象并且添加到DOM树，只能用于GET方法<br>.getJSON与.get的区别是前者会把responseText转换为JSON，而且当URL具有callback参数时， jQuery将会把它解释为一个JSONP请求，创建一个script标签来完成该请求。</p><h4 id=\"跨域资源共享（CORS）\"><a href=\"#跨域资源共享（CORS）\" class=\"headerlink\" title=\"跨域资源共享（CORS）\"></a>跨域资源共享（CORS）</h4><p>原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求<br>限制：浏览器需要支持HTML5，可以支持POST，PUT等方法</p><h3 id=\"常见HTTP状态码\"><a href=\"#常见HTTP状态码\" class=\"headerlink\" title=\"常见HTTP状态码\"></a>常见HTTP状态码</h3><ol><li>1xx消息</li><li>2xx成功</li><li>3xx重定向</li><li>4xx客户端错误</li><li>5xx服务器错误<h3 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h3>GET在浏览器回退时是无害的，而POST会再次提交请求。<br>GET产生的URL地址可以被Bookmark，而POST不可以。<br>GET请求会被浏览器主动cache，而POST不会，除非手动设置。<br>GET请求只能进行url编码，而POST支持多种编码方式。<br>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br>GET请求在URL中传送的参数是有长度限制的，而POST么有。<br>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。<br>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。<br>GET参数通过URL传递，POST放在Request body中。</li></ol><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p><p>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><h3 id=\"url请求的过程\"><a href=\"#url请求的过程\" class=\"headerlink\" title=\"url请求的过程\"></a>url请求的过程</h3><p>浏览器查找域名的 IP 地址<br>这一步包括 DNS 具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…<br>浏览器向 web 服务器发送一个 HTTP 请求 4. 服务器的永久重定向响应（从 <a href=\"http://example.com\" target=\"_blank\" rel=\"external\">http://example.com</a> 到 <a href=\"http://www.example.com）\" target=\"_blank\" rel=\"external\">http://www.example.com）</a><br>浏览器跟踪重定向地址<br>服务器处理请求<br>服务器返回一个 HTTP 响应<br>浏览器显示 HTML<br>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）<br>浏览器发送异步请求</p><h2 id=\"服务器技术\"><a href=\"#服务器技术\" class=\"headerlink\" title=\"服务器技术\"></a>服务器技术</h2><h3 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h3><h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><h3 id=\"antdesign\"><a href=\"#antdesign\" class=\"headerlink\" title=\"antdesign\"></a>antdesign</h3><h3 id=\"React的diff原理和组件化思想\"><a href=\"#React的diff原理和组件化思想\" class=\"headerlink\" title=\"React的diff原理和组件化思想\"></a>React的diff原理和组件化思想</h3><h3 id=\"state-props\"><a href=\"#state-props\" class=\"headerlink\" title=\"state / props\"></a>state / props</h3><p>props不变的，state变的。</p><h3 id=\"f7优缺点\"><a href=\"#f7优缺点\" class=\"headerlink\" title=\"f7优缺点\"></a>f7优缺点</h3><h3 id=\"node版本的区别\"><a href=\"#node版本的区别\" class=\"headerlink\" title=\"node版本的区别\"></a>node版本的区别</h3><h3 id=\"angularjs-脏检查\"><a href=\"#angularjs-脏检查\" class=\"headerlink\" title=\"angularjs 脏检查\"></a>angularjs 脏检查</h3><p>Angular将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变化。如果变化，则执行相应的watcher函数。等到model值不再变化，也就不会再有watch函数被触发，则一个digest循环结束。<br>$watch: 监听scope model变化<br>$apply: 触发“脏检查”<br>$digest: 内部函数，执行脏检查。 digest循环包括2个while循环:<br>处理$evalAsync的异步运算队列<br>处理$watch的wathers队列</p>","excerpt":"<p>常见前端面试题整理贴<br>","more":"</p><h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"js的继承实现\"><a href=\"#js的继承实现\" class=\"headerlink\" title=\"js的继承实现\"></a>js的继承实现</h3><p>JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p><h4 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h4><h5 id=\"构造器方法\"><a href=\"#构造器方法\" class=\"headerlink\" title=\"构造器方法\"></a>构造器方法</h5><p>构造器其实就是一个普通的函数。当使用 new 操作符 来作用这个函数时，它就可以被称为构造方法（构造函数）。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Graph</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.vertices = [];</div><div class=\"line\">  <span class=\"keyword\">this</span>.edges = [];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Graph.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">addVertex</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.vertices.push(v);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">new</span> Graph();</div><div class=\"line\"><span class=\"comment\">// g是生成的对象,他的自身属性有'vertices'和'edges'.</span></div><div class=\"line\"><span class=\"comment\">// 在g被实例化时,g.[[Prototype]]指向了Graph.prototype.</span></div></pre></td></tr></table></figure><p></p><h5 id=\"Object-create-es5\"><a href=\"#Object-create-es5\" class=\"headerlink\" title=\"Object.create (es5)\"></a>Object.create (es5)</h5><p>ECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.create(a);</div><div class=\"line\"><span class=\"comment\">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.a); <span class=\"comment\">// 1 (继承而来)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Object</span>.create(b);</div><div class=\"line\"><span class=\"comment\">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"comment\">// d ---&gt; null</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(d.hasOwnProperty); <span class=\"comment\">// undefined, 因为d没有继承Object.prototype</span></div></pre></td></tr></table></figure><p></p><h5 id=\"class-es6\"><a href=\"#class-es6\" class=\"headerlink\" title=\"class (es6)\"></a>class (es6)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(sideLength) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(sideLength, sideLength);</div><div class=\"line\">  &#125;</div><div class=\"line\">  get area() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.width;</div><div class=\"line\">  &#125;</div><div class=\"line\">  set sideLength(newLength) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = newLength;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = newLength;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"keyword\">new</span> Square(<span class=\"number\">2</span>);</div></pre></td></tr></table></figure><h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。<br>hasOwnProperty 是 JavaScript 中唯一一个只涉及对象自身属性而不会遍历原型链的方法。</p><h3 id=\"js的闭包\"><a href=\"#js的闭包\" class=\"headerlink\" title=\"js的闭包\"></a>js的闭包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。</div><div class=\"line\">换句话说，这些函数可以“记忆”它被创建时候的环境。</div></pre></td></tr></table></figure><p>闭包是指能够访问在封闭作用于内的变量的函数，这些函数可以保存它们被创建时的环境。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"Mozilla\"</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(name);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> displayName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myFunc = makeFunc();</div><div class=\"line\">myFunc();</div></pre></td></tr></table></figure><p></p><h4 id=\"闭包的应用\"><a href=\"#闭包的应用\" class=\"headerlink\" title=\"闭包的应用\"></a>闭包的应用</h4><ul><li><p>访问私有属性</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> name = <span class=\"string\">'fooname'</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> age = <span class=\"number\">12</span>;</div><div class=\"line\">      <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> name;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">this</span>.getAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> age;</div><div class=\"line\">      &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\"></div><div class=\"line\">  foo.name;        <span class=\"comment\">//  =&gt; undefined</span></div><div class=\"line\">  foo.age;         <span class=\"comment\">//  =&gt; undefined</span></div><div class=\"line\">  foo.getName();   <span class=\"comment\">//  =&gt; 'fooname'</span></div><div class=\"line\">  foo.getAge();    <span class=\"comment\">//  =&gt; 12</span></div></pre></td></tr></table></figure></li><li><p>在内存中维持变量：如果缓存数据、柯里化。</p></li></ul><h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><p>需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露</p><h3 id=\"“use-strict”\"><a href=\"#“use-strict”\" class=\"headerlink\" title=\"“use strict”;\"></a>“use strict”;</h3><h4 id=\"声明方式\"><a href=\"#声明方式\" class=\"headerlink\" title=\"声明方式\"></a>声明方式</h4><ul><li>script 声明</li><li><p>function 声明</p><h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><h5 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h5><p>如果代码中使用”use strict”开启了严格模式,则下面的情况都会在脚本运行之前抛出SyntaxError异常:</p></li><li><p>八进制语法:var n = 023和var s = “\\047” (数字前不能有0)</p></li><li>with语句</li><li>使用delete删除一个变量名(而不是属性名):delete myVariable</li><li>使用eval或arguments作为变量名或函数名</li><li>使用未来保留字(也许会在ECMAScript 6中使用):implements, interface, let, package, private, protected, public, static,和yield作为变量名或函数名</li><li>在语句块中使用函数声明:if(a&lt;b){ function f(){} }</li><li>对象字面量中使用两个相同的属性名:{a: 1, b: 3, a: 7}</li><li>函数形参中使用两个相同的参数名:function f(a, b, b){}</li></ul><h4 id=\"语义差异\"><a href=\"#语义差异\" class=\"headerlink\" title=\"语义差异\"></a>语义差异</h4><h5 id=\"函数调用中的this\"><a href=\"#函数调用中的this\" class=\"headerlink\" title=\"函数调用中的this\"></a>函数调用中的this</h5><p>在普通的函数调用f()中,this的值会指向全局对象.在严格模式中,this的值会指向undefined.当函数通过call和apply调用时,如果传入的thisvalue参数是一个null和undefined除外的原始值(字符串,数字,布尔值),则this的值会成为那个原始值对应的包装对象,如果thisvalue参数的值是undefined或null,则this的值会指向全局对象.在严格模式中,this的值就是thisvalue参数的值,没有任何类型转换.</p><h5 id=\"arguments对象属性不与对应的形参变量同步更新\"><a href=\"#arguments对象属性不与对应的形参变量同步更新\" class=\"headerlink\" title=\"arguments对象属性不与对应的形参变量同步更新\"></a>arguments对象属性不与对应的形参变量同步更新</h5><p>在非严格模式中,修改arguments对象中某个索引属性的值,和这个属性对应的形参变量的值也会同时变化,反之亦然.这会让JavaScript的代码混淆引擎让代码变得更难读和理解。在严格模式中arguments 对象会以形参变量的拷贝的形式被创建和初始化，因此 arguments 对象的改变不会影响形参。</p><h5 id=\"eval相关的区别\"><a href=\"#eval相关的区别\" class=\"headerlink\" title=\"eval相关的区别\"></a>eval相关的区别</h5><p>在严格模式中,eval不会在当前的作用域内创建新的变量.另外,传入eval的字符串参数也会按照严格模式来解析.你需要全面测试来确保没有代码收到影响。另外，如果你并不是为了解决一个非常实际的解决方案中，尽量不要使用eval。</p><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><h4 id=\"全局上下文\"><a href=\"#全局上下文\" class=\"headerlink\" title=\"全局上下文\"></a>全局上下文</h4><p>在全局运行上下文中（在任何函数体外部），this指代全局对象，无论是否在严格模式下。</p><h4 id=\"函数上下文\"><a href=\"#函数上下文\" class=\"headerlink\" title=\"函数上下文\"></a>函数上下文</h4><p>在函数内部，this的值取决于函数是如何调用的。</p><h5 id=\"直接调用\"><a href=\"#直接调用\" class=\"headerlink\" title=\"直接调用\"></a>直接调用</h5><ul><li>非严格模式 window</li><li>严格模式 如果this未被执行的上下文环境定义，那么它将会默认为undefined。</li></ul><h4 id=\"对象方法中的-this\"><a href=\"#对象方法中的-this\" class=\"headerlink\" title=\"对象方法中的 this\"></a>对象方法中的 this</h4><p>对象方法中的this，指向调用该函数的对象（就近原则）</p><h4 id=\"构造函数中的-this\"><a href=\"#构造函数中的-this\" class=\"headerlink\" title=\"构造函数中的 this\"></a>构造函数中的 this</h4><p>当一个函数被作为一个构造函数来使用（使用new关键字），它的this与即将被创建的新对象绑定。</p><h4 id=\"call-apply\"><a href=\"#call-apply\" class=\"headerlink\" title=\"call / apply\"></a>call / apply</h4><p>绑定到一个指定的对象上</p><h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><p>f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数</p><h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。</p><h4 id=\"阻止继续冒泡\"><a href=\"#阻止继续冒泡\" class=\"headerlink\" title=\"阻止继续冒泡\"></a>阻止继续冒泡</h4><p>stopPropagation()</p><h3 id=\"AMD-CMD-UMD\"><a href=\"#AMD-CMD-UMD\" class=\"headerlink\" title=\"AMD/CMD/UMD\"></a>AMD/CMD/UMD</h3><ol><li>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：<br>在 RequireJS 里，模块有多种书写格式，推荐的是：<br>define([“./a”, “./b”], function(a, b) {<br>a.doSomething();<br>b.doSomething();<br>});<br>在 SeaJS 里，模块只有一种书写格式：<br>define(function(require, exports, module) {<br>require(“./a”).doSomething();<br>require(“./b”).doSomething();<br>});</li></ol><h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>里到外 padding border margin</p><h4 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h4><p>属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。</p><h5 id=\"content-box\"><a href=\"#content-box\" class=\"headerlink\" title=\"content-box\"></a>content-box</h5><p>默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。</p><h5 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h5><p>width 和 height 属性包括内容，内边距和边框，但不包括外边距。</p><h3 id=\"position有哪些属性，各自是什么特点？\"><a href=\"#position有哪些属性，各自是什么特点？\" class=\"headerlink\" title=\"position有哪些属性，各自是什么特点？\"></a>position有哪些属性，各自是什么特点？</h3><h5 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h5><p>该关键字指定元素使用正常的布局行为，即元素在文档流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</p><h5 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h5><p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 未定义对 table, 元素应用的效果。</p><h5 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h5><p>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p><h5 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h5><p>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的栈上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。</p><h5 id=\"sticky\"><a href=\"#sticky\" class=\"headerlink\" title=\"sticky\"></a>sticky</h5><p>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</p><h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><h4 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#cell</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#content</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"行高（单行文本）\"><a href=\"#行高（单行文本）\" class=\"headerlink\" title=\"行高（单行文本）\"></a>行高（单行文本）</h4><h4 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#content</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>:flex;</div><div class=\"line\">    <span class=\"attribute\">align-item</span>: center</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h4 id=\"JS-1\"><a href=\"#JS-1\" class=\"headerlink\" title=\"JS\"></a>JS</h4><h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><p><a href=\"http://www.cnblogs.com/imwtr/p/4441741.html\">http://www.cnblogs.com/imwtr/p/4441741.html</a></p><h3 id=\"flex-1\"><a href=\"#flex-1\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p><a href=\"http://www.cnblogs.com/imwtr/p/4441741.html\">http://www.cnblogs.com/imwtr/p/4441741.html</a></p><h3 id=\"grid\"><a href=\"#grid\" class=\"headerlink\" title=\"grid\"></a>grid</h3><p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">https://css-tricks.com/snippets/css/complete-guide-grid/</a></p><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"Style标签放置的最佳位置\"><a href=\"#Style标签放置的最佳位置\" class=\"headerlink\" title=\"Style标签放置的最佳位置\"></a>Style标签放置的最佳位置</h3><p>head 里，提前加载样式<br>w3c不建议放在body中，新增的style标签的“scoped”属性（兼容性不行，只有FF）</p><h3 id=\"常见行内元素和块级元素\"><a href=\"#常见行内元素和块级元素\" class=\"headerlink\" title=\"常见行内元素和块级元素\"></a>常见行内元素和块级元素</h3><p>行内 ： b, em, strong,<br>a, br, img, span, sub, sup<br>button, input, label, select, textarea</p><p>块级元素：canvas，div，dl，footer，form，h1，header，hr，p，pre，section，table，ul，li</p><h3 id=\"HTML5-新增标签\"><a href=\"#HTML5-新增标签\" class=\"headerlink\" title=\"HTML5 新增标签\"></a>HTML5 新增标签</h3><p>article, audio, video, canvas, footer, header, nav, section</p><h3 id=\"Doctype\"><a href=\"#Doctype\" class=\"headerlink\" title=\"Doctype\"></a>Doctype</h3><p>&lt;!DOCTYPE&gt; 告知 浏览器 当前的 HTML (或 XML) 文档是哪一个版本. Doctype 是一条 声明, 而不是一个 标签; 也可以把它叫做 “文档类型声明”, 或 简称为 “DTD”.</p><h2 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h2><h3 id=\"IE和Chrome事件模型的区别\"><a href=\"#IE和Chrome事件模型的区别\" class=\"headerlink\" title=\"IE和Chrome事件模型的区别\"></a>IE和Chrome事件模型的区别</h3><p>Chrome 捕获=&gt;目标=&gt;冒泡<br>IE 目标=&gt;冒泡</p><h3 id=\"cookie和session区别\"><a href=\"#cookie和session区别\" class=\"headerlink\" title=\"cookie和session区别\"></a>cookie和session区别</h3><p>1，session 在服务器端，cookie 在客户端（浏览器）<br>2，session 默认被存在在服务器的一个文件里（不是内存）<br>3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）<br>4，session 可以放在 文件、数据库、或内存中都可以。<br>5，用户验证这种场合一般会用 session</p><h3 id=\"浏览器缓存策略\"><a href=\"#浏览器缓存策略\" class=\"headerlink\" title=\"浏览器缓存策略\"></a>浏览器缓存策略</h3><h4 id=\"HTTP-缓存\"><a href=\"#HTTP-缓存\" class=\"headerlink\" title=\"HTTP 缓存\"></a>HTTP 缓存</h4><p>Cache-Control:public, max-age=31536000</p><h4 id=\"HTML5-manifest\"><a href=\"#HTML5-manifest\" class=\"headerlink\" title=\"HTML5 manifest\"></a>HTML5 manifest</h4><h4 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h4><h4 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h4><h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><h3 id=\"处理跨域的方法\"><a href=\"#处理跨域的方法\" class=\"headerlink\" title=\"处理跨域的方法\"></a>处理跨域的方法</h3><h4 id=\"Iframe-document-domain\"><a href=\"#Iframe-document-domain\" class=\"headerlink\" title=\"Iframe + document.domain\"></a>Iframe + document.domain</h4><p>原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域<br>限制：同域document提供的是页面间的互操作，需要载入iframe页面</p><h4 id=\"有src的标签-统计代码\"><a href=\"#有src的标签-统计代码\" class=\"headerlink\" title=\"有src的标签(统计代码)\"></a>有src的标签(统计代码)</h4><p>原理：所有具有src属性的HTML标签都是可以跨域的，包括img, script<br>限制：需要创建一个DOM对象，只能用于GET方法</p><h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>原理：script是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数。<br>限制：需要创建一个DOM对象并且添加到DOM树，只能用于GET方法<br>.getJSON与.get的区别是前者会把responseText转换为JSON，而且当URL具有callback参数时， jQuery将会把它解释为一个JSONP请求，创建一个script标签来完成该请求。</p><h4 id=\"跨域资源共享（CORS）\"><a href=\"#跨域资源共享（CORS）\" class=\"headerlink\" title=\"跨域资源共享（CORS）\"></a>跨域资源共享（CORS）</h4><p>原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求<br>限制：浏览器需要支持HTML5，可以支持POST，PUT等方法</p><h3 id=\"常见HTTP状态码\"><a href=\"#常见HTTP状态码\" class=\"headerlink\" title=\"常见HTTP状态码\"></a>常见HTTP状态码</h3><ol><li>1xx消息</li><li>2xx成功</li><li>3xx重定向</li><li>4xx客户端错误</li><li>5xx服务器错误<h3 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h3>GET在浏览器回退时是无害的，而POST会再次提交请求。<br>GET产生的URL地址可以被Bookmark，而POST不可以。<br>GET请求会被浏览器主动cache，而POST不会，除非手动设置。<br>GET请求只能进行url编码，而POST支持多种编码方式。<br>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br>GET请求在URL中传送的参数是有长度限制的，而POST么有。<br>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。<br>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。<br>GET参数通过URL传递，POST放在Request body中。</li></ol><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p><p>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><h3 id=\"url请求的过程\"><a href=\"#url请求的过程\" class=\"headerlink\" title=\"url请求的过程\"></a>url请求的过程</h3><p>浏览器查找域名的 IP 地址<br>这一步包括 DNS 具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…<br>浏览器向 web 服务器发送一个 HTTP 请求 4. 服务器的永久重定向响应（从 <a href=\"http://example.com\">http://example.com</a> 到 <a href=\"http://www.example.com）\">http://www.example.com）</a><br>浏览器跟踪重定向地址<br>服务器处理请求<br>服务器返回一个 HTTP 响应<br>浏览器显示 HTML<br>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）<br>浏览器发送异步请求</p><h2 id=\"服务器技术\"><a href=\"#服务器技术\" class=\"headerlink\" title=\"服务器技术\"></a>服务器技术</h2><h3 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h3><h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><h3 id=\"antdesign\"><a href=\"#antdesign\" class=\"headerlink\" title=\"antdesign\"></a>antdesign</h3><h3 id=\"React的diff原理和组件化思想\"><a href=\"#React的diff原理和组件化思想\" class=\"headerlink\" title=\"React的diff原理和组件化思想\"></a>React的diff原理和组件化思想</h3><h3 id=\"state-props\"><a href=\"#state-props\" class=\"headerlink\" title=\"state / props\"></a>state / props</h3><p>props不变的，state变的。</p><h3 id=\"f7优缺点\"><a href=\"#f7优缺点\" class=\"headerlink\" title=\"f7优缺点\"></a>f7优缺点</h3><h3 id=\"node版本的区别\"><a href=\"#node版本的区别\" class=\"headerlink\" title=\"node版本的区别\"></a>node版本的区别</h3><h3 id=\"angularjs-脏检查\"><a href=\"#angularjs-脏检查\" class=\"headerlink\" title=\"angularjs 脏检查\"></a>angularjs 脏检查</h3><p>Angular将双向绑定转换为一堆watch表达式，然后递归检查这些watch表达式的结果是否变化。如果变化，则执行相应的watcher函数。等到model值不再变化，也就不会再有watch函数被触发，则一个digest循环结束。<br>$watch: 监听scope model变化<br>$apply: 触发“脏检查”<br>$digest: 内部函数，执行脏检查。 digest循环包括2个while循环:<br>处理$evalAsync的异步运算队列<br>处理$watch的wathers队列</p>"},{"title":"我的失败主义","date":"2017-05-18T14:36:26.000Z","_content":"> 我知道最终一定会失败，我只是单纯的想去做\n\n我发现希望有时带给人的是更深的失望，还有不切实际的侥幸心理。\n过度的关注结果，会让人忘记初心。\n告诉自己去做你想做的事情，而且你一定会失败，\n所以你只管做就是了。\n\n侥幸的希望，不如脚踏实地的绝望。","source":"_posts/我的失败主义.md","raw":"---\ntitle: 我的失败主义\ndate: 2017-05-18 22:36:26\ncategories: 随笔\n---\n> 我知道最终一定会失败，我只是单纯的想去做\n\n我发现希望有时带给人的是更深的失望，还有不切实际的侥幸心理。\n过度的关注结果，会让人忘记初心。\n告诉自己去做你想做的事情，而且你一定会失败，\n所以你只管做就是了。\n\n侥幸的希望，不如脚踏实地的绝望。","slug":"我的失败主义","published":1,"updated":"2017-05-18T14:47:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uyc1000nd5tb757quy6l","content":"<blockquote><p>我知道最终一定会失败，我只是单纯的想去做</p></blockquote><p>我发现希望有时带给人的是更深的失望，还有不切实际的侥幸心理。<br>过度的关注结果，会让人忘记初心。<br>告诉自己去做你想做的事情，而且你一定会失败，<br>所以你只管做就是了。</p><p>侥幸的希望，不如脚踏实地的绝望。</p>","excerpt":"","more":"<blockquote><p>我知道最终一定会失败，我只是单纯的想去做</p></blockquote><p>我发现希望有时带给人的是更深的失望，还有不切实际的侥幸心理。<br>过度的关注结果，会让人忘记初心。<br>告诉自己去做你想做的事情，而且你一定会失败，<br>所以你只管做就是了。</p><p>侥幸的希望，不如脚踏实地的绝望。</p>"},{"title":"大幅提升 React 性能的6个建议","date":"2016-12-24T06:19:21.000Z","_content":"React 在不做任何优化的情况下性能也非常好，然而通过一些小小的优化，可以让性能进一步提升，通过以下这6条建议，可以数十倍加快渲染速度\n\n## 设置 NODE_ENV 为 Production\nReact 在开发环境下，有完整的警告和错误检查，但它们不是为生产环境准备的，如果你看过 React 的源码，你会看到很多 `if (process.env.NODE_ENV != 'production')`，这些代码对于最终用户是不需要的，而且访问 `process.env.NODE_ENV` 会非常慢，对于生产环境而言，完全可以移除这些代码\n\n如果你使用 [Webpack](https://webpack.github.io/)，你可以使用 [DefinePlugin](https://webpack.github.io/docs/list-of-plugins.html#defineplugin) 来替换 `process.env.NODE_ENV` 为 'production'，然后使用 [UglifyJsPlugin](https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin) 移除这些不会执行的代码\n``` js\n// webpack.config.js\n...\nplugins: [\n    new webpack.DefinePlugin({\n        'process.env.NODE_ENV': JSON.stringify('production')\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n            warnings: false\n        }\n    })\n]\n...\n```\n\n## React 15 的渲染速度比 0.14 快约 25%\n在 [React 15 的更新](https://facebook.github.io/react/blog/2016/04/07/react-v15.html)中非常重要的一项是，使用在现代化浏览器中性能更好的 `document.createElement` 替换 `innerHTML`，这一改动也意味着 React 将不再支持 IE8\n\n## Babel Constant 和 Inline Elements 转换\nBabel 为开发者们提供了 [React Constant Elements](http://babeljs.io/docs/plugins/transform-react-constant-elements/) 和 [React Inline Elements](https://babeljs.io/docs/plugins/transform-react-inline-elements/)，这两款插件能够在编译阶段将代码转换成更高效的形式，注意仅将它们用于生产环境\n\n## 封装集合渲染为独立组件\n这一点在循环渲染集合组件时尤其重要，React 在渲染大型集合是性能十分糟糕，原因是 React 会在每次更新中全部重新渲染，因此建议将渲染集合的部分装为独立的组件渲染\n```js\n// Bad\nclass MyComponent extends Component {\n    render() {\n        const {todos, user} = this.props;\n        return (<div>\n            {user.name}\n            <ul>\n                {todos.map(todo => <TodoView todo={todo} key={todo.id} />)}\n            </ul>\n        </div>)\n    }\n}\n```\n``` js\n// Good\n// 当 user.name 更新时，列表不会重新渲染\nclass MyComponent extends Component {\n    render() {\n        const {todos, user} = this.props;\n        return (<div>\n            {user.name}\n            <TodosView todos={todos} />\n        </div>)\n    }\n}\n\nclass TodosView extends Component {\n    render() {\n        const {todos} = this.props;\n        return (<ul>\n            {todos.map(todo => <TodoView todo={todo} key={todo.id} />)}\n        </ul>)\n    }\n}\n```\n\n## 尽早绑定方法\n在 render() 中绑定的方法应该尽早声明，而不是在渲染时定义\n``` js\n// Bad\nrender() {\n    return <MyWidget onClick={() => { alert(this.state.text) }} />\n}\n```\n``` js\n// Good\nconstructor() {\n    this.handleClick = this.handleClick.bind(this);\n}\n\nhandleClick() {\n    alert(this.state.text);\n}\n\nrender() {\n    return <MyWidget onClick={this.handleClick} />\n}\n```\n\n## 不变组件禁用更新\n对于不需要更新的组件，可以在 `shouldComponentUpdate()` 中 `return false`，或者使用 [Stateless Component](https://facebook.github.io/react/docs/components-and-props.html)\n``` js\n// Bad\nclass Logo extends Component {\n    render() {\n        return <div><img src='logo.png' /></div>;\n    }\n}\n```\n\n``` js\n// Good\nclass Logo extends Component {\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    render() {\n        return <div><img src='logo.png' /></div>;\n    }\n}\n\n// or Stateless Component\nconst Logo = () => <div><img src='logo.png' /></div>;\n```\n\n##### 参考文章\n- [React performance](https://github.com/markerikson/react-redux-links/blob/master/react-performance.md)\n- [How to Make Your React Apps 15x Faster](https://reactjsnews.com/how-to-make-your-react-apps-10x-faster)\n- [Avoid bind when passing props](https://daveceddia.com/avoid-bind-when-passing-props/)\n- [Optimizing rendering React components](https://mobxjs.github.io/mobx/best/react-performance.html)\n","source":"_posts/大幅提升-React-性能的6个建议.md","raw":"---\ntitle: 大幅提升 React 性能的6个建议\ndate: 2016-12-24 14:19:21\ncategories: 技术\ntags: React\n---\nReact 在不做任何优化的情况下性能也非常好，然而通过一些小小的优化，可以让性能进一步提升，通过以下这6条建议，可以数十倍加快渲染速度\n\n## 设置 NODE_ENV 为 Production\nReact 在开发环境下，有完整的警告和错误检查，但它们不是为生产环境准备的，如果你看过 React 的源码，你会看到很多 `if (process.env.NODE_ENV != 'production')`，这些代码对于最终用户是不需要的，而且访问 `process.env.NODE_ENV` 会非常慢，对于生产环境而言，完全可以移除这些代码\n\n如果你使用 [Webpack](https://webpack.github.io/)，你可以使用 [DefinePlugin](https://webpack.github.io/docs/list-of-plugins.html#defineplugin) 来替换 `process.env.NODE_ENV` 为 'production'，然后使用 [UglifyJsPlugin](https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin) 移除这些不会执行的代码\n``` js\n// webpack.config.js\n...\nplugins: [\n    new webpack.DefinePlugin({\n        'process.env.NODE_ENV': JSON.stringify('production')\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n            warnings: false\n        }\n    })\n]\n...\n```\n\n## React 15 的渲染速度比 0.14 快约 25%\n在 [React 15 的更新](https://facebook.github.io/react/blog/2016/04/07/react-v15.html)中非常重要的一项是，使用在现代化浏览器中性能更好的 `document.createElement` 替换 `innerHTML`，这一改动也意味着 React 将不再支持 IE8\n\n## Babel Constant 和 Inline Elements 转换\nBabel 为开发者们提供了 [React Constant Elements](http://babeljs.io/docs/plugins/transform-react-constant-elements/) 和 [React Inline Elements](https://babeljs.io/docs/plugins/transform-react-inline-elements/)，这两款插件能够在编译阶段将代码转换成更高效的形式，注意仅将它们用于生产环境\n\n## 封装集合渲染为独立组件\n这一点在循环渲染集合组件时尤其重要，React 在渲染大型集合是性能十分糟糕，原因是 React 会在每次更新中全部重新渲染，因此建议将渲染集合的部分装为独立的组件渲染\n```js\n// Bad\nclass MyComponent extends Component {\n    render() {\n        const {todos, user} = this.props;\n        return (<div>\n            {user.name}\n            <ul>\n                {todos.map(todo => <TodoView todo={todo} key={todo.id} />)}\n            </ul>\n        </div>)\n    }\n}\n```\n``` js\n// Good\n// 当 user.name 更新时，列表不会重新渲染\nclass MyComponent extends Component {\n    render() {\n        const {todos, user} = this.props;\n        return (<div>\n            {user.name}\n            <TodosView todos={todos} />\n        </div>)\n    }\n}\n\nclass TodosView extends Component {\n    render() {\n        const {todos} = this.props;\n        return (<ul>\n            {todos.map(todo => <TodoView todo={todo} key={todo.id} />)}\n        </ul>)\n    }\n}\n```\n\n## 尽早绑定方法\n在 render() 中绑定的方法应该尽早声明，而不是在渲染时定义\n``` js\n// Bad\nrender() {\n    return <MyWidget onClick={() => { alert(this.state.text) }} />\n}\n```\n``` js\n// Good\nconstructor() {\n    this.handleClick = this.handleClick.bind(this);\n}\n\nhandleClick() {\n    alert(this.state.text);\n}\n\nrender() {\n    return <MyWidget onClick={this.handleClick} />\n}\n```\n\n## 不变组件禁用更新\n对于不需要更新的组件，可以在 `shouldComponentUpdate()` 中 `return false`，或者使用 [Stateless Component](https://facebook.github.io/react/docs/components-and-props.html)\n``` js\n// Bad\nclass Logo extends Component {\n    render() {\n        return <div><img src='logo.png' /></div>;\n    }\n}\n```\n\n``` js\n// Good\nclass Logo extends Component {\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    render() {\n        return <div><img src='logo.png' /></div>;\n    }\n}\n\n// or Stateless Component\nconst Logo = () => <div><img src='logo.png' /></div>;\n```\n\n##### 参考文章\n- [React performance](https://github.com/markerikson/react-redux-links/blob/master/react-performance.md)\n- [How to Make Your React Apps 15x Faster](https://reactjsnews.com/how-to-make-your-react-apps-10x-faster)\n- [Avoid bind when passing props](https://daveceddia.com/avoid-bind-when-passing-props/)\n- [Optimizing rendering React components](https://mobxjs.github.io/mobx/best/react-performance.html)\n","slug":"大幅提升-React-性能的6个建议","published":1,"updated":"2017-05-06T01:47:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uyc6000pd5tbqx66rbsb","content":"<p>React 在不做任何优化的情况下性能也非常好，然而通过一些小小的优化，可以让性能进一步提升，通过以下这6条建议，可以数十倍加快渲染速度</p><h2 id=\"设置-NODE-ENV-为-Production\"><a href=\"#设置-NODE-ENV-为-Production\" class=\"headerlink\" title=\"设置 NODE_ENV 为 Production\"></a>设置 NODE_ENV 为 Production</h2><p>React 在开发环境下，有完整的警告和错误检查，但它们不是为生产环境准备的，如果你看过 React 的源码，你会看到很多 <code>if (process.env.NODE_ENV != &#39;production&#39;)</code>，这些代码对于最终用户是不需要的，而且访问 <code>process.env.NODE_ENV</code> 会非常慢，对于生产环境而言，完全可以移除这些代码</p><p>如果你使用 <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">Webpack</a>，你可以使用 <a href=\"https://webpack.github.io/docs/list-of-plugins.html#defineplugin\" target=\"_blank\" rel=\"external\">DefinePlugin</a> 来替换 <code>process.env.NODE_ENV</code> 为 ‘production’，然后使用 <a href=\"https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\" target=\"_blank\" rel=\"external\">UglifyJsPlugin</a> 移除这些不会执行的代码<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\">...</div><div class=\"line\">plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">        <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">        <span class=\"attr\">compress</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">]</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><h2 id=\"React-15-的渲染速度比-0-14-快约-25\"><a href=\"#React-15-的渲染速度比-0-14-快约-25\" class=\"headerlink\" title=\"React 15 的渲染速度比 0.14 快约 25%\"></a>React 15 的渲染速度比 0.14 快约 25%</h2><p>在 <a href=\"https://facebook.github.io/react/blog/2016/04/07/react-v15.html\" target=\"_blank\" rel=\"external\">React 15 的更新</a>中非常重要的一项是，使用在现代化浏览器中性能更好的 <code>document.createElement</code> 替换 <code>innerHTML</code>，这一改动也意味着 React 将不再支持 IE8</p><h2 id=\"Babel-Constant-和-Inline-Elements-转换\"><a href=\"#Babel-Constant-和-Inline-Elements-转换\" class=\"headerlink\" title=\"Babel Constant 和 Inline Elements 转换\"></a>Babel Constant 和 Inline Elements 转换</h2><p>Babel 为开发者们提供了 <a href=\"http://babeljs.io/docs/plugins/transform-react-constant-elements/\" target=\"_blank\" rel=\"external\">React Constant Elements</a> 和 <a href=\"https://babeljs.io/docs/plugins/transform-react-inline-elements/\" target=\"_blank\" rel=\"external\">React Inline Elements</a>，这两款插件能够在编译阶段将代码转换成更高效的形式，注意仅将它们用于生产环境</p><h2 id=\"封装集合渲染为独立组件\"><a href=\"#封装集合渲染为独立组件\" class=\"headerlink\" title=\"封装集合渲染为独立组件\"></a>封装集合渲染为独立组件</h2><p>这一点在循环渲染集合组件时尤其重要，React 在渲染大型集合是性能十分糟糕，原因是 React 会在每次更新中全部重新渲染，因此建议将渲染集合的部分装为独立的组件渲染<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;todos, user&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &#123;user.name&#125;</div><div class=\"line\">            &lt;ul&gt;</div><div class=\"line\">                &#123;todos.map(todo =&gt; &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;)&#125;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"comment\">// 当 user.name 更新时，列表不会重新渲染</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;todos, user&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &#123;user.name&#125;</div><div class=\"line\">            &lt;TodosView todos=&#123;todos&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TodosView extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        const &#123;todos&#125; = this.props;</div><div class=\"line\">        return (&lt;ul&gt;</div><div class=\"line\">            &#123;todos.map(todo =&gt; &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;)&#125;</div><div class=\"line\">        &lt;/ul&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"尽早绑定方法\"><a href=\"#尽早绑定方法\" class=\"headerlink\" title=\"尽早绑定方法\"></a>尽早绑定方法</h2><p>在 render() 中绑定的方法应该尽早声明，而不是在渲染时定义<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;MyWidget onClick=&#123;() =&gt; &#123; alert(this.state.text) &#125;&#125; /&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleClick = <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">handleClick() &#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.state.text);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;MyWidget onClick=&#123;this.handleClick&#125; /&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"不变组件禁用更新\"><a href=\"#不变组件禁用更新\" class=\"headerlink\" title=\"不变组件禁用更新\"></a>不变组件禁用更新</h2><p>对于不需要更新的组件，可以在 <code>shouldComponentUpdate()</code> 中 <code>return false</code>，或者使用 <a href=\"https://facebook.github.io/react/docs/components-and-props.html\" target=\"_blank\" rel=\"external\">Stateless Component</a><br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    shouldComponentUpdate() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// or Stateless Component</div><div class=\"line\">const Logo = () =&gt; &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div></pre></td></tr></table></figure><h5 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h5><ul><li><a href=\"https://github.com/markerikson/react-redux-links/blob/master/react-performance.md\" target=\"_blank\" rel=\"external\">React performance</a></li><li><a href=\"https://reactjsnews.com/how-to-make-your-react-apps-10x-faster\" target=\"_blank\" rel=\"external\">How to Make Your React Apps 15x Faster</a></li><li><a href=\"https://daveceddia.com/avoid-bind-when-passing-props/\" target=\"_blank\" rel=\"external\">Avoid bind when passing props</a></li><li><a href=\"https://mobxjs.github.io/mobx/best/react-performance.html\" target=\"_blank\" rel=\"external\">Optimizing rendering React components</a></li></ul>","excerpt":"","more":"<p>React 在不做任何优化的情况下性能也非常好，然而通过一些小小的优化，可以让性能进一步提升，通过以下这6条建议，可以数十倍加快渲染速度</p><h2 id=\"设置-NODE-ENV-为-Production\"><a href=\"#设置-NODE-ENV-为-Production\" class=\"headerlink\" title=\"设置 NODE_ENV 为 Production\"></a>设置 NODE_ENV 为 Production</h2><p>React 在开发环境下，有完整的警告和错误检查，但它们不是为生产环境准备的，如果你看过 React 的源码，你会看到很多 <code>if (process.env.NODE_ENV != &#39;production&#39;)</code>，这些代码对于最终用户是不需要的，而且访问 <code>process.env.NODE_ENV</code> 会非常慢，对于生产环境而言，完全可以移除这些代码</p><p>如果你使用 <a href=\"https://webpack.github.io/\">Webpack</a>，你可以使用 <a href=\"https://webpack.github.io/docs/list-of-plugins.html#defineplugin\">DefinePlugin</a> 来替换 <code>process.env.NODE_ENV</code> 为 ‘production’，然后使用 <a href=\"https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\">UglifyJsPlugin</a> 移除这些不会执行的代码<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\">...</div><div class=\"line\">plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">        <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">        <span class=\"attr\">compress</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">]</div><div class=\"line\">...</div></pre></td></tr></table></figure><p></p><h2 id=\"React-15-的渲染速度比-0-14-快约-25\"><a href=\"#React-15-的渲染速度比-0-14-快约-25\" class=\"headerlink\" title=\"React 15 的渲染速度比 0.14 快约 25%\"></a>React 15 的渲染速度比 0.14 快约 25%</h2><p>在 <a href=\"https://facebook.github.io/react/blog/2016/04/07/react-v15.html\">React 15 的更新</a>中非常重要的一项是，使用在现代化浏览器中性能更好的 <code>document.createElement</code> 替换 <code>innerHTML</code>，这一改动也意味着 React 将不再支持 IE8</p><h2 id=\"Babel-Constant-和-Inline-Elements-转换\"><a href=\"#Babel-Constant-和-Inline-Elements-转换\" class=\"headerlink\" title=\"Babel Constant 和 Inline Elements 转换\"></a>Babel Constant 和 Inline Elements 转换</h2><p>Babel 为开发者们提供了 <a href=\"http://babeljs.io/docs/plugins/transform-react-constant-elements/\">React Constant Elements</a> 和 <a href=\"https://babeljs.io/docs/plugins/transform-react-inline-elements/\">React Inline Elements</a>，这两款插件能够在编译阶段将代码转换成更高效的形式，注意仅将它们用于生产环境</p><h2 id=\"封装集合渲染为独立组件\"><a href=\"#封装集合渲染为独立组件\" class=\"headerlink\" title=\"封装集合渲染为独立组件\"></a>封装集合渲染为独立组件</h2><p>这一点在循环渲染集合组件时尤其重要，React 在渲染大型集合是性能十分糟糕，原因是 React 会在每次更新中全部重新渲染，因此建议将渲染集合的部分装为独立的组件渲染<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;todos, user&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &#123;user.name&#125;</div><div class=\"line\">            &lt;ul&gt;</div><div class=\"line\">                &#123;todos.map(todo =&gt; &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;)&#125;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"comment\">// 当 user.name 更新时，列表不会重新渲染</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;todos, user&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &#123;user.name&#125;</div><div class=\"line\">            &lt;TodosView todos=&#123;todos&#125; /&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TodosView extends Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        const &#123;todos&#125; = this.props;</div><div class=\"line\">        return (&lt;ul&gt;</div><div class=\"line\">            &#123;todos.map(todo =&gt; &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;)&#125;</div><div class=\"line\">        &lt;/ul&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"尽早绑定方法\"><a href=\"#尽早绑定方法\" class=\"headerlink\" title=\"尽早绑定方法\"></a>尽早绑定方法</h2><p>在 render() 中绑定的方法应该尽早声明，而不是在渲染时定义<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;MyWidget onClick=&#123;() =&gt; &#123; alert(this.state.text) &#125;&#125; /&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleClick = <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">handleClick() &#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.state.text);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;MyWidget onClick=&#123;this.handleClick&#125; /&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"不变组件禁用更新\"><a href=\"#不变组件禁用更新\" class=\"headerlink\" title=\"不变组件禁用更新\"></a>不变组件禁用更新</h2><p>对于不需要更新的组件，可以在 <code>shouldComponentUpdate()</code> 中 <code>return false</code>，或者使用 <a href=\"https://facebook.github.io/react/docs/components-and-props.html\">Stateless Component</a><br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Good</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    shouldComponentUpdate() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// or Stateless Component</div><div class=\"line\">const Logo = () =&gt; &lt;div&gt;&lt;img src='logo.png' /&gt;&lt;/div&gt;;</div></pre></td></tr></table></figure><h5 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h5><ul><li><a href=\"https://github.com/markerikson/react-redux-links/blob/master/react-performance.md\">React performance</a></li><li><a href=\"https://reactjsnews.com/how-to-make-your-react-apps-10x-faster\">How to Make Your React Apps 15x Faster</a></li><li><a href=\"https://daveceddia.com/avoid-bind-when-passing-props/\">Avoid bind when passing props</a></li><li><a href=\"https://mobxjs.github.io/mobx/best/react-performance.html\">Optimizing rendering React components</a></li></ul>"},{"title":"炉石传说之大局观","date":"2017-02-14T03:12:51.000Z","_content":"\n> 节奏既是大局观，对阵双方谁掌握了节奏，谁就掌握了大局，谁就掌握了胜利\n—— 本人\n\n整天听大神们念叨着“大局观”，听起来很神秘，仿佛是一种高深莫测的武功，只有隐居在深山老林的高僧才能习得，然而事实并不是如此，大局观的概念非常简单，任何一个玩家都能理解，本人天梯对阵中，逐渐摸索出了大局观的真谛，并认为解释的比较合理，因此写下这篇文章谈谈我的理解\n<!--more-->\n\n## 节奏的好与坏\n节奏是指每个法力水晶的价值，当前回合的每个法力值都发挥了最大程度的作用，就是好的节奏，没有打出最大程度的作用，或者没有打完所有的水晶，或者干脆空过一回合，就是差的节奏，对局中打出好的节奏的回合数越多，就越有可能战胜，所以一个好的玩家，应该尽可能打出好的节奏，同时迫使对方发出差的节奏，然而炉石是个抽牌游戏，当前回合抽到的牌很大程度上决定了节奏，但是玩家对于手牌的利用也很重要，手牌好的时候要利用起来滚雪球，手牌差的时候要设法通过操作创造机会\n\n## 节奏的快和慢\n节奏的速度是什么？什么时候需要抢节奏，什么时候需要拖节奏？如果说对节奏好坏的掌握属于基本功，那对节奏快慢的掌握才能真正反映一个人的大局观\n\n回答这个问题首先要解释下速度的概念，速度取决于卡组的曲线，曲线越靠前速度越快，反之则越慢，通常来说卡组分为快、中、慢速3种，以当前加基森版本为例，高速卡组有青海萨、海盗战，中速卡组有龙牧、青玉萨、海龙战，慢速卡组有青玉德、宇宙法、宇宙术\n\n对于这3种速度之间的克制关系，一个比较公认的观念是，通常高速克制慢速，慢速克制中速，中速克制高速，根据这个关系，就可以判断出本局对阵是优势对局还是劣势对局，优势要稳，劣势要博，从而就可以判断应该抢节奏还是拖节奏，以一套中速卡组的优劣对局为例\n\n### 中速卡组对阵高速卡组（优势对局）\n中速卡组的特点是前期质量生物压场，中后期靠场面配合法术平推取胜，高速卡组的特点是前期铺场低费随从抢血，中期直伤爆发斩杀，在这样的对局中，中速卡组的前期生物可以以少换多，让高速卡组无法建立起场面优势，迫使高速卡组交直伤解场，导致高速卡组玩家手牌打空，从而失去比赛胜利，在这样的优势对局中，中速打卡组玩家应该稳扎稳打，尽可能用随从和对面交换，保护自己的血量，关键点不在于打死对方，而是消耗对方的伤害，逐步建立起场面优势，和手牌优势\n\n### 中速卡组对阵慢速卡组（劣势对局）\n慢速卡组的特点是，中前期解场保命，后期清场法术+高费质量生物完成返场，中速卡组的特点前面已经说过了，在这样的对局中，中速卡组的场面可以会被一波清掉，面对对方的大生物占场没有返场能力，从而失去胜利，那么在这样的对局中，中速卡组应该尽可能打快自己的节奏，迫使对面无法承受场面压力，提前交出清场法术，或者保命技能，让对方迟迟不能建立起场面，从而带崩对面的节奏获得胜利，这样做虽然存在 All in 后被清场的尴尬，但是如果节奏被拖住，后期是越打赢面越小，所以劣势要博的道理就在这里\n","source":"_posts/炉石传说之大局观.md","raw":"---\ntitle: 炉石传说之大局观\ndate: 2017-02-14 11:12:51\ncategories: 游戏\ntags: 炉石传说\n---\n\n> 节奏既是大局观，对阵双方谁掌握了节奏，谁就掌握了大局，谁就掌握了胜利\n—— 本人\n\n整天听大神们念叨着“大局观”，听起来很神秘，仿佛是一种高深莫测的武功，只有隐居在深山老林的高僧才能习得，然而事实并不是如此，大局观的概念非常简单，任何一个玩家都能理解，本人天梯对阵中，逐渐摸索出了大局观的真谛，并认为解释的比较合理，因此写下这篇文章谈谈我的理解\n<!--more-->\n\n## 节奏的好与坏\n节奏是指每个法力水晶的价值，当前回合的每个法力值都发挥了最大程度的作用，就是好的节奏，没有打出最大程度的作用，或者没有打完所有的水晶，或者干脆空过一回合，就是差的节奏，对局中打出好的节奏的回合数越多，就越有可能战胜，所以一个好的玩家，应该尽可能打出好的节奏，同时迫使对方发出差的节奏，然而炉石是个抽牌游戏，当前回合抽到的牌很大程度上决定了节奏，但是玩家对于手牌的利用也很重要，手牌好的时候要利用起来滚雪球，手牌差的时候要设法通过操作创造机会\n\n## 节奏的快和慢\n节奏的速度是什么？什么时候需要抢节奏，什么时候需要拖节奏？如果说对节奏好坏的掌握属于基本功，那对节奏快慢的掌握才能真正反映一个人的大局观\n\n回答这个问题首先要解释下速度的概念，速度取决于卡组的曲线，曲线越靠前速度越快，反之则越慢，通常来说卡组分为快、中、慢速3种，以当前加基森版本为例，高速卡组有青海萨、海盗战，中速卡组有龙牧、青玉萨、海龙战，慢速卡组有青玉德、宇宙法、宇宙术\n\n对于这3种速度之间的克制关系，一个比较公认的观念是，通常高速克制慢速，慢速克制中速，中速克制高速，根据这个关系，就可以判断出本局对阵是优势对局还是劣势对局，优势要稳，劣势要博，从而就可以判断应该抢节奏还是拖节奏，以一套中速卡组的优劣对局为例\n\n### 中速卡组对阵高速卡组（优势对局）\n中速卡组的特点是前期质量生物压场，中后期靠场面配合法术平推取胜，高速卡组的特点是前期铺场低费随从抢血，中期直伤爆发斩杀，在这样的对局中，中速卡组的前期生物可以以少换多，让高速卡组无法建立起场面优势，迫使高速卡组交直伤解场，导致高速卡组玩家手牌打空，从而失去比赛胜利，在这样的优势对局中，中速打卡组玩家应该稳扎稳打，尽可能用随从和对面交换，保护自己的血量，关键点不在于打死对方，而是消耗对方的伤害，逐步建立起场面优势，和手牌优势\n\n### 中速卡组对阵慢速卡组（劣势对局）\n慢速卡组的特点是，中前期解场保命，后期清场法术+高费质量生物完成返场，中速卡组的特点前面已经说过了，在这样的对局中，中速卡组的场面可以会被一波清掉，面对对方的大生物占场没有返场能力，从而失去胜利，那么在这样的对局中，中速卡组应该尽可能打快自己的节奏，迫使对面无法承受场面压力，提前交出清场法术，或者保命技能，让对方迟迟不能建立起场面，从而带崩对面的节奏获得胜利，这样做虽然存在 All in 后被清场的尴尬，但是如果节奏被拖住，后期是越打赢面越小，所以劣势要博的道理就在这里\n","slug":"炉石传说之大局观","published":1,"updated":"2017-05-06T01:47:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o3uyc8000sd5tb6f7dmdik","content":"<blockquote><p>节奏既是大局观，对阵双方谁掌握了节奏，谁就掌握了大局，谁就掌握了胜利<br>—— 本人</p></blockquote><p>整天听大神们念叨着“大局观”，听起来很神秘，仿佛是一种高深莫测的武功，只有隐居在深山老林的高僧才能习得，然而事实并不是如此，大局观的概念非常简单，任何一个玩家都能理解，本人天梯对阵中，逐渐摸索出了大局观的真谛，并认为解释的比较合理，因此写下这篇文章谈谈我的理解<br><a id=\"more\"></a></p><h2 id=\"节奏的好与坏\"><a href=\"#节奏的好与坏\" class=\"headerlink\" title=\"节奏的好与坏\"></a>节奏的好与坏</h2><p>节奏是指每个法力水晶的价值，当前回合的每个法力值都发挥了最大程度的作用，就是好的节奏，没有打出最大程度的作用，或者没有打完所有的水晶，或者干脆空过一回合，就是差的节奏，对局中打出好的节奏的回合数越多，就越有可能战胜，所以一个好的玩家，应该尽可能打出好的节奏，同时迫使对方发出差的节奏，然而炉石是个抽牌游戏，当前回合抽到的牌很大程度上决定了节奏，但是玩家对于手牌的利用也很重要，手牌好的时候要利用起来滚雪球，手牌差的时候要设法通过操作创造机会</p><h2 id=\"节奏的快和慢\"><a href=\"#节奏的快和慢\" class=\"headerlink\" title=\"节奏的快和慢\"></a>节奏的快和慢</h2><p>节奏的速度是什么？什么时候需要抢节奏，什么时候需要拖节奏？如果说对节奏好坏的掌握属于基本功，那对节奏快慢的掌握才能真正反映一个人的大局观</p><p>回答这个问题首先要解释下速度的概念，速度取决于卡组的曲线，曲线越靠前速度越快，反之则越慢，通常来说卡组分为快、中、慢速3种，以当前加基森版本为例，高速卡组有青海萨、海盗战，中速卡组有龙牧、青玉萨、海龙战，慢速卡组有青玉德、宇宙法、宇宙术</p><p>对于这3种速度之间的克制关系，一个比较公认的观念是，通常高速克制慢速，慢速克制中速，中速克制高速，根据这个关系，就可以判断出本局对阵是优势对局还是劣势对局，优势要稳，劣势要博，从而就可以判断应该抢节奏还是拖节奏，以一套中速卡组的优劣对局为例</p><h3 id=\"中速卡组对阵高速卡组（优势对局）\"><a href=\"#中速卡组对阵高速卡组（优势对局）\" class=\"headerlink\" title=\"中速卡组对阵高速卡组（优势对局）\"></a>中速卡组对阵高速卡组（优势对局）</h3><p>中速卡组的特点是前期质量生物压场，中后期靠场面配合法术平推取胜，高速卡组的特点是前期铺场低费随从抢血，中期直伤爆发斩杀，在这样的对局中，中速卡组的前期生物可以以少换多，让高速卡组无法建立起场面优势，迫使高速卡组交直伤解场，导致高速卡组玩家手牌打空，从而失去比赛胜利，在这样的优势对局中，中速打卡组玩家应该稳扎稳打，尽可能用随从和对面交换，保护自己的血量，关键点不在于打死对方，而是消耗对方的伤害，逐步建立起场面优势，和手牌优势</p><h3 id=\"中速卡组对阵慢速卡组（劣势对局）\"><a href=\"#中速卡组对阵慢速卡组（劣势对局）\" class=\"headerlink\" title=\"中速卡组对阵慢速卡组（劣势对局）\"></a>中速卡组对阵慢速卡组（劣势对局）</h3><p>慢速卡组的特点是，中前期解场保命，后期清场法术+高费质量生物完成返场，中速卡组的特点前面已经说过了，在这样的对局中，中速卡组的场面可以会被一波清掉，面对对方的大生物占场没有返场能力，从而失去胜利，那么在这样的对局中，中速卡组应该尽可能打快自己的节奏，迫使对面无法承受场面压力，提前交出清场法术，或者保命技能，让对方迟迟不能建立起场面，从而带崩对面的节奏获得胜利，这样做虽然存在 All in 后被清场的尴尬，但是如果节奏被拖住，后期是越打赢面越小，所以劣势要博的道理就在这里</p>","excerpt":"<blockquote><p>节奏既是大局观，对阵双方谁掌握了节奏，谁就掌握了大局，谁就掌握了胜利<br>—— 本人</p></blockquote><p>整天听大神们念叨着“大局观”，听起来很神秘，仿佛是一种高深莫测的武功，只有隐居在深山老林的高僧才能习得，然而事实并不是如此，大局观的概念非常简单，任何一个玩家都能理解，本人天梯对阵中，逐渐摸索出了大局观的真谛，并认为解释的比较合理，因此写下这篇文章谈谈我的理解<br>","more":"</p><h2 id=\"节奏的好与坏\"><a href=\"#节奏的好与坏\" class=\"headerlink\" title=\"节奏的好与坏\"></a>节奏的好与坏</h2><p>节奏是指每个法力水晶的价值，当前回合的每个法力值都发挥了最大程度的作用，就是好的节奏，没有打出最大程度的作用，或者没有打完所有的水晶，或者干脆空过一回合，就是差的节奏，对局中打出好的节奏的回合数越多，就越有可能战胜，所以一个好的玩家，应该尽可能打出好的节奏，同时迫使对方发出差的节奏，然而炉石是个抽牌游戏，当前回合抽到的牌很大程度上决定了节奏，但是玩家对于手牌的利用也很重要，手牌好的时候要利用起来滚雪球，手牌差的时候要设法通过操作创造机会</p><h2 id=\"节奏的快和慢\"><a href=\"#节奏的快和慢\" class=\"headerlink\" title=\"节奏的快和慢\"></a>节奏的快和慢</h2><p>节奏的速度是什么？什么时候需要抢节奏，什么时候需要拖节奏？如果说对节奏好坏的掌握属于基本功，那对节奏快慢的掌握才能真正反映一个人的大局观</p><p>回答这个问题首先要解释下速度的概念，速度取决于卡组的曲线，曲线越靠前速度越快，反之则越慢，通常来说卡组分为快、中、慢速3种，以当前加基森版本为例，高速卡组有青海萨、海盗战，中速卡组有龙牧、青玉萨、海龙战，慢速卡组有青玉德、宇宙法、宇宙术</p><p>对于这3种速度之间的克制关系，一个比较公认的观念是，通常高速克制慢速，慢速克制中速，中速克制高速，根据这个关系，就可以判断出本局对阵是优势对局还是劣势对局，优势要稳，劣势要博，从而就可以判断应该抢节奏还是拖节奏，以一套中速卡组的优劣对局为例</p><h3 id=\"中速卡组对阵高速卡组（优势对局）\"><a href=\"#中速卡组对阵高速卡组（优势对局）\" class=\"headerlink\" title=\"中速卡组对阵高速卡组（优势对局）\"></a>中速卡组对阵高速卡组（优势对局）</h3><p>中速卡组的特点是前期质量生物压场，中后期靠场面配合法术平推取胜，高速卡组的特点是前期铺场低费随从抢血，中期直伤爆发斩杀，在这样的对局中，中速卡组的前期生物可以以少换多，让高速卡组无法建立起场面优势，迫使高速卡组交直伤解场，导致高速卡组玩家手牌打空，从而失去比赛胜利，在这样的优势对局中，中速打卡组玩家应该稳扎稳打，尽可能用随从和对面交换，保护自己的血量，关键点不在于打死对方，而是消耗对方的伤害，逐步建立起场面优势，和手牌优势</p><h3 id=\"中速卡组对阵慢速卡组（劣势对局）\"><a href=\"#中速卡组对阵慢速卡组（劣势对局）\" class=\"headerlink\" title=\"中速卡组对阵慢速卡组（劣势对局）\"></a>中速卡组对阵慢速卡组（劣势对局）</h3><p>慢速卡组的特点是，中前期解场保命，后期清场法术+高费质量生物完成返场，中速卡组的特点前面已经说过了，在这样的对局中，中速卡组的场面可以会被一波清掉，面对对方的大生物占场没有返场能力，从而失去胜利，那么在这样的对局中，中速卡组应该尽可能打快自己的节奏，迫使对面无法承受场面压力，提前交出清场法术，或者保命技能，让对方迟迟不能建立起场面，从而带崩对面的节奏获得胜利，这样做虽然存在 All in 后被清场的尴尬，但是如果节奏被拖住，后期是越打赢面越小，所以劣势要博的道理就在这里</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3o3uybj0005d5tb2fmj9bd4","category_id":"cj3o3uybd0003d5tbojmqo0fu","_id":"cj3o3uybs000ad5tb0rmbi9xn"},{"post_id":"cj3o3uyba0001d5tbfegncmgg","category_id":"cj3o3uybd0003d5tbojmqo0fu","_id":"cj3o3uybv000ed5tblg2juafx"},{"post_id":"cj3o3uybl0007d5tb9dvpapkg","category_id":"cj3o3uybd0003d5tbojmqo0fu","_id":"cj3o3uyby000hd5tbde23l7o2"},{"post_id":"cj3o3uybc0002d5tb5yk5ftg7","category_id":"cj3o3uybd0003d5tbojmqo0fu","_id":"cj3o3uyc0000ld5tbqd9bcqgo"},{"post_id":"cj3o3uybs000bd5tbmvhu1tpz","category_id":"cj3o3uybd0003d5tbojmqo0fu","_id":"cj3o3uyc3000od5tbx2p7d62a"},{"post_id":"cj3o3uybi0004d5tbisingzu0","category_id":"cj3o3uybd0003d5tbojmqo0fu","_id":"cj3o3uyc8000rd5tbkzbxse2i"},{"post_id":"cj3o3uyby000id5tbedbwtuq6","category_id":"cj3o3uybd0003d5tbojmqo0fu","_id":"cj3o3uycj000vd5tb8taevlau"},{"post_id":"cj3o3uyc1000nd5tb757quy6l","category_id":"cj3o3uyc0000kd5tb2tnvqyv4","_id":"cj3o3uycl000xd5tbezq8w0iy"},{"post_id":"cj3o3uybq0009d5tbmbe0eyrk","category_id":"cj3o3uyc0000kd5tb2tnvqyv4","_id":"cj3o3uycn000yd5tbzoobuq71"},{"post_id":"cj3o3uyc6000pd5tbqx66rbsb","category_id":"cj3o3uybd0003d5tbojmqo0fu","_id":"cj3o3uyco0011d5tb5xbxci1h"},{"post_id":"cj3o3uybv000gd5tbxvjysibz","category_id":"cj3o3uyc0000kd5tb2tnvqyv4","_id":"cj3o3uyco0012d5tbhnbcqwhb"},{"post_id":"cj3o3uyc8000sd5tb6f7dmdik","category_id":"cj3o3uycl000wd5tbsdtyysii","_id":"cj3o3uycp0013d5tbp6vzy0ar"},{"post_id":"cj3o3uyb20000d5tbwzb7s0ec","category_id":"cj3o3uybd0003d5tbojmqo0fu","_id":"cj3phx2qs0001f8tbhsarq3xw"}],"PostTag":[{"post_id":"cj3o3uybi0004d5tbisingzu0","tag_id":"cj3o3uybk0006d5tbfbru52pq","_id":"cj3o3uybv000fd5tbt5mvr956"},{"post_id":"cj3o3uybj0005d5tb2fmj9bd4","tag_id":"cj3o3uybk0006d5tbfbru52pq","_id":"cj3o3uyc0000md5tb7c425ccd"},{"post_id":"cj3o3uybs000bd5tbmvhu1tpz","tag_id":"cj3o3uyc0000jd5tb56aemqkp","_id":"cj3o3uyci000td5tbr0hzh9eo"},{"post_id":"cj3o3uyc6000pd5tbqx66rbsb","tag_id":"cj3o3uycj000ud5tb1hxr1tjr","_id":"cj3o3uyco0010d5tbdv7g6jbl"},{"post_id":"cj3o3uyc8000sd5tb6f7dmdik","tag_id":"cj3o3uyco000zd5tb0z2fwulo","_id":"cj3o3uycp0014d5tb0blv6t5j"},{"post_id":"cj3o3uyb20000d5tbwzb7s0ec","tag_id":"cj3phx2qo0000f8tb722w29v8","_id":"cj3phx2qv0002f8tbinu4pkfp"}],"Tag":[{"name":"Webpack","_id":"cj3o3uybk0006d5tbfbru52pq"},{"name":"Https","_id":"cj3o3uyc0000jd5tb56aemqkp"},{"name":"React","_id":"cj3o3uycj000ud5tb1hxr1tjr"},{"name":"炉石传说","_id":"cj3o3uyco000zd5tb0z2fwulo"},{"name":"Linux","_id":"cj3phx2qo0000f8tb722w29v8"}]}}